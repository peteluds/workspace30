
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4821      	ldr	r0, [pc, #132]	; (8000248 <endfiniloop+0x4>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f000 ffe5 	bl	80011a0 <__core_init>
 80001d6:	f000 fb63 	bl	80008a0 <__early_init>
 80001da:	481c      	ldr	r0, [pc, #112]	; (800024c <endfiniloop+0x8>)
 80001dc:	491c      	ldr	r1, [pc, #112]	; (8000250 <endfiniloop+0xc>)
 80001de:	4a1d      	ldr	r2, [pc, #116]	; (8000254 <endfiniloop+0x10>)

080001e0 <msloop>:
 80001e0:	4291      	cmp	r1, r2
 80001e2:	bf3c      	itt	cc
 80001e4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e8:	e7fa      	bcc.n	80001e0 <msloop>
 80001ea:	491b      	ldr	r1, [pc, #108]	; (8000258 <endfiniloop+0x14>)
 80001ec:	4a16      	ldr	r2, [pc, #88]	; (8000248 <endfiniloop+0x4>)

080001ee <psloop>:
 80001ee:	4291      	cmp	r1, r2
 80001f0:	bf3c      	itt	cc
 80001f2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f6:	e7fa      	bcc.n	80001ee <psloop>
 80001f8:	4918      	ldr	r1, [pc, #96]	; (800025c <endfiniloop+0x18>)
 80001fa:	4a19      	ldr	r2, [pc, #100]	; (8000260 <endfiniloop+0x1c>)
 80001fc:	4b19      	ldr	r3, [pc, #100]	; (8000264 <endfiniloop+0x20>)

080001fe <dloop>:
 80001fe:	429a      	cmp	r2, r3
 8000200:	bf3e      	ittt	cc
 8000202:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000206:	f842 0b04 	strcc.w	r0, [r2], #4
 800020a:	e7f8      	bcc.n	80001fe <dloop>
 800020c:	2000      	movs	r0, #0
 800020e:	4916      	ldr	r1, [pc, #88]	; (8000268 <endfiniloop+0x24>)
 8000210:	4a16      	ldr	r2, [pc, #88]	; (800026c <endfiniloop+0x28>)

08000212 <bloop>:
 8000212:	4291      	cmp	r1, r2
 8000214:	bf3c      	itt	cc
 8000216:	f841 0b04 	strcc.w	r0, [r1], #4
 800021a:	e7fa      	bcc.n	8000212 <bloop>
 800021c:	f000 ffb8 	bl	8001190 <__late_init>
 8000220:	4c13      	ldr	r4, [pc, #76]	; (8000270 <endfiniloop+0x2c>)
 8000222:	4d14      	ldr	r5, [pc, #80]	; (8000274 <endfiniloop+0x30>)

08000224 <initloop>:
 8000224:	42ac      	cmp	r4, r5
 8000226:	da03      	bge.n	8000230 <endinitloop>
 8000228:	f854 1b04 	ldr.w	r1, [r4], #4
 800022c:	4788      	blx	r1
 800022e:	e7f9      	b.n	8000224 <initloop>

08000230 <endinitloop>:
 8000230:	f000 fc0e 	bl	8000a50 <main>
 8000234:	4c10      	ldr	r4, [pc, #64]	; (8000278 <endfiniloop+0x34>)
 8000236:	4d11      	ldr	r5, [pc, #68]	; (800027c <endfiniloop+0x38>)

08000238 <finiloop>:
 8000238:	42ac      	cmp	r4, r5
 800023a:	da03      	bge.n	8000244 <endfiniloop>
 800023c:	f854 1b04 	ldr.w	r1, [r4], #4
 8000240:	4788      	blx	r1
 8000242:	e7f9      	b.n	8000238 <finiloop>

08000244 <endfiniloop>:
 8000244:	f000 bf9c 	b.w	8001180 <__default_exit>
 8000248:	20000800 	.word	0x20000800
 800024c:	55555555 	.word	0x55555555
 8000250:	20000000 	.word	0x20000000
 8000254:	20000400 	.word	0x20000400
 8000258:	20000400 	.word	0x20000400
 800025c:	080012a0 	.word	0x080012a0
 8000260:	20000800 	.word	0x20000800
 8000264:	20000800 	.word	0x20000800
 8000268:	20000800 	.word	0x20000800
 800026c:	20000e08 	.word	0x20000e08
 8000270:	080001c0 	.word	0x080001c0
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	080001c0 	.word	0x080001c0

08000280 <_port_switch>:
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000284:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000288:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000290 <_port_thread_start>:
 8000290:	f000 fbbe 	bl	8000a10 <_dbg_check_unlock>
 8000294:	f000 fb6c 	bl	8000970 <_stats_stop_measure_crit_thd>
 8000298:	2300      	movs	r3, #0
 800029a:	f383 8811 	msr	BASEPRI, r3
 800029e:	4628      	mov	r0, r5
 80002a0:	47a0      	blx	r4
 80002a2:	2000      	movs	r0, #0
 80002a4:	f000 ff3c 	bl	8001120 <chThdExit>

080002a8 <_port_switch_from_isr>:
 80002a8:	f000 fb6a 	bl	8000980 <_stats_start_measure_crit_thd>
 80002ac:	f000 fbc0 	bl	8000a30 <_dbg_check_lock>
 80002b0:	f000 fb6e 	bl	8000990 <chSchDoReschedule>
 80002b4:	f000 fbac 	bl	8000a10 <_dbg_check_unlock>
 80002b8:	f000 fb5a 	bl	8000970 <_stats_stop_measure_crit_thd>

080002bc <_port_exit_from_isr>:
 80002bc:	df00      	svc	0
 80002be:	e7fe      	b.n	80002be <_port_exit_from_isr+0x2>

080002c0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80002c0:	e7fe      	b.n	80002c0 <_idle_thread>
 80002c2:	bf00      	nop
	...

080002d0 <stSetAlarm>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 80002d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d4:	68da      	ldr	r2, [r3, #12]
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 80002d6:	0792      	lsls	r2, r2, #30
 80002d8:	d501      	bpl.n	80002de <stSetAlarm+0xe>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80002da:	6358      	str	r0, [r3, #52]	; 0x34
 80002dc:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002de:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80002e0:	4b01      	ldr	r3, [pc, #4]	; (80002e8 <stSetAlarm+0x18>)
 80002e2:	4a02      	ldr	r2, [pc, #8]	; (80002ec <stSetAlarm+0x1c>)
 80002e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80002e6:	e7fe      	b.n	80002e6 <stSetAlarm+0x16>
 80002e8:	20000808 	.word	0x20000808
 80002ec:	08001290 	.word	0x08001290

080002f0 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80002f0:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 80002f4:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80002f6:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80002fa:	2300      	movs	r3, #0
 80002fc:	f383 8811 	msr	BASEPRI, r3
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
	...

08000310 <chTMChainMeasurementToX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <chTMChainMeasurementToX+0x3c>)

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000312:	6842      	ldr	r2, [r0, #4]
 8000314:	685b      	ldr	r3, [r3, #4]
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8000316:	b470      	push	{r4, r5, r6}

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8000318:	608b      	str	r3, [r1, #8]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 800031a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800031e:	6886      	ldr	r6, [r0, #8]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000320:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000322:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000324:	18e4      	adds	r4, r4, r3
 8000326:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800032a:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800032c:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800032e:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000330:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000332:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000336:	d805      	bhi.n	8000344 <chTMChainMeasurementToX+0x34>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8000338:	6802      	ldr	r2, [r0, #0]
 800033a:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 800033c:	bf38      	it	cc
 800033e:	6003      	strcc	r3, [r0, #0]
  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8000340:	bc70      	pop	{r4, r5, r6}
 8000342:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000344:	6043      	str	r3, [r0, #4]
  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8000346:	bc70      	pop	{r4, r5, r6}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	e0001000 	.word	0xe0001000

08000350 <chTMStopMeasurementX>:
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000352:	4910      	ldr	r1, [pc, #64]	; (8000394 <chTMStopMeasurementX+0x44>)
 8000354:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000356:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000358:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800035a:	f8d1 74a0 	ldr.w	r7, [r1, #1184]	; 0x4a0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 800035e:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000360:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000362:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000366:	1ad3      	subs	r3, r2, r3
 8000368:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 800036a:	18e4      	adds	r4, r4, r3
 800036c:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000370:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000372:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000374:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000376:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000378:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 800037c:	d805      	bhi.n	800038a <chTMStopMeasurementX+0x3a>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 800037e:	6802      	ldr	r2, [r0, #0]
 8000380:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8000382:	bf38      	it	cc
 8000384:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800038a:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800038c:	bcf0      	pop	{r4, r5, r6, r7}
 800038e:	4770      	bx	lr
 8000390:	e0001000 	.word	0xe0001000
 8000394:	20000808 	.word	0x20000808
	...

080003a0 <chTMStartMeasurementX>:
 80003a0:	4b01      	ldr	r3, [pc, #4]	; (80003a8 <chTMStartMeasurementX+0x8>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80003a4:	6083      	str	r3, [r0, #8]
 80003a6:	4770      	bx	lr
 80003a8:	e0001000 	.word	0xe0001000
 80003ac:	00000000 	.word	0x00000000

080003b0 <_dbg_trace>:
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 80003b0:	4a0c      	ldr	r2, [pc, #48]	; (80003e4 <_dbg_trace+0x34>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80003b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80003b6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {
 80003b8:	b410      	push	{r4}
 80003ba:	6a4c      	ldr	r4, [r1, #36]	; 0x24

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
 80003bc:	6991      	ldr	r1, [r2, #24]
 80003be:	6059      	str	r1, [r3, #4]
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 80003c0:	601c      	str	r4, [r3, #0]
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
  ch.dbg.trace_buffer.tb_ptr->se_wtobjp = otp->p_u.wtobjp;
 80003c2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80003c4:	6099      	str	r1, [r3, #8]
  ch.dbg.trace_buffer.tb_ptr->se_state  = (uint8_t)otp->p_state;
 80003c6:	f890 1020 	ldrb.w	r1, [r0, #32]
 80003ca:	7319      	strb	r1, [r3, #12]
  if (++ch.dbg.trace_buffer.tb_ptr >=
 80003cc:	3310      	adds	r3, #16
 80003ce:	f502 6188 	add.w	r1, r2, #1088	; 0x440
 80003d2:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.tb_buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 80003d4:	bf28      	it	cs
 80003d6:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 80003da:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 80003dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	20000808 	.word	0x20000808
	...

080003f0 <chDbgCheckClassS>:
 *
 * @api
 */
void chDbgCheckClassS(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <chDbgCheckClassS+0x18>)
 80003f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003f4:	b91a      	cbnz	r2, 80003fe <chDbgCheckClassS+0xe>
 80003f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	dd00      	ble.n	80003fe <chDbgCheckClassS+0xe>
 80003fc:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fe:	b672      	cpsid	i
 8000400:	4a02      	ldr	r2, [pc, #8]	; (800040c <chDbgCheckClassS+0x1c>)
 8000402:	62da      	str	r2, [r3, #44]	; 0x2c
 8000404:	e7fe      	b.n	8000404 <chDbgCheckClassS+0x14>
 8000406:	bf00      	nop
 8000408:	20000808 	.word	0x20000808
 800040c:	080011e0 	.word	0x080011e0

08000410 <chDbgCheckClassI>:
 *
 * @api
 */
void chDbgCheckClassI(void) {

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <chDbgCheckClassI+0x18>)
 8000412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000414:	2a00      	cmp	r2, #0
 8000416:	db03      	blt.n	8000420 <chDbgCheckClassI+0x10>
 8000418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800041a:	2a00      	cmp	r2, #0
 800041c:	dd00      	ble.n	8000420 <chDbgCheckClassI+0x10>
 800041e:	4770      	bx	lr
 8000420:	b672      	cpsid	i
 8000422:	4a02      	ldr	r2, [pc, #8]	; (800042c <chDbgCheckClassI+0x1c>)
 8000424:	62da      	str	r2, [r3, #44]	; 0x2c
 8000426:	e7fe      	b.n	8000426 <chDbgCheckClassI+0x16>
 8000428:	20000808 	.word	0x20000808
 800042c:	080011e8 	.word	0x080011e8

08000430 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8000430:	b510      	push	{r4, lr}
 8000432:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 8000434:	f7ff ffec 	bl	8000410 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8000438:	b1cc      	cbz	r4, 800046e <chSchReadyI+0x3e>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 800043a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800043e:	b18b      	cbz	r3, 8000464 <chSchReadyI+0x34>
 8000440:	2b0f      	cmp	r3, #15
 8000442:	d00f      	beq.n	8000464 <chSchReadyI+0x34>
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000444:	2200      	movs	r2, #0
 8000446:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8000448:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <chSchReadyI+0x48>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800044a:	f884 2020 	strb.w	r2, [r4, #32]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800044e:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	428a      	cmp	r2, r1
 8000454:	d2fb      	bcs.n	800044e <chSchReadyI+0x1e>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800045a:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800045c:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800045e:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8000460:	605c      	str	r4, [r3, #4]

  return tp;
}
 8000462:	bd10      	pop	{r4, pc}
 8000464:	b672      	cpsid	i
 8000466:	4b04      	ldr	r3, [pc, #16]	; (8000478 <chSchReadyI+0x48>)
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <chSchReadyI+0x4c>)
 800046a:	62da      	str	r2, [r3, #44]	; 0x2c
 800046c:	e7fe      	b.n	800046c <chSchReadyI+0x3c>
 800046e:	b672      	cpsid	i
 8000470:	4b01      	ldr	r3, [pc, #4]	; (8000478 <chSchReadyI+0x48>)
 8000472:	4a02      	ldr	r2, [pc, #8]	; (800047c <chSchReadyI+0x4c>)
 8000474:	62da      	str	r2, [r3, #44]	; 0x2c
 8000476:	e7fe      	b.n	8000476 <chSchReadyI+0x46>
 8000478:	20000808 	.word	0x20000808
 800047c:	08001250 	.word	0x08001250

08000480 <_dbg_check_unlock_from_isr>:
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <_dbg_check_unlock_from_isr+0x1c>)
 8000482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000484:	2a00      	cmp	r2, #0
 8000486:	dd05      	ble.n	8000494 <_dbg_check_unlock_from_isr+0x14>
 8000488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800048a:	2a00      	cmp	r2, #0
 800048c:	dd02      	ble.n	8000494 <_dbg_check_unlock_from_isr+0x14>
    chSysHalt("SV#7");
  }
  _dbg_leave_lock();
 800048e:	2200      	movs	r2, #0
 8000490:	635a      	str	r2, [r3, #52]	; 0x34
 8000492:	4770      	bx	lr
 8000494:	b672      	cpsid	i
 8000496:	4a02      	ldr	r2, [pc, #8]	; (80004a0 <_dbg_check_unlock_from_isr+0x20>)
 8000498:	62da      	str	r2, [r3, #44]	; 0x2c
 800049a:	e7fe      	b.n	800049a <_dbg_check_unlock_from_isr+0x1a>
 800049c:	20000808 	.word	0x20000808
 80004a0:	080011f0 	.word	0x080011f0
	...

080004b0 <_dbg_check_lock_from_isr>:
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <_dbg_check_lock_from_isr+0x1c>)
 80004b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004b4:	2a00      	cmp	r2, #0
 80004b6:	dd01      	ble.n	80004bc <_dbg_check_lock_from_isr+0xc>
 80004b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ba:	b11a      	cbz	r2, 80004c4 <_dbg_check_lock_from_isr+0x14>
 80004bc:	b672      	cpsid	i
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <_dbg_check_lock_from_isr+0x20>)
 80004c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c2:	e7fe      	b.n	80004c2 <_dbg_check_lock_from_isr+0x12>
    chSysHalt("SV#6");
  }
  _dbg_enter_lock();
 80004c4:	2201      	movs	r2, #1
 80004c6:	635a      	str	r2, [r3, #52]	; 0x34
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000808 	.word	0x20000808
 80004d0:	080011f8 	.word	0x080011f8
	...

080004e0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 80004e0:	b538      	push	{r3, r4, r5, lr}
 80004e2:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80004e4:	2320      	movs	r3, #32
 80004e6:	f383 8811 	msr	BASEPRI, r3
/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 80004ea:	4819      	ldr	r0, [pc, #100]	; (8000550 <wakeup+0x70>)
 80004ec:	f7ff ff58 	bl	80003a0 <chTMStartMeasurementX>
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80004f0:	f7ff ffde 	bl	80004b0 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 80004f4:	f894 3020 	ldrb.w	r3, [r4, #32]
 80004f8:	2b07      	cmp	r3, #7
 80004fa:	d810      	bhi.n	800051e <wakeup+0x3e>
 80004fc:	e8df f003 	tbb	[pc, r3]
 8000500:	1e0f0f15 	.word	0x1e0f0f15
 8000504:	0a0f040a 	.word	0x0a0f040a
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8000508:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 800050a:	f7ff ff81 	bl	8000410 <chDbgCheckClassI>

  sp->s_cnt++;
 800050e:	68ab      	ldr	r3, [r5, #8]
 8000510:	3301      	adds	r3, #1
 8000512:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000514:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000518:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800051a:	6822      	ldr	r2, [r4, #0]
 800051c:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000524:	4620      	mov	r0, r4
 8000526:	f7ff ff83 	bl	8000430 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800052a:	f7ff ffa9 	bl	8000480 <_dbg_check_unlock_from_isr>
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 800052e:	4808      	ldr	r0, [pc, #32]	; (8000550 <wakeup+0x70>)
 8000530:	f7ff ff0e 	bl	8000350 <chTMStopMeasurementX>
 8000534:	2300      	movs	r3, #0
 8000536:	f383 8811 	msr	BASEPRI, r3
 800053a:	bd38      	pop	{r3, r4, r5, pc}
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 800053c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000548:	4620      	mov	r0, r4
 800054a:	f7ff ff71 	bl	8000430 <chSchReadyI>
 800054e:	e7ec      	b.n	800052a <wakeup+0x4a>
 8000550:	20000cd0 	.word	0x20000cd0
	...

08000560 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
/**
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  ch.kernel_stats.n_irq++;
 8000564:	4c57      	ldr	r4, [pc, #348]	; (80006c4 <VectorB0+0x164>)
 8000566:	f8d4 34a8 	ldr.w	r3, [r4, #1192]	; 0x4a8
 800056a:	3301      	adds	r3, #1
 800056c:	f8c4 34a8 	str.w	r3, [r4, #1192]	; 0x4a8
 8000570:	2220      	movs	r2, #32
 8000572:	f382 8811 	msr	BASEPRI, r2
 * @notapi
 */
void _dbg_check_enter_isr(void) {

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000576:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000578:	2b00      	cmp	r3, #0
 800057a:	db01      	blt.n	8000580 <VectorB0+0x20>
 800057c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800057e:	b11f      	cbz	r7, 8000588 <VectorB0+0x28>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
 8000582:	4b51      	ldr	r3, [pc, #324]	; (80006c8 <VectorB0+0x168>)
 8000584:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000586:	e7fe      	b.n	8000586 <VectorB0+0x26>
    chSysHalt("SV#8");
  }
  ch.dbg.isr_cnt++;
 8000588:	3301      	adds	r3, #1
 800058a:	6323      	str	r3, [r4, #48]	; 0x30

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800058c:	f387 8811 	msr	BASEPRI, r7
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000590:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000594:	6933      	ldr	r3, [r6, #16]
 8000596:	079b      	lsls	r3, r3, #30
 8000598:	d40d      	bmi.n	80005b6 <VectorB0+0x56>
 800059a:	2120      	movs	r1, #32
 800059c:	f381 8811 	msr	BASEPRI, r1
 * @notapi
 */
void _dbg_check_leave_isr(void) {

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80005a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005a2:	4a48      	ldr	r2, [pc, #288]	; (80006c4 <VectorB0+0x164>)
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	dd02      	ble.n	80005ae <VectorB0+0x4e>
 80005a8:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d064      	beq.n	8000678 <VectorB0+0x118>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ae:	b672      	cpsid	i
 80005b0:	4b46      	ldr	r3, [pc, #280]	; (80006cc <VectorB0+0x16c>)
 80005b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005b4:	e7fe      	b.n	80005b4 <VectorB0+0x54>
    STM32_ST_TIM->SR = 0U;
 80005b6:	6137      	str	r7, [r6, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80005b8:	f382 8811 	msr	BASEPRI, r2
/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 80005bc:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 80005c0:	f7ff feee 	bl	80003a0 <chTMStartMeasurementX>
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80005c4:	f7ff ff74 	bl	80004b0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 80005c8:	f7ff ff22 	bl	8000410 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 80005cc:	f7ff ff20 	bl	8000410 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 80005d0:	69e5      	ldr	r5, [r4, #28]
 80005d2:	6a72      	ldr	r2, [r6, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80005d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005d6:	68a9      	ldr	r1, [r5, #8]
 80005d8:	1ad0      	subs	r0, r2, r3
 80005da:	4288      	cmp	r0, r1
 80005dc:	bf38      	it	cc
 80005de:	f104 061c 	addcc.w	r6, r4, #28
 80005e2:	d328      	bcc.n	8000636 <VectorB0+0xd6>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80005e4:	46b8      	mov	r8, r7
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80005e6:	4637      	mov	r7, r6
 80005e8:	f104 061c 	add.w	r6, r4, #28
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80005ec:	682a      	ldr	r2, [r5, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80005ee:	f8d5 900c 	ldr.w	r9, [r5, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80005f2:	440b      	add	r3, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80005f4:	42b2      	cmp	r2, r6
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80005f6:	62a3      	str	r3, [r4, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80005f8:	6056      	str	r6, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80005fa:	61e2      	str	r2, [r4, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80005fc:	f8c5 800c 	str.w	r8, [r5, #12]
 8000600:	bf08      	it	eq
 8000602:	f8c7 800c 	streq.w	r8, [r7, #12]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000606:	f7ff ff3b 	bl	8000480 <_dbg_check_unlock_from_isr>
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 800060a:	4831      	ldr	r0, [pc, #196]	; (80006d0 <VectorB0+0x170>)
 800060c:	f7ff fea0 	bl	8000350 <chTMStopMeasurementX>
 8000610:	f388 8811 	msr	BASEPRI, r8
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 8000614:	6928      	ldr	r0, [r5, #16]
 8000616:	47c8      	blx	r9
 8000618:	2320      	movs	r3, #32
 800061a:	f383 8811 	msr	BASEPRI, r3
/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 800061e:	482c      	ldr	r0, [pc, #176]	; (80006d0 <VectorB0+0x170>)
 8000620:	f7ff febe 	bl	80003a0 <chTMStartMeasurementX>
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000624:	f7ff ff44 	bl	80004b0 <_dbg_check_lock_from_isr>
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 8000628:	69e5      	ldr	r5, [r4, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800062a:	6a7a      	ldr	r2, [r7, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 800062c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800062e:	68a9      	ldr	r1, [r5, #8]
 8000630:	1ad0      	subs	r0, r2, r3
 8000632:	4281      	cmp	r1, r0
 8000634:	d9da      	bls.n	80005ec <VectorB0+0x8c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000636:	42b5      	cmp	r5, r6
 8000638:	d015      	beq.n	8000666 <VectorB0+0x106>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 800063a:	440b      	add	r3, r1
 800063c:	1a9b      	subs	r3, r3, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800063e:	2b01      	cmp	r3, #1
 8000640:	bf98      	it	ls
 8000642:	2302      	movls	r3, #2
  }
  port_timer_set_alarm(now + delta);
 8000644:	189d      	adds	r5, r3, r2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8000646:	4628      	mov	r0, r5
 8000648:	f7ff fe42 	bl	80002d0 <stSetAlarm>
 800064c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.vt_lasttime) <=
 8000650:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000654:	481b      	ldr	r0, [pc, #108]	; (80006c4 <VectorB0+0x164>)
 8000656:	1a6b      	subs	r3, r5, r1
 8000658:	1a52      	subs	r2, r2, r1
 800065a:	429a      	cmp	r2, r3
 800065c:	d903      	bls.n	8000666 <VectorB0+0x106>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065e:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <VectorB0+0x174>)
 8000662:	62c3      	str	r3, [r0, #44]	; 0x2c
 8000664:	e7fe      	b.n	8000664 <VectorB0+0x104>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000666:	f7ff ff0b 	bl	8000480 <_dbg_check_unlock_from_isr>
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 800066a:	4819      	ldr	r0, [pc, #100]	; (80006d0 <VectorB0+0x170>)
 800066c:	f7ff fe70 	bl	8000350 <chTMStopMeasurementX>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000670:	2300      	movs	r3, #0
 8000672:	f383 8811 	msr	BASEPRI, r3
 8000676:	e790      	b.n	800059a <VectorB0+0x3a>
    chSysHalt("SV#9");
  }
  ch.dbg.isr_cnt--;
 8000678:	3b01      	subs	r3, #1
 800067a:	6313      	str	r3, [r2, #48]	; 0x30
 800067c:	f380 8811 	msr	BASEPRI, r0
 8000680:	f381 8811 	msr	BASEPRI, r1
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <VectorB0+0x178>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800068c:	d103      	bne.n	8000696 <VectorB0+0x136>
 800068e:	f383 8811 	msr	BASEPRI, r3
 8000692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000696:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800069a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800069e:	f843 1c04 	str.w	r1, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 80006a2:	f1a3 0120 	sub.w	r1, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80006a6:	f381 8809 	msr	PSP, r1
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 80006aa:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 80006ac:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80006ae:	6889      	ldr	r1, [r1, #8]
 80006b0:	6892      	ldr	r2, [r2, #8]
 80006b2:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80006b4:	bf8c      	ite	hi
 80006b6:	4a09      	ldrhi	r2, [pc, #36]	; (80006dc <VectorB0+0x17c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80006b8:	4a09      	ldrls	r2, [pc, #36]	; (80006e0 <VectorB0+0x180>)
 80006ba:	f843 2c08 	str.w	r2, [r3, #-8]
 80006be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006c2:	bf00      	nop
 80006c4:	20000808 	.word	0x20000808
 80006c8:	08001200 	.word	0x08001200
 80006cc:	08001208 	.word	0x08001208
 80006d0:	20000cd0 	.word	0x20000cd0
 80006d4:	08001240 	.word	0x08001240
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	080002a9 	.word	0x080002a9
 80006e0:	080002bc 	.word	0x080002bc
	...

080006f0 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 80006f0:	e7fe      	b.n	80006f0 <BusFault_Handler>
 80006f2:	bf00      	nop
	...

08000700 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000700:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8000702:	4c16      	ldr	r4, [pc, #88]	; (800075c <chSchGoSleepS+0x5c>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8000704:	4606      	mov	r6, r0
  thread_t *otp;

  chDbgCheckClassS();
 8000706:	f7ff fe73 	bl	80003f0 <chDbgCheckClassS>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800070a:	6823      	ldr	r3, [r4, #0]

  otp = currp;
 800070c:	69a5      	ldr	r5, [r4, #24]

  tqp->p_next = tp->p_next;
 800070e:	681a      	ldr	r2, [r3, #0]
  otp->p_state = newstate;
 8000710:	f885 6020 	strb.w	r6, [r5, #32]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000714:	2101      	movs	r1, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8000716:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 8000718:	4628      	mov	r0, r5
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800071a:	f883 1020 	strb.w	r1, [r3, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800071e:	6022      	str	r2, [r4, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8000720:	61a3      	str	r3, [r4, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8000722:	f7ff fe45 	bl	80003b0 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000726:	f8d4 34ac 	ldr.w	r3, [r4, #1196]	; 0x4ac
 800072a:	69a1      	ldr	r1, [r4, #24]
 800072c:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 800072e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8000732:	3148      	adds	r1, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000734:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000738:	f7ff fdea 	bl	8000310 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800073c:	f3ef 8309 	mrs	r3, PSP
 8000740:	69ea      	ldr	r2, [r5, #28]
 8000742:	3b24      	subs	r3, #36	; 0x24
 8000744:	429a      	cmp	r2, r3
 8000746:	d805      	bhi.n	8000754 <chSchGoSleepS+0x54>
 8000748:	69a0      	ldr	r0, [r4, #24]
 800074a:	4629      	mov	r1, r5
}
 800074c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8000750:	f7ff bd96 	b.w	8000280 <_port_switch>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
 8000756:	4b02      	ldr	r3, [pc, #8]	; (8000760 <chSchGoSleepS+0x60>)
 8000758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800075a:	e7fe      	b.n	800075a <chSchGoSleepS+0x5a>
 800075c:	20000808 	.word	0x20000808
 8000760:	08001210 	.word	0x08001210
	...

08000770 <chSchGoSleepTimeoutS.constprop.4>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000770:	b5f0      	push	{r4, r5, r6, r7, lr}
  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000772:	4e46      	ldr	r6, [pc, #280]	; (800088c <chSchGoSleepTimeoutS.constprop.4+0x11c>)
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000774:	4635      	mov	r5, r6
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8000776:	b087      	sub	sp, #28

  chDbgCheckClassS();
 8000778:	f7ff fe3a 	bl	80003f0 <chDbgCheckClassS>
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
 800077c:	f7ff fe48 	bl	8000410 <chDbgCheckClassI>

  if (TIME_INFINITE != time) {
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000780:	69b2      	ldr	r2, [r6, #24]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000782:	f855 3f1c 	ldr.w	r3, [r5, #28]!
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000786:	9205      	str	r2, [sp, #20]
 8000788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  vtp->vt_func = vtfunc;
 800078c:	4940      	ldr	r1, [pc, #256]	; (8000890 <chSchGoSleepTimeoutS.constprop.4+0x120>)
 800078e:	9104      	str	r1, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000790:	42ab      	cmp	r3, r5
 8000792:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8000794:	d05b      	beq.n	800084e <chSchGoSleepTimeoutS.constprop.4+0xde>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000796:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 800079a:	6ab4      	ldr	r4, [r6, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 800079c:	689a      	ldr	r2, [r3, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 800079e:	3010      	adds	r0, #16
 80007a0:	1b04      	subs	r4, r0, r4
    if (delta < ch.vtlist.vt_next->vt_delta) {
 80007a2:	4294      	cmp	r4, r2
 80007a4:	d331      	bcc.n	800080a <chSchGoSleepTimeoutS.constprop.4+0x9a>
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80007a6:	4294      	cmp	r4, r2
 80007a8:	d904      	bls.n	80007b4 <chSchGoSleepTimeoutS.constprop.4+0x44>
    delta -= p->vt_delta;
    p = p->vt_next;
 80007aa:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 80007ac:	1aa4      	subs	r4, r4, r2
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	42a2      	cmp	r2, r4
 80007b2:	d3fa      	bcc.n	80007aa <chSchGoSleepTimeoutS.constprop.4+0x3a>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 80007b4:	685a      	ldr	r2, [r3, #4]
 80007b6:	9202      	str	r2, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 80007b8:	af01      	add	r7, sp, #4
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 80007ba:	9301      	str	r3, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 80007bc:	6017      	str	r7, [r2, #0]
  p->vt_prev = vtp;
 80007be:	605f      	str	r7, [r3, #4]
  vtp->vt_delta = delta
 80007c0:	9403      	str	r4, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80007c2:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 80007c8:	1b12      	subs	r2, r2, r4
 80007ca:	609a      	str	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 80007cc:	6271      	str	r1, [r6, #36]	; 0x24
    chSchGoSleepS(newstate);
 80007ce:	2008      	movs	r0, #8
 80007d0:	f7ff ff96 	bl	8000700 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 80007d4:	f7ff fe1c 	bl	8000410 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 80007d8:	9b04      	ldr	r3, [sp, #16]
 80007da:	b193      	cbz	r3, 8000802 <chSchGoSleepTimeoutS.constprop.4+0x92>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 80007dc:	f7ff fe18 	bl	8000410 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 80007e0:	69f3      	ldr	r3, [r6, #28]
 80007e2:	492a      	ldr	r1, [pc, #168]	; (800088c <chSchGoSleepTimeoutS.constprop.4+0x11c>)
 80007e4:	42bb      	cmp	r3, r7
 80007e6:	d015      	beq.n	8000814 <chSchGoSleepTimeoutS.constprop.4+0xa4>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 80007e8:	9a02      	ldr	r2, [sp, #8]
 80007ea:	9b01      	ldr	r3, [sp, #4]
 80007ec:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 80007ee:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 80007f0:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 80007f2:	42ab      	cmp	r3, r5
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 80007f4:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 80007f6:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 80007f8:	d003      	beq.n	8000802 <chSchGoSleepTimeoutS.constprop.4+0x92>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 80007fa:	6899      	ldr	r1, [r3, #8]
 80007fc:	9a03      	ldr	r2, [sp, #12]
 80007fe:	440a      	add	r2, r1
 8000800:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000802:	69b3      	ldr	r3, [r6, #24]
 8000804:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8000806:	b007      	add	sp, #28
 8000808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800080a:	f7ff fd61 	bl	80002d0 <stSetAlarm>
 800080e:	69f3      	ldr	r3, [r6, #28]
 8000810:	689a      	ldr	r2, [r3, #8]
 8000812:	e7c8      	b.n	80007a6 <chSchGoSleepTimeoutS.constprop.4+0x36>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000814:	9a01      	ldr	r2, [sp, #4]
 8000816:	61ca      	str	r2, [r1, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 8000818:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800081a:	42aa      	cmp	r2, r5
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800081c:	6055      	str	r5, [r2, #4]
  vtp->vt_func = NULL;
 800081e:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000820:	d02b      	beq.n	800087a <chSchGoSleepTimeoutS.constprop.4+0x10a>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000822:	9803      	ldr	r0, [sp, #12]
 8000824:	6893      	ldr	r3, [r2, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000826:	6a89      	ldr	r1, [r1, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 8000828:	4403      	add	r3, r0
 800082a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800082e:	6093      	str	r3, [r2, #8]
 8000830:	6a40      	ldr	r0, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8000832:	1a42      	subs	r2, r0, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8000834:	4293      	cmp	r3, r2
 8000836:	d9e4      	bls.n	8000802 <chSchGoSleepTimeoutS.constprop.4+0x92>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 8000838:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800083a:	2b01      	cmp	r3, #1
 800083c:	bf98      	it	ls
 800083e:	2302      	movls	r3, #2
 8000840:	4418      	add	r0, r3
 8000842:	f7ff fd45 	bl	80002d0 <stSetAlarm>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 8000846:	69b3      	ldr	r3, [r6, #24]
 8000848:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 800084a:	b007      	add	sp, #28
 800084c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;
 800084e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000852:	9103      	str	r1, [sp, #12]
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000854:	68d1      	ldr	r1, [r2, #12]
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 8000856:	62b0      	str	r0, [r6, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
 8000858:	af01      	add	r7, sp, #4
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 800085a:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 800085e:	f011 0102 	ands.w	r1, r1, #2
 8000862:	f100 0010 	add.w	r0, r0, #16
      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8000866:	9301      	str	r3, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000868:	9302      	str	r3, [sp, #8]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 800086a:	61f7      	str	r7, [r6, #28]
      ch.vtlist.vt_prev = vtp;
 800086c:	6237      	str	r7, [r6, #32]
 800086e:	d108      	bne.n	8000882 <chSchGoSleepTimeoutS.constprop.4+0x112>
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000870:	2302      	movs	r3, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000872:	6350      	str	r0, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 8000874:	6111      	str	r1, [r2, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000876:	60d3      	str	r3, [r2, #12]
 8000878:	e7a9      	b.n	80007ce <chSchGoSleepTimeoutS.constprop.4+0x5e>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800087a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800087e:	60d3      	str	r3, [r2, #12]
 8000880:	e7bf      	b.n	8000802 <chSchGoSleepTimeoutS.constprop.4+0x92>
 8000882:	b672      	cpsid	i
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <chSchGoSleepTimeoutS.constprop.4+0x124>)
 8000886:	62f3      	str	r3, [r6, #44]	; 0x2c
 8000888:	e7fe      	b.n	8000888 <chSchGoSleepTimeoutS.constprop.4+0x118>
 800088a:	bf00      	nop
 800088c:	20000808 	.word	0x20000808
 8000890:	080004e1 	.word	0x080004e1
 8000894:	08001270 	.word	0x08001270
	...

080008a0 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80008a0:	492c      	ldr	r1, [pc, #176]	; (8000954 <__early_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <__early_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80008a4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80008a8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80008ac:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80008ae:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80008b0:	680b      	ldr	r3, [r1, #0]
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80008b8:	680a      	ldr	r2, [r1, #0]
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <__early_init+0xb4>)
 80008bc:	0790      	lsls	r0, r2, #30
 80008be:	d5fb      	bpl.n	80008b8 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 80008c0:	689a      	ldr	r2, [r3, #8]
 80008c2:	f022 0203 	bic.w	r2, r2, #3
 80008c6:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 80008cc:	4619      	mov	r1, r3
 80008ce:	688b      	ldr	r3, [r1, #8]
 80008d0:	4a20      	ldr	r2, [pc, #128]	; (8000954 <__early_init+0xb4>)
 80008d2:	f013 030c 	ands.w	r3, r3, #12
 80008d6:	d1fa      	bne.n	80008ce <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80008d8:	6811      	ldr	r1, [r2, #0]
 80008da:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 80008de:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80008e0:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 80008e2:	6813      	ldr	r3, [r2, #0]
 80008e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e8:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 80008ea:	6811      	ldr	r1, [r2, #0]
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <__early_init+0xb4>)
 80008ee:	0389      	lsls	r1, r1, #14
 80008f0:	d5fb      	bpl.n	80008ea <__early_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80008f2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80008f4:	f042 0201 	orr.w	r2, r2, #1
 80008f8:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80008fa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80008fc:	4915      	ldr	r1, [pc, #84]	; (8000954 <__early_init+0xb4>)
 80008fe:	0790      	lsls	r0, r2, #30
 8000900:	d5fb      	bpl.n	80008fa <__early_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <__early_init+0xbc>)
 8000904:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8000906:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000908:	4a13      	ldr	r2, [pc, #76]	; (8000958 <__early_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800090a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800090e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000910:	6853      	ldr	r3, [r2, #4]
 8000912:	0459      	lsls	r1, r3, #17
 8000914:	d5fc      	bpl.n	8000910 <__early_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000916:	490f      	ldr	r1, [pc, #60]	; (8000954 <__early_init+0xb4>)
 8000918:	680a      	ldr	r2, [r1, #0]
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <__early_init+0xb4>)
 800091c:	0192      	lsls	r2, r2, #6
 800091e:	d5fb      	bpl.n	8000918 <__early_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000920:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <__early_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8000922:	4910      	ldr	r1, [pc, #64]	; (8000964 <__early_init+0xc4>)
 8000924:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8000926:	f240 7105 	movw	r1, #1797	; 0x705
 800092a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	f042 0202 	orr.w	r2, r2, #2
 8000932:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000934:	461a      	mov	r2, r3
 8000936:	6893      	ldr	r3, [r2, #8]
 8000938:	4906      	ldr	r1, [pc, #24]	; (8000954 <__early_init+0xb4>)
 800093a:	f003 030c 	and.w	r3, r3, #12
 800093e:	2b08      	cmp	r3, #8
 8000940:	d1f9      	bne.n	8000936 <__early_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8000942:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	644b      	str	r3, [r1, #68]	; 0x44
 800094a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	664b      	str	r3, [r1, #100]	; 0x64
 8000952:	4770      	bx	lr
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000
 800095c:	0740540c 	.word	0x0740540c
 8000960:	40023c00 	.word	0x40023c00
 8000964:	38889400 	.word	0x38889400
	...

08000970 <_stats_stop_measure_crit_thd>:
/**
 * @brief   Stops the measurement of a thread critical zone.
 */
void _stats_stop_measure_crit_thd(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000970:	4801      	ldr	r0, [pc, #4]	; (8000978 <_stats_stop_measure_crit_thd+0x8>)
 8000972:	f7ff bced 	b.w	8000350 <chTMStopMeasurementX>
 8000976:	bf00      	nop
 8000978:	20000cb8 	.word	0x20000cb8
 800097c:	00000000 	.word	0x00000000

08000980 <_stats_start_measure_crit_thd>:
/**
 * @brief   Starts the measurement of a thread critical zone.
 */
void _stats_start_measure_crit_thd(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8000980:	4801      	ldr	r0, [pc, #4]	; (8000988 <_stats_start_measure_crit_thd+0x8>)
 8000982:	f7ff bd0d 	b.w	80003a0 <chTMStartMeasurementX>
 8000986:	bf00      	nop
 8000988:	20000cb8 	.word	0x20000cb8
 800098c:	00000000 	.word	0x00000000

08000990 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8000990:	b570      	push	{r4, r5, r6, lr}
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000992:	4d1b      	ldr	r5, [pc, #108]	; (8000a00 <chSchDoReschedule+0x70>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000994:	682a      	ldr	r2, [r5, #0]
 8000996:	69ac      	ldr	r4, [r5, #24]

  tqp->p_next = tp->p_next;
 8000998:	6813      	ldr	r3, [r2, #0]
 800099a:	68a1      	ldr	r1, [r4, #8]
 800099c:	602b      	str	r3, [r5, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800099e:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 80009a0:	2000      	movs	r0, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80009a2:	605d      	str	r5, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80009a4:	f882 6020 	strb.w	r6, [r2, #32]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80009a8:	61aa      	str	r2, [r5, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 80009aa:	f884 0020 	strb.w	r0, [r4, #32]
 80009ae:	e000      	b.n	80009b2 <chSchDoReschedule+0x22>
 80009b0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80009b2:	689a      	ldr	r2, [r3, #8]
 80009b4:	428a      	cmp	r2, r1
 80009b6:	d8fb      	bhi.n	80009b0 <chSchDoReschedule+0x20>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80009bc:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80009be:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 80009c0:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80009c2:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
 80009c4:	f7ff fcf4 	bl	80003b0 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 80009c8:	f8d5 34ac 	ldr.w	r3, [r5, #1196]	; 0x4ac
 80009cc:	69a9      	ldr	r1, [r5, #24]
 80009ce:	4e0c      	ldr	r6, [pc, #48]	; (8000a00 <chSchDoReschedule+0x70>)
 80009d0:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 80009d2:	3148      	adds	r1, #72	; 0x48
 80009d4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 80009d8:	f8c5 34ac 	str.w	r3, [r5, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 80009dc:	f7ff fc98 	bl	8000310 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80009e0:	f3ef 8309 	mrs	r3, PSP
 80009e4:	69e2      	ldr	r2, [r4, #28]
 80009e6:	3b24      	subs	r3, #36	; 0x24
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d805      	bhi.n	80009f8 <chSchDoReschedule+0x68>
 80009ec:	69b0      	ldr	r0, [r6, #24]
 80009ee:	4621      	mov	r1, r4
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 80009f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80009f4:	f7ff bc44 	b.w	8000280 <_port_switch>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
 80009fa:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <chSchDoReschedule+0x74>)
 80009fc:	62f3      	str	r3, [r6, #44]	; 0x2c
 80009fe:	e7fe      	b.n	80009fe <chSchDoReschedule+0x6e>
 8000a00:	20000808 	.word	0x20000808
 8000a04:	08001210 	.word	0x08001210
	...

08000a10 <_dbg_check_unlock>:
 *
 * @notapi
 */
void _dbg_check_unlock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <_dbg_check_unlock+0x18>)
 8000a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a14:	b922      	cbnz	r2, 8000a20 <_dbg_check_unlock+0x10>
 8000a16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	dd01      	ble.n	8000a20 <_dbg_check_unlock+0x10>
    chSysHalt("SV#5");
  }
  _dbg_leave_lock();
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a1e:	4770      	bx	lr
 8000a20:	b672      	cpsid	i
 8000a22:	4a02      	ldr	r2, [pc, #8]	; (8000a2c <_dbg_check_unlock+0x1c>)
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a26:	e7fe      	b.n	8000a26 <_dbg_check_unlock+0x16>
 8000a28:	20000808 	.word	0x20000808
 8000a2c:	08001220 	.word	0x08001220

08000a30 <_dbg_check_lock>:
 *
 * @notapi
 */
void _dbg_check_lock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <_dbg_check_lock+0x18>)
 8000a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a34:	b90a      	cbnz	r2, 8000a3a <_dbg_check_lock+0xa>
 8000a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a38:	b11a      	cbz	r2, 8000a42 <_dbg_check_lock+0x12>
 8000a3a:	b672      	cpsid	i
 8000a3c:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <_dbg_check_lock+0x1c>)
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a40:	e7fe      	b.n	8000a40 <_dbg_check_lock+0x10>
    chSysHalt("SV#4");
  }
  _dbg_enter_lock();
 8000a42:	2201      	movs	r2, #1
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	4770      	bx	lr
 8000a48:	20000808 	.word	0x20000808
 8000a4c:	08001228 	.word	0x08001228

08000a50 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8000a50:	4bcb      	ldr	r3, [pc, #812]	; (8000d80 <main+0x330>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000a52:	4ccc      	ldr	r4, [pc, #816]	; (8000d84 <main+0x334>)
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8000a54:	691a      	ldr	r2, [r3, #16]
 8000a56:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5a:	2200      	movs	r2, #0
#include "hal.h"

/*
 * Application entry point.
 */
int main(void) {
 8000a5c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000a60:	6119      	str	r1, [r3, #16]
 8000a62:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8000a64:	6958      	ldr	r0, [r3, #20]
 8000a66:	6159      	str	r1, [r3, #20]
 8000a68:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8000a6a:	6a18      	ldr	r0, [r3, #32]
 8000a6c:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8000a70:	6218      	str	r0, [r3, #32]
 8000a72:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8000a74:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000a76:	6259      	str	r1, [r3, #36]	; 0x24
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8000a7a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000a7c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000a80:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000a82:	6821      	ldr	r1, [r4, #0]
 8000a84:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000a88:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8000a8a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8000a8c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000a90:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000a94:	b087      	sub	sp, #28
 8000a96:	d003      	beq.n	8000aa0 <main+0x50>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8000a98:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000a9c:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8000a9e:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8000aa0:	4eb8      	ldr	r6, [pc, #736]	; (8000d84 <main+0x334>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8000aa2:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8000d80 <main+0x330>
 8000aa6:	6875      	ldr	r5, [r6, #4]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000aa8:	4ab7      	ldr	r2, [pc, #732]	; (8000d88 <main+0x338>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000aaa:	4fb8      	ldr	r7, [pc, #736]	; (8000d8c <main+0x33c>)
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000aac:	f8df b318 	ldr.w	fp, [pc, #792]	; 8000dc8 <main+0x378>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000ab0:	f8df a318 	ldr.w	sl, [pc, #792]	; 8000dcc <main+0x37c>
 8000ab4:	f8df e318 	ldr.w	lr, [pc, #792]	; 8000dd0 <main+0x380>
 8000ab8:	f8df 8318 	ldr.w	r8, [pc, #792]	; 8000dd4 <main+0x384>
 8000abc:	f8df c318 	ldr.w	ip, [pc, #792]	; 8000dd8 <main+0x388>
 8000ac0:	4cb3      	ldr	r4, [pc, #716]	; (8000d90 <main+0x340>)
 8000ac2:	48b4      	ldr	r0, [pc, #720]	; (8000d94 <main+0x344>)
 8000ac4:	49b4      	ldr	r1, [pc, #720]	; (8000d98 <main+0x348>)
 8000ac6:	4bb5      	ldr	r3, [pc, #724]	; (8000d9c <main+0x34c>)
 8000ac8:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8000acc:	6075      	str	r5, [r6, #4]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8000ace:	f8d9 5030 	ldr.w	r5, [r9, #48]	; 0x30
 8000ad2:	ea6f 2555 	mvn.w	r5, r5, lsr #9
 8000ad6:	ea6f 2545 	mvn.w	r5, r5, lsl #9
 8000ada:	f8c9 5030 	str.w	r5, [r9, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8000ade:	f8d9 6050 	ldr.w	r6, [r9, #80]	; 0x50
 8000ae2:	ea6f 2656 	mvn.w	r6, r6, lsr #9
 8000ae6:	ea6f 2646 	mvn.w	r6, r6, lsl #9
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000aea:	2500      	movs	r5, #0
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8000aec:	f8c9 6050 	str.w	r6, [r9, #80]	; 0x50
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8000af0:	f04f 36ff 	mov.w	r6, #4294967295
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000af4:	6055      	str	r5, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000af6:	6096      	str	r6, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000af8:	60d7      	str	r7, [r2, #12]
  gpiop->ODR     = config->odr;
 8000afa:	f64f 67ff 	movw	r7, #65279	; 0xfeff
 8000afe:	6157      	str	r7, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000b00:	f8c2 b020 	str.w	fp, [r2, #32]
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000b04:	f1ab 6bab 	sub.w	fp, fp, #89653248	; 0x5580000
 8000b08:	f5ab 2bd1 	sub.w	fp, fp, #428032	; 0x68800
  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8000b0c:	4fa4      	ldr	r7, [pc, #656]	; (8000da0 <main+0x350>)
 8000b0e:	6257      	str	r7, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000b10:	f5ab 7b62 	sub.w	fp, fp, #904	; 0x388
 8000b14:	f8c2 b000 	str.w	fp, [r2]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000b18:	f44f 7740 	mov.w	r7, #768	; 0x300
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000b1c:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8000ddc <main+0x38c>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000b20:	f8ca 7004 	str.w	r7, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000b24:	f8ca 6008 	str.w	r6, [sl, #8]
  gpiop->PUPDR   = config->pupdr;
 8000b28:	f8ca b00c 	str.w	fp, [sl, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000b2c:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8000de0 <main+0x390>
  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8000b30:	4a9c      	ldr	r2, [pc, #624]	; (8000da4 <main+0x354>)
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000b32:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 8000b36:	f8ca 7014 	str.w	r7, [sl, #20]
  gpiop->AFRL    = config->afrl;
 8000b3a:	f8ca 5020 	str.w	r5, [sl, #32]
  gpiop->AFRH    = config->afrh;
 8000b3e:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000b42:	f8ca b000 	str.w	fp, [sl]

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000b46:	f1ab 5bcb 	sub.w	fp, fp, #425721856	; 0x19600000
 8000b4a:	f46f 6a4d 	mvn.w	sl, #3280	; 0xcd0
 8000b4e:	f5ab 2b6a 	sub.w	fp, fp, #958464	; 0xea000

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000b52:	2701      	movs	r7, #1
  gpiop->ODR     = config->odr;
 8000b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 8000b58:	44d3      	add	fp, sl
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000b5a:	f8ce 5004 	str.w	r5, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8000b5e:	f8df a284 	ldr.w	sl, [pc, #644]	; 8000de4 <main+0x394>
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8000b62:	f8ce 6008 	str.w	r6, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8000b66:	f8ce 700c 	str.w	r7, [lr, #12]
  gpiop->ODR     = config->odr;
 8000b6a:	f8ce 2014 	str.w	r2, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8000b6e:	f8ce b020 	str.w	fp, [lr, #32]
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000b72:	f8df b274 	ldr.w	fp, [pc, #628]	; 8000de8 <main+0x398>
  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8000b76:	f8ce a024 	str.w	sl, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000b7a:	f8ce b000 	str.w	fp, [lr]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000b7e:	f8df a26c 	ldr.w	sl, [pc, #620]	; 8000dec <main+0x39c>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000b82:	f8c8 5004 	str.w	r5, [r8, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000b86:	f44f 6b40 	mov.w	fp, #3072	; 0xc00
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8000b8a:	f8c8 6008 	str.w	r6, [r8, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000b8e:	f04f 0e20 	mov.w	lr, #32

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000b92:	f8c8 a00c 	str.w	sl, [r8, #12]
  gpiop->ODR     = config->odr;
 8000b96:	f8c8 2014 	str.w	r2, [r8, #20]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000b9a:	f04f 3a55 	mov.w	sl, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000b9e:	f8c8 b020 	str.w	fp, [r8, #32]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000ba2:	f8df b24c 	ldr.w	fp, [pc, #588]	; 8000df0 <main+0x3a0>
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8000ba6:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000baa:	f8c8 e000 	str.w	lr, [r8]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000bae:	f8cc 5004 	str.w	r5, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000bb2:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8000df4 <main+0x3a4>
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8000bb6:	f8cc 6008 	str.w	r6, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8000bba:	f8cc a00c 	str.w	sl, [ip, #12]
  gpiop->ODR     = config->odr;
 8000bbe:	f8cc 2014 	str.w	r2, [ip, #20]
  gpiop->AFRL    = config->afrl;
 8000bc2:	f8cc 5020 	str.w	r5, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8000bc6:	f8cc 5024 	str.w	r5, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000bca:	f8cc 5000 	str.w	r5, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000bce:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8000bd0:	f8df c224 	ldr.w	ip, [pc, #548]	; 8000df8 <main+0x3a8>
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8000bd4:	60a6      	str	r6, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8000bd6:	f8c4 b00c 	str.w	fp, [r4, #12]
  gpiop->ODR     = config->odr;
 8000bda:	6162      	str	r2, [r4, #20]
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000bdc:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8000dfc <main+0x3ac>

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000be0:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8000be2:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000be4:	6025      	str	r5, [r4, #0]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000be6:	4c70      	ldr	r4, [pc, #448]	; (8000da8 <main+0x358>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000be8:	6045      	str	r5, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000bea:	6086      	str	r6, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8000bec:	f8c0 800c 	str.w	r8, [r0, #12]
  gpiop->ODR     = config->odr;
 8000bf0:	6142      	str	r2, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8000bf2:	6205      	str	r5, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8000bf4:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000bf8:	f8c0 b000 	str.w	fp, [r0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000bfc:	604d      	str	r5, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000bfe:	608e      	str	r6, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 8000c00:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 8000c02:	614a      	str	r2, [r1, #20]
  gpiop->AFRL    = config->afrl;
 8000c04:	620d      	str	r5, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8000c06:	624d      	str	r5, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000c08:	600d      	str	r5, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000c0a:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000c0c:	609e      	str	r6, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 8000c0e:	f8c3 a00c 	str.w	sl, [r3, #12]
  gpiop->ODR     = config->odr;
 8000c12:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 8000c14:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 8000c16:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000c18:	601d      	str	r5, [r3, #0]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8000c1a:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8000c1e:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8000e00 <main+0x3b0>
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000c22:	4c62      	ldr	r4, [pc, #392]	; (8000dac <main+0x35c>)
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000c24:	4a62      	ldr	r2, [pc, #392]	; (8000db0 <main+0x360>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000c26:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8000e04 <main+0x3b4>
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8000c2a:	4862      	ldr	r0, [pc, #392]	; (8000db4 <main+0x364>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c2c:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8000e08 <main+0x3b8>
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c30:	4961      	ldr	r1, [pc, #388]	; (8000db8 <main+0x368>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8000c32:	433b      	orrs	r3, r7
 8000c34:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8000c38:	f8da 9008 	ldr.w	r9, [sl, #8]
  tqp->p_prev = (thread_t *)tqp;
 8000c3c:	6064      	str	r4, [r4, #4]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000c3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8000c42:	ea49 0907 	orr.w	r9, r9, r7
 8000c46:	f8ca 9008 	str.w	r9, [sl, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000c4a:	f242 0bcf 	movw	fp, #8399	; 0x20cf
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000c4e:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000c52:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8000c56:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000c5a:	62de      	str	r6, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8000c5c:	619d      	str	r5, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8000c5e:	635d      	str	r5, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8000c60:	60dd      	str	r5, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8000c62:	605d      	str	r5, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8000c64:	615f      	str	r7, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8000c66:	601f      	str	r7, [r3, #0]
 8000c68:	f888 a31c 	strb.w	sl, [r8, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000c6c:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000c70:	f8c8 9000 	str.w	r9, [r8]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000c74:	6095      	str	r5, [r2, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c76:	f8d2 800c 	ldr.w	r8, [r2, #12]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8000c7a:	60a5      	str	r5, [r4, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	ea08 0303 	and.w	r3, r8, r3
  reg_value  =  (reg_value                                 |
 8000c84:	4318      	orrs	r0, r3
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000c86:	60d0      	str	r0, [r2, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000c88:	f8dc 300c 	ldr.w	r3, [ip, #12]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8000c8c:	6124      	str	r4, [r4, #16]
 8000c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c92:	f8cc 300c 	str.w	r3, [ip, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000c96:	680b      	ldr	r3, [r1, #0]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 8000c98:	6164      	str	r4, [r4, #20]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000c9a:	f104 0c1c 	add.w	ip, r4, #28
 8000c9e:	433b      	orrs	r3, r7

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000ca0:	f04f 0800 	mov.w	r8, #0
 8000ca4:	f04f 0900 	mov.w	r9, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000ca8:	f04f 0a10 	mov.w	sl, #16
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000cac:	4668      	mov	r0, sp
 8000cae:	600b      	str	r3, [r1, #0]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8000cb0:	6266      	str	r6, [r4, #36]	; 0x24
 8000cb2:	f882 a01f 	strb.w	sl, [r2, #31]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8000cb6:	f8c4 c01c 	str.w	ip, [r4, #28]
 8000cba:	f882 e022 	strb.w	lr, [r2, #34]	; 0x22
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000cbe:	f8c4 c020 	str.w	ip, [r4, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000cc2:	6024      	str	r4, [r4, #0]
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8000cc4:	62a5      	str	r5, [r4, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000cc6:	f8c4 54a0 	str.w	r5, [r4, #1184]	; 0x4a0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000cca:	9600      	str	r6, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
 8000ccc:	9501      	str	r5, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8000cce:	9502      	str	r5, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8000cd0:	9503      	str	r5, [sp, #12]
  tmp->cumulative = (rttime_t)0;
 8000cd2:	e9cd 8904 	strd	r8, r9, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8000cd6:	f7ff fb63 	bl	80003a0 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8000cda:	4668      	mov	r0, sp
 8000cdc:	f7ff fb38 	bl	8000350 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8000ce0:	9a02      	ldr	r2, [sp, #8]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8000ce2:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <main+0x36c>)
 8000ce4:	f8c4 24a0 	str.w	r2, [r4, #1184]	; 0x4a0

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000ce8:	f504 6b98 	add.w	fp, r4, #1216	; 0x4c0
 8000cec:	f504 629b 	add.w	r2, r4, #1240	; 0x4d8
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000cf0:	4833      	ldr	r0, [pc, #204]	; (8000dc0 <main+0x370>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000cf2:	4934      	ldr	r1, [pc, #208]	; (8000dc4 <main+0x374>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000cf4:	f8df a114 	ldr.w	sl, [pc, #276]	; 8000e0c <main+0x3bc>
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000cf8:	f8df c114 	ldr.w	ip, [pc, #276]	; 8000e10 <main+0x3c0>
 8000cfc:	f8df e114 	ldr.w	lr, [pc, #276]	; 8000e14 <main+0x3c4>
 8000d00:	f8c3 e000 	str.w	lr, [r3]
 8000d04:	e9cb 8900 	strd	r8, r9, [fp]
 8000d08:	e9c2 8900 	strd	r8, r9, [r2]
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 8000d0c:	f104 0b40 	add.w	fp, r4, #64	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000d10:	2202      	movs	r2, #2
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000d12:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000d16:	f021 0107 	bic.w	r1, r1, #7
 8000d1a:	f8c4 b03c 	str.w	fp, [r4, #60]	; 0x3c
 8000d1e:	f884 2460 	strb.w	r2, [r4, #1120]	; 0x460
 8000d22:	f103 0b10 	add.w	fp, r3, #16
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
 8000d26:	2240      	movs	r2, #64	; 0x40
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000d28:	f8ca 0000 	str.w	r0, [sl]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000d2c:	f8cc 1000 	str.w	r1, [ip]
 8000d30:	63a2      	str	r2, [r4, #56]	; 0x38
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000d32:	f8c4 2448 	str.w	r2, [r4, #1096]	; 0x448
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000d36:	f8c4 2480 	str.w	r2, [r4, #1152]	; 0x480
 *
 * @init
 */
void _stats_init(void) {

  ch.kernel_stats.n_irq = (ucnt_t)0;
 8000d3a:	f8c4 54a8 	str.w	r5, [r4, #1192]	; 0x4a8
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 8000d3e:	f8c4 54ac 	str.w	r5, [r4, #1196]	; 0x4ac
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000d42:	f8c4 64b0 	str.w	r6, [r4, #1200]	; 0x4b0
  tmp->worst      = (rtcnt_t)0;
 8000d46:	f8c4 54b4 	str.w	r5, [r4, #1204]	; 0x4b4
  tmp->last       = (rtcnt_t)0;
 8000d4a:	f8c4 54b8 	str.w	r5, [r4, #1208]	; 0x4b8
  tmp->n          = (ucnt_t)0;
 8000d4e:	f8c4 54bc 	str.w	r5, [r4, #1212]	; 0x4bc
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000d52:	f8c4 64c8 	str.w	r6, [r4, #1224]	; 0x4c8
  tmp->worst      = (rtcnt_t)0;
 8000d56:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
  tmp->last       = (rtcnt_t)0;
 8000d5a:	f8c4 54d0 	str.w	r5, [r4, #1232]	; 0x4d0
  tmp->n          = (ucnt_t)0;
 8000d5e:	f8c4 54d4 	str.w	r5, [r4, #1236]	; 0x4d4
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000d62:	f884 5461 	strb.w	r5, [r4, #1121]	; 0x461
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000d66:	f884 7462 	strb.w	r7, [r4, #1122]	; 0x462
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000d6a:	f8c4 4450 	str.w	r4, [r4, #1104]	; 0x450
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000d6e:	f8c4 547c 	str.w	r5, [r4, #1148]	; 0x47c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000d72:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000d76:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
  default_heap.h_free.h.u.next = NULL;
 8000d7a:	609d      	str	r5, [r3, #8]
 8000d7c:	e04c      	b.n	8000e18 <main+0x3c8>
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40007000 	.word	0x40007000
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	20081500 	.word	0x20081500
 8000d90:	40021400 	.word	0x40021400
 8000d94:	40021800 	.word	0x40021800
 8000d98:	40021c00 	.word	0x40021c00
 8000d9c:	40022000 	.word	0x40022000
 8000da0:	000aaa00 	.word	0x000aaa00
 8000da4:	cc0c0544 	.word	0xcc0c0544
 8000da8:	55555550 	.word	0x55555550
 8000dac:	20000808 	.word	0x20000808
 8000db0:	e000ed00 	.word	0xe000ed00
 8000db4:	05fa0300 	.word	0x05fa0300
 8000db8:	e0001000 	.word	0xe0001000
 8000dbc:	20000de8 	.word	0x20000de8
 8000dc0:	20000e0f 	.word	0x20000e0f
 8000dc4:	20020000 	.word	0x20020000
 8000dc8:	b0000bb0 	.word	0xb0000bb0
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40020c00 	.word	0x40020c00
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	08405400 	.word	0x08405400
 8000de0:	a22a0281 	.word	0xa22a0281
 8000de4:	000ccccc 	.word	0x000ccccc
 8000de8:	06aaaaa8 	.word	0x06aaaaa8
 8000dec:	55555545 	.word	0x55555545
 8000df0:	55155555 	.word	0x55155555
 8000df4:	41055555 	.word	0x41055555
 8000df8:	0bb0b000 	.word	0x0bb0b000
 8000dfc:	28900000 	.word	0x28900000
 8000e00:	e0042000 	.word	0xe0042000
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000edf0 	.word	0xe000edf0
 8000e0c:	20000de0 	.word	0x20000de0
 8000e10:	20000800 	.word	0x20000800
 8000e14:	080010b1 	.word	0x080010b1
  default_heap.h_free.h.size = 0;
 8000e18:	60dd      	str	r5, [r3, #12]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000e1a:	619d      	str	r5, [r3, #24]
 8000e1c:	f8c3 b010 	str.w	fp, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8000e20:	f8c3 b014 	str.w	fp, [r3, #20]
  REG_INSERT(tp);
 8000e24:	6963      	ldr	r3, [r4, #20]
 8000e26:	f8c4 3454 	str.w	r3, [r4, #1108]	; 0x454
 8000e2a:	f504 6a88 	add.w	sl, r4, #1088	; 0x440
 8000e2e:	f8c3 a010 	str.w	sl, [r3, #16]
  tmp->cumulative = (rttime_t)0;
 8000e32:	f504 6293 	add.w	r2, r4, #1176	; 0x498
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000e36:	f204 436c 	addw	r3, r4, #1132	; 0x46c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000e3a:	f504 6e8d 	add.w	lr, r4, #1128	; 0x468
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 8000e3e:	f504 6194 	add.w	r1, r4, #1184	; 0x4a0
 8000e42:	e9c2 8900 	strd	r8, r9, [r2]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000e46:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
  tqp->p_prev = (thread_t *)tqp;
 8000e4a:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
  chTMStartMeasurementX(&tp->p_stats);
 8000e4e:	f504 6091 	add.w	r0, r4, #1160	; 0x488
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000e52:	f8c4 6488 	str.w	r6, [r4, #1160]	; 0x488
  tmp->worst      = (rtcnt_t)0;
 8000e56:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
  tmp->last       = (rtcnt_t)0;
 8000e5a:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
  tmp->n          = (ucnt_t)0;
 8000e5e:	f8c4 5494 	str.w	r5, [r4, #1172]	; 0x494
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000e62:	f8c4 e468 	str.w	lr, [r4, #1128]	; 0x468
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 8000e66:	f8c4 145c 	str.w	r1, [r4, #1116]	; 0x45c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000e6a:	f8c4 a014 	str.w	sl, [r4, #20]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
  chTMStartMeasurementX(&tp->p_stats);
 8000e6e:	f7ff fa97 	bl	80003a0 <chTMStartMeasurementX>
 *
 * @notapi
 */
void _dbg_check_enable(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000e72:	6b23      	ldr	r3, [r4, #48]	; 0x30

  currp->p_state = CH_STATE_CURRENT;
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 8000e74:	4a82      	ldr	r2, [pc, #520]	; (8001080 <main+0x630>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000e76:	f8c4 a018 	str.w	sl, [r4, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000e7a:	f884 7460 	strb.w	r7, [r4, #1120]	; 0x460
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 8000e7e:	f8c4 245c 	str.w	r2, [r4, #1116]	; 0x45c
 8000e82:	b90b      	cbnz	r3, 8000e88 <main+0x438>
 8000e84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e86:	b11b      	cbz	r3, 8000e90 <main+0x440>
 8000e88:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000e8a:	4b7e      	ldr	r3, [pc, #504]	; (8001084 <main+0x634>)
 8000e8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e8e:	e7fe      	b.n	8000e8e <main+0x43e>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000e90:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000e94:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8000e96:	69a3      	ldr	r3, [r4, #24]
 8000e98:	4a7b      	ldr	r2, [pc, #492]	; (8001088 <main+0x638>)
 8000e9a:	619a      	str	r2, [r3, #24]
 8000e9c:	f504 699c 	add.w	r9, r4, #1248	; 0x4e0
 8000ea0:	464b      	mov	r3, r9
 8000ea2:	f504 68a8 	add.w	r8, r4, #1344	; 0x540
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
    *startp++ = v;
 8000ea6:	22ff      	movs	r2, #255	; 0xff
 8000ea8:	f803 2b01 	strb.w	r2, [r3], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8000eac:	4543      	cmp	r3, r8
 8000eae:	d3fb      	bcc.n	8000ea8 <main+0x458>
 8000eb0:	4b76      	ldr	r3, [pc, #472]	; (800108c <main+0x63c>)
    *startp++ = v;
 8000eb2:	2155      	movs	r1, #85	; 0x55
 8000eb4:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8000eb8:	f803 1b01 	strb.w	r1, [r3], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	4d74      	ldr	r5, [pc, #464]	; (8001090 <main+0x640>)
 8000ec0:	d3fa      	bcc.n	8000eb8 <main+0x468>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8000ec8:	f7ff fd5a 	bl	8000980 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000ecc:	f7ff fdb0 	bl	8000a30 <_dbg_check_lock>
                       tprio_t prio, tfunc_t pf, void *arg) {
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;

  chDbgCheckClassI();
 8000ed0:	f7ff fa9e 	bl	8000410 <chDbgCheckClassI>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000ed4:	696b      	ldr	r3, [r5, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000ed6:	486f      	ldr	r0, [pc, #444]	; (8001094 <main+0x644>)
 8000ed8:	496f      	ldr	r1, [pc, #444]	; (8001098 <main+0x648>)
 8000eda:	f8c5 05b4 	str.w	r0, [r5, #1460]	; 0x5b4
 8000ede:	2600      	movs	r6, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000ee0:	2701      	movs	r7, #1

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000ee2:	f205 5eb4 	addw	lr, r5, #1460	; 0x5b4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000ee6:	2202      	movs	r2, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000ee8:	f8c5 e4ec 	str.w	lr, [r5, #1260]	; 0x4ec
 8000eec:	f8c5 15d4 	str.w	r1, [r5, #1492]	; 0x5d4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000ef0:	f885 2500 	strb.w	r2, [r5, #1280]	; 0x500
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000ef4:	f205 510c 	addw	r1, r5, #1292	; 0x50c
  tmp->cumulative = (rttime_t)0;
 8000ef8:	2200      	movs	r2, #0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000efa:	f8c5 34f4 	str.w	r3, [r5, #1268]	; 0x4f4
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000efe:	f04f 3cff 	mov.w	ip, #4294967295
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000f02:	f505 6ea7 	add.w	lr, r5, #1336	; 0x538
 8000f06:	f8c5 54f0 	str.w	r5, [r5, #1264]	; 0x4f0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000f0a:	f8c5 65b8 	str.w	r6, [r5, #1464]	; 0x5b8
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000f0e:	f885 6501 	strb.w	r6, [r5, #1281]	; 0x501
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000f12:	f8c5 651c 	str.w	r6, [r5, #1308]	; 0x51c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000f16:	f8c5 6518 	str.w	r6, [r5, #1304]	; 0x518
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000f1a:	f8c5 64f8 	str.w	r6, [r5, #1272]	; 0x4f8
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000f1e:	f8c5 74e8 	str.w	r7, [r5, #1256]	; 0x4e8
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000f22:	f8c5 7520 	str.w	r7, [r5, #1312]	; 0x520
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000f26:	f885 7502 	strb.w	r7, [r5, #1282]	; 0x502
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000f2a:	f505 6aa1 	add.w	sl, r5, #1288	; 0x508
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000f2e:	f8c3 9010 	str.w	r9, [r3, #16]
 8000f32:	2300      	movs	r3, #0
 8000f34:	e9ce 2300 	strd	r2, r3, [lr]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
  chTMStartMeasurementX(&tp->p_stats);
 8000f38:	f505 60a5 	add.w	r0, r5, #1320	; 0x528
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 8000f3c:	f8c5 84fc 	str.w	r8, [r5, #1276]	; 0x4fc
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000f40:	f8c5 c528 	str.w	ip, [r5, #1320]	; 0x528
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000f44:	f8c5 150c 	str.w	r1, [r5, #1292]	; 0x50c
  tqp->p_prev = (thread_t *)tqp;
 8000f48:	f8c5 1510 	str.w	r1, [r5, #1296]	; 0x510
  tmp->worst      = (rtcnt_t)0;
 8000f4c:	f8c5 652c 	str.w	r6, [r5, #1324]	; 0x52c
  tmp->last       = (rtcnt_t)0;
 8000f50:	f8c5 6530 	str.w	r6, [r5, #1328]	; 0x530
  tmp->n          = (ucnt_t)0;
 8000f54:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000f58:	f8c5 a508 	str.w	sl, [r5, #1288]	; 0x508
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000f5c:	f8c5 9014 	str.w	r9, [r5, #20]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
  chTMStartMeasurementX(&tp->p_stats);
 8000f60:	f7ff fa1e 	bl	80003a0 <chTMStartMeasurementX>
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {

  chDbgCheckClassS();
 8000f64:	f7ff fa44 	bl	80003f0 <chDbgCheckClassS>

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000f68:	69a8      	ldr	r0, [r5, #24]
 8000f6a:	f8d5 24e8 	ldr.w	r2, [r5, #1256]	; 0x4e8
 8000f6e:	6883      	ldr	r3, [r0, #8]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8000f70:	f8c5 6504 	str.w	r6, [r5, #1284]	; 0x504

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000f74:	429a      	cmp	r2, r3
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000f76:	f505 689c 	add.w	r8, r5, #1248	; 0x4e0
 8000f7a:	d971      	bls.n	8001060 <main+0x610>
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 8000f7c:	f7ff fa58 	bl	8000430 <chSchReadyI>
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8000f80:	f885 7500 	strb.w	r7, [r5, #1280]	; 0x500
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 8000f84:	4606      	mov	r6, r0
    setcurrp(ntp);
 8000f86:	f8c5 8018 	str.w	r8, [r5, #24]
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000f8a:	f7ff fa11 	bl	80003b0 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000f8e:	f8d5 34ac 	ldr.w	r3, [r5, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000f92:	f106 0048 	add.w	r0, r6, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000f96:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000f98:	f505 61a5 	add.w	r1, r5, #1320	; 0x528
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000f9c:	f8c5 34ac 	str.w	r3, [r5, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000fa0:	f7ff f9b6 	bl	8000310 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000fa4:	f3ef 8309 	mrs	r3, PSP
 8000fa8:	69f2      	ldr	r2, [r6, #28]
 8000faa:	3b24      	subs	r3, #36	; 0x24
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d85f      	bhi.n	8001070 <main+0x620>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	f7ff f964 	bl	8000280 <_port_switch>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000fb8:	f7ff fd2a 	bl	8000a10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000fbc:	f7ff fcd8 	bl	8000970 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000fc0:	6822      	ldr	r2, [r4, #0]
 8000fc2:	4b33      	ldr	r3, [pc, #204]	; (8001090 <main+0x640>)
 8000fc4:	42a2      	cmp	r2, r4
 8000fc6:	d004      	beq.n	8000fd2 <main+0x582>
 8000fc8:	6999      	ldr	r1, [r3, #24]
 8000fca:	6892      	ldr	r2, [r2, #8]
 8000fcc:	6889      	ldr	r1, [r1, #8]
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d34a      	bcc.n	8001068 <main+0x618>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f383 8811 	msr	BASEPRI, r3
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8000fd8:	4b30      	ldr	r3, [pc, #192]	; (800109c <main+0x64c>)

  /*
   * Normal main() thread activity, the LED on the PCB blinks on and off at a defined rate
   */
  while (true) {
    palSetPad(GPIOC, GPIOC_LED);
 8000fda:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80010a8 <main+0x658>
 8000fde:	4f2c      	ldr	r7, [pc, #176]	; (8001090 <main+0x640>)
 8000fe0:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
 8000fe4:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8000fe8:	46b1      	mov	r9, r6
 8000fea:	2520      	movs	r5, #32
 8000fec:	f8a8 9018 	strh.w	r9, [r8, #24]
 8000ff0:	f385 8811 	msr	BASEPRI, r5
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8000ff4:	f7ff fcc4 	bl	8000980 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000ff8:	f7ff fd1a 	bl	8000a30 <_dbg_check_lock>
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 8000ffc:	f7ff fbb8 	bl	8000770 <chSchGoSleepTimeoutS.constprop.4>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001000:	f7ff fd06 	bl	8000a10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001004:	f7ff fcb4 	bl	8000970 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	4921      	ldr	r1, [pc, #132]	; (8001090 <main+0x640>)
 800100c:	42a3      	cmp	r3, r4
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	d004      	beq.n	800101e <main+0x5ce>
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	6892      	ldr	r2, [r2, #8]
 800101a:	429a      	cmp	r2, r3
 800101c:	d32c      	bcc.n	8001078 <main+0x628>
 800101e:	f380 8811 	msr	BASEPRI, r0
    chThdSleepMilliseconds(1000);
    palClearPad(GPIOC, GPIOC_LED);
 8001022:	f8a8 601a 	strh.w	r6, [r8, #26]
 8001026:	f385 8811 	msr	BASEPRI, r5
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 800102a:	f7ff fca9 	bl	8000980 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800102e:	f7ff fcff 	bl	8000a30 <_dbg_check_lock>
 8001032:	f7ff fb9d 	bl	8000770 <chSchGoSleepTimeoutS.constprop.4>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001036:	f7ff fceb 	bl	8000a10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 800103a:	f7ff fc99 	bl	8000970 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	4913      	ldr	r1, [pc, #76]	; (8001090 <main+0x640>)
 8001042:	42a3      	cmp	r3, r4
 8001044:	d004      	beq.n	8001050 <main+0x600>
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	6892      	ldr	r2, [r2, #8]
 800104c:	429a      	cmp	r2, r3
 800104e:	d303      	bcc.n	8001058 <main+0x608>
 8001050:	2300      	movs	r3, #0
 8001052:	f383 8811 	msr	BASEPRI, r3
 8001056:	e7c9      	b.n	8000fec <main+0x59c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <main+0x650>)
 800105c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800105e:	e7fe      	b.n	800105e <main+0x60e>
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
 8001060:	4640      	mov	r0, r8
 8001062:	f7ff f9e5 	bl	8000430 <chSchReadyI>
 8001066:	e7a7      	b.n	8000fb8 <main+0x568>
 8001068:	b672      	cpsid	i
 800106a:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <main+0x650>)
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
 800106e:	e7fe      	b.n	800106e <main+0x61e>
 8001070:	b672      	cpsid	i
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <main+0x654>)
 8001074:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001076:	e7fe      	b.n	8001076 <main+0x626>
 8001078:	b672      	cpsid	i
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <main+0x650>)
 800107c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800107e:	e7fe      	b.n	800107e <main+0x62e>
 8001080:	20000400 	.word	0x20000400
 8001084:	08001230 	.word	0x08001230
 8001088:	080011b0 	.word	0x080011b0
 800108c:	20000d48 	.word	0x20000d48
 8001090:	20000808 	.word	0x20000808
 8001094:	080002c1 	.word	0x080002c1
 8001098:	08000291 	.word	0x08000291
 800109c:	08001238 	.word	0x08001238
 80010a0:	08001280 	.word	0x08001280
 80010a4:	08001210 	.word	0x08001210
 80010a8:	40020800 	.word	0x40020800
 80010ac:	00000000 	.word	0x00000000

080010b0 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 80010b0:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80010b2:	2320      	movs	r3, #32
 80010b4:	4604      	mov	r4, r0
 80010b6:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 80010ba:	f7ff fc61 	bl	8000980 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80010be:	f7ff fcb7 	bl	8000a30 <_dbg_check_lock>
 * @iclass
 */
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();
 80010c2:	f7ff f9a5 	bl	8000410 <chDbgCheckClassI>

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80010c6:	4812      	ldr	r0, [pc, #72]	; (8001110 <chCoreAlloc+0x60>)
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <chCoreAlloc+0x64>)
 80010ca:	6802      	ldr	r2, [r0, #0]
 80010cc:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 80010ce:	1de3      	adds	r3, r4, #7
 80010d0:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80010d4:	1a89      	subs	r1, r1, r2
 80010d6:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 80010d8:	bf9d      	ittte	ls
 80010da:	189b      	addls	r3, r3, r2
 80010dc:	6003      	strls	r3, [r0, #0]

  return p;
 80010de:	4614      	movls	r4, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 80010e0:	2400      	movhi	r4, #0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80010e2:	f7ff fc95 	bl	8000a10 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80010e6:	f7ff fc43 	bl	8000970 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <chCoreAlloc+0x68>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d004      	beq.n	80010fc <chCoreAlloc+0x4c>
 80010f2:	6999      	ldr	r1, [r3, #24]
 80010f4:	6892      	ldr	r2, [r2, #8]
 80010f6:	6889      	ldr	r1, [r1, #8]
 80010f8:	4291      	cmp	r1, r2
 80010fa:	d304      	bcc.n	8001106 <chCoreAlloc+0x56>
 80010fc:	2300      	movs	r3, #0
 80010fe:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8001102:	4620      	mov	r0, r4
 8001104:	bd10      	pop	{r4, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001106:	b672      	cpsid	i
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <chCoreAlloc+0x6c>)
 800110a:	62da      	str	r2, [r3, #44]	; 0x2c
 800110c:	e7fe      	b.n	800110c <chCoreAlloc+0x5c>
 800110e:	bf00      	nop
 8001110:	20000de0 	.word	0x20000de0
 8001114:	20000800 	.word	0x20000800
 8001118:	20000808 	.word	0x20000808
 800111c:	080011d0 	.word	0x080011d0

08001120 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8001120:	b508      	push	{r3, lr}
 8001122:	4606      	mov	r6, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001124:	2320      	movs	r3, #32
 8001126:	f383 8811 	msr	BASEPRI, r3
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 800112a:	4d11      	ldr	r5, [pc, #68]	; (8001170 <chThdExit+0x50>)
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 800112c:	f7ff fc28 	bl	8000980 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001130:	f7ff fc7e 	bl	8000a30 <_dbg_check_lock>
 8001134:	69ac      	ldr	r4, [r5, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001136:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 8001138:	6266      	str	r6, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800113a:	f104 0628 	add.w	r6, r4, #40	; 0x28
 800113e:	42b0      	cmp	r0, r6
 8001140:	d006      	beq.n	8001150 <chThdExit+0x30>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001142:	6802      	ldr	r2, [r0, #0]
 8001144:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001146:	f7ff f973 	bl	8000430 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800114a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800114c:	42b0      	cmp	r0, r6
 800114e:	d1f8      	bne.n	8001142 <chThdExit+0x22>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 8001150:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001154:	079b      	lsls	r3, r3, #30
 8001156:	d104      	bne.n	8001162 <chThdExit+0x42>
    REG_REMOVE(tp);
 8001158:	6963      	ldr	r3, [r4, #20]
 800115a:	6922      	ldr	r2, [r4, #16]
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	6922      	ldr	r2, [r4, #16]
 8001160:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8001162:	200f      	movs	r0, #15
 8001164:	f7ff facc 	bl	8000700 <chSchGoSleepS>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
 800116a:	4b02      	ldr	r3, [pc, #8]	; (8001174 <chThdExit+0x54>)
 800116c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800116e:	e7fe      	b.n	800116e <chThdExit+0x4e>
 8001170:	20000808 	.word	0x20000808
 8001174:	08001260 	.word	0x08001260
	...

08001180 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001180:	e7fe      	b.n	8001180 <__default_exit>
 8001182:	bf00      	nop
	...

08001190 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
	...

080011a0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
	...

080011b0 <ch_debug>:
 80011b0:	616d 6e69 1600 1803 0404 0860 100c 1814     main......`.....
 80011c0:	201c 2221 0000 0000 0000 0000 0000 0000     . !"............

080011d0 <__func__.5877.lto_priv.13>:
 80011d0:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....
 80011e0:	5653 3123 0031 0000 5653 3123 0030 0000     SV#11...SV#10...
 80011f0:	5653 3723 0000 0000 5653 3623 0000 0000     SV#7....SV#6....
 8001200:	5653 3823 0000 0000 5653 3923 0000 0000     SV#8....SV#9....
 8001210:	7473 6361 206b 766f 7265 6c66 776f 0000     stack overflow..
 8001220:	5653 3523 0000 0000 5653 3423 0000 0000     SV#5....SV#4....
 8001230:	5653 3323 0000 0000 6469 656c 0000 0000     SV#3....idle....

08001240 <__func__.5963>:
 8001240:	6863 5456 6f44 6954 6b63 0049 0000 0000     chVTDoTickI.....

08001250 <__func__.6577>:
 8001250:	6863 6353 5268 6165 7964 0049 0000 0000     chSchReadyI.....

08001260 <__func__.6633>:
 8001260:	6863 6854 4564 6978 5374 0000 0000 0000     chThdExitS......

08001270 <__func__.6917>:
 8001270:	7473 7453 7261 4174 616c 6d72 0000 0000     stStartAlarm....

08001280 <__func__.5877.lto_priv.12>:
 8001280:	6863 7953 5573 6c6e 636f 006b 0000 0000     chSysUnlock.....

08001290 <__func__.6924>:
 8001290:	7473 6553 4174 616c 6d72 0000                    stSetAlarm.
