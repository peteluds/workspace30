
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4821      	ldr	r0, [pc, #132]	; (8000248 <endfiniloop+0x4>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	2002      	movs	r0, #2
 80001ca:	f380 8814 	msr	CONTROL, r0
 80001ce:	f3bf 8f6f 	isb	sy
 80001d2:	f001 fbe5 	bl	80019a0 <__core_init>
 80001d6:	f000 f9ab 	bl	8000530 <__early_init>
 80001da:	481c      	ldr	r0, [pc, #112]	; (800024c <endfiniloop+0x8>)
 80001dc:	491c      	ldr	r1, [pc, #112]	; (8000250 <endfiniloop+0xc>)
 80001de:	4a1d      	ldr	r2, [pc, #116]	; (8000254 <endfiniloop+0x10>)

080001e0 <msloop>:
 80001e0:	4291      	cmp	r1, r2
 80001e2:	bf3c      	itt	cc
 80001e4:	f841 0b04 	strcc.w	r0, [r1], #4
 80001e8:	e7fa      	bcc.n	80001e0 <msloop>
 80001ea:	491b      	ldr	r1, [pc, #108]	; (8000258 <endfiniloop+0x14>)
 80001ec:	4a16      	ldr	r2, [pc, #88]	; (8000248 <endfiniloop+0x4>)

080001ee <psloop>:
 80001ee:	4291      	cmp	r1, r2
 80001f0:	bf3c      	itt	cc
 80001f2:	f841 0b04 	strcc.w	r0, [r1], #4
 80001f6:	e7fa      	bcc.n	80001ee <psloop>
 80001f8:	4918      	ldr	r1, [pc, #96]	; (800025c <endfiniloop+0x18>)
 80001fa:	4a19      	ldr	r2, [pc, #100]	; (8000260 <endfiniloop+0x1c>)
 80001fc:	4b19      	ldr	r3, [pc, #100]	; (8000264 <endfiniloop+0x20>)

080001fe <dloop>:
 80001fe:	429a      	cmp	r2, r3
 8000200:	bf3e      	ittt	cc
 8000202:	f851 0b04 	ldrcc.w	r0, [r1], #4
 8000206:	f842 0b04 	strcc.w	r0, [r2], #4
 800020a:	e7f8      	bcc.n	80001fe <dloop>
 800020c:	2000      	movs	r0, #0
 800020e:	4916      	ldr	r1, [pc, #88]	; (8000268 <endfiniloop+0x24>)
 8000210:	4a16      	ldr	r2, [pc, #88]	; (800026c <endfiniloop+0x28>)

08000212 <bloop>:
 8000212:	4291      	cmp	r1, r2
 8000214:	bf3c      	itt	cc
 8000216:	f841 0b04 	strcc.w	r0, [r1], #4
 800021a:	e7fa      	bcc.n	8000212 <bloop>
 800021c:	f001 fbb8 	bl	8001990 <__late_init>
 8000220:	4c13      	ldr	r4, [pc, #76]	; (8000270 <endfiniloop+0x2c>)
 8000222:	4d14      	ldr	r5, [pc, #80]	; (8000274 <endfiniloop+0x30>)

08000224 <initloop>:
 8000224:	42ac      	cmp	r4, r5
 8000226:	da03      	bge.n	8000230 <endinitloop>
 8000228:	f854 1b04 	ldr.w	r1, [r4], #4
 800022c:	4788      	blx	r1
 800022e:	e7f9      	b.n	8000224 <initloop>

08000230 <endinitloop>:
 8000230:	f000 fa2e 	bl	8000690 <main>
 8000234:	4c10      	ldr	r4, [pc, #64]	; (8000278 <endfiniloop+0x34>)
 8000236:	4d11      	ldr	r5, [pc, #68]	; (800027c <endfiniloop+0x38>)

08000238 <finiloop>:
 8000238:	42ac      	cmp	r4, r5
 800023a:	da03      	bge.n	8000244 <endfiniloop>
 800023c:	f854 1b04 	ldr.w	r1, [r4], #4
 8000240:	4788      	blx	r1
 8000242:	e7f9      	b.n	8000238 <finiloop>

08000244 <endfiniloop>:
 8000244:	f001 bb9c 	b.w	8001980 <__default_exit>
 8000248:	20000800 	.word	0x20000800
 800024c:	55555555 	.word	0x55555555
 8000250:	20000000 	.word	0x20000000
 8000254:	20000400 	.word	0x20000400
 8000258:	20000400 	.word	0x20000400
 800025c:	08002330 	.word	0x08002330
 8000260:	20000800 	.word	0x20000800
 8000264:	200008c0 	.word	0x200008c0
 8000268:	200008c0 	.word	0x200008c0
 800026c:	20000f8c 	.word	0x20000f8c
 8000270:	080001c0 	.word	0x080001c0
 8000274:	080001c0 	.word	0x080001c0
 8000278:	080001c0 	.word	0x080001c0
 800027c:	080001c0 	.word	0x080001c0

08000280 <_port_switch>:
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000284:	f8c1 d00c 	str.w	sp, [r1, #12]
 8000288:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000290 <_port_thread_start>:
 8000290:	f001 fa26 	bl	80016e0 <_dbg_check_unlock>
 8000294:	f000 fec4 	bl	8001020 <_stats_stop_measure_crit_thd>
 8000298:	2300      	movs	r3, #0
 800029a:	f383 8811 	msr	BASEPRI, r3
 800029e:	4628      	mov	r0, r5
 80002a0:	47a0      	blx	r4
 80002a2:	2000      	movs	r0, #0
 80002a4:	f001 fa74 	bl	8001790 <chThdExit>

080002a8 <_port_switch_from_isr>:
 80002a8:	f000 feca 	bl	8001040 <_stats_start_measure_crit_thd>
 80002ac:	f001 fa28 	bl	8001700 <_dbg_check_lock>
 80002b0:	f000 ff2e 	bl	8001110 <chSchDoReschedule>
 80002b4:	f001 fa14 	bl	80016e0 <_dbg_check_unlock>
 80002b8:	f000 feb2 	bl	8001020 <_stats_stop_measure_crit_thd>

080002bc <_port_exit_from_isr>:
 80002bc:	df00      	svc	0
 80002be:	e7fe      	b.n	80002be <_port_exit_from_isr+0x2>

080002c0 <spi_lld_serve_tx_interrupt.lto_priv.30>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80002c0:	f011 0f0c 	tst.w	r1, #12
 80002c4:	d100      	bne.n	80002c8 <spi_lld_serve_tx_interrupt.lto_priv.30+0x8>
 80002c6:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c8:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80002ca:	4b02      	ldr	r3, [pc, #8]	; (80002d4 <spi_lld_serve_tx_interrupt.lto_priv.30+0x14>)
 80002cc:	4a02      	ldr	r2, [pc, #8]	; (80002d8 <spi_lld_serve_tx_interrupt.lto_priv.30+0x18>)
 80002ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80002d0:	e7fe      	b.n	80002d0 <spi_lld_serve_tx_interrupt.lto_priv.30+0x10>
 80002d2:	bf00      	nop
 80002d4:	200008f8 	.word	0x200008f8
 80002d8:	08002090 	.word	0x08002090
 80002dc:	00000000 	.word	0x00000000

080002e0 <spi_lld_serve_rx_interrupt.lto_priv.29>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80002e0:	f011 0f0c 	tst.w	r1, #12
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80002e4:	b538      	push	{r3, r4, r5, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80002e6:	d14b      	bne.n	8000380 <spi_lld_serve_rx_interrupt.lto_priv.29+0xa0>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 80002e8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80002ea:	680b      	ldr	r3, [r1, #0]
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	f022 021f 	bic.w	r2, r2, #31
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	07d4      	lsls	r4, r2, #31
 80002f8:	d4fc      	bmi.n	80002f4 <spi_lld_serve_rx_interrupt.lto_priv.29+0x14>
 80002fa:	7a0d      	ldrb	r5, [r1, #8]
  dmaStreamDisable(spip->dmarx);
 80002fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 80002fe:	684c      	ldr	r4, [r1, #4]
  dmaStreamDisable(spip->dmarx);
 8000300:	6813      	ldr	r3, [r2, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8000302:	213d      	movs	r1, #61	; 0x3d
 8000304:	40a9      	lsls	r1, r5
 8000306:	6021      	str	r1, [r4, #0]
  dmaStreamDisable(spip->dmarx);
 8000308:	6819      	ldr	r1, [r3, #0]
 800030a:	f021 011f 	bic.w	r1, r1, #31
 800030e:	6019      	str	r1, [r3, #0]
 8000310:	6819      	ldr	r1, [r3, #0]
 8000312:	07c9      	lsls	r1, r1, #31
 8000314:	d4fc      	bmi.n	8000310 <spi_lld_serve_rx_interrupt.lto_priv.29+0x30>

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8000316:	6843      	ldr	r3, [r0, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8000318:	6851      	ldr	r1, [r2, #4]
 800031a:	4604      	mov	r4, r0
 800031c:	7a10      	ldrb	r0, [r2, #8]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 800031e:	681a      	ldr	r2, [r3, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8000320:	233d      	movs	r3, #61	; 0x3d
 8000322:	4083      	lsls	r3, r0
 8000324:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8000326:	b342      	cbz	r2, 800037a <spi_lld_serve_rx_interrupt.lto_priv.29+0x9a>
 8000328:	2304      	movs	r3, #4
 800032a:	7023      	strb	r3, [r4, #0]
 800032c:	4620      	mov	r0, r4
 800032e:	4790      	blx	r2
 8000330:	7823      	ldrb	r3, [r4, #0]
 8000332:	2b04      	cmp	r3, #4
 8000334:	d021      	beq.n	800037a <spi_lld_serve_rx_interrupt.lto_priv.29+0x9a>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000336:	2320      	movs	r3, #32
 8000338:	f383 8811 	msr	BASEPRI, r3
/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 800033c:	4813      	ldr	r0, [pc, #76]	; (800038c <spi_lld_serve_rx_interrupt.lto_priv.29+0xac>)
 800033e:	f000 fe77 	bl	8001030 <chTMStartMeasurementX>
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000342:	f001 f975 	bl	8001630 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8000346:	68a3      	ldr	r3, [r4, #8]
 8000348:	b173      	cbz	r3, 8000368 <spi_lld_serve_rx_interrupt.lto_priv.29+0x88>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
 800034a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800034e:	2a03      	cmp	r2, #3
 8000350:	d004      	beq.n	800035c <spi_lld_serve_rx_interrupt.lto_priv.29+0x7c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000352:	b672      	cpsid	i
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <spi_lld_serve_rx_interrupt.lto_priv.29+0xb0>)
 8000356:	4a0f      	ldr	r2, [pc, #60]	; (8000394 <spi_lld_serve_rx_interrupt.lto_priv.29+0xb4>)
 8000358:	62da      	str	r2, [r3, #44]	; 0x2c
 800035a:	e7fe      	b.n	800035a <spi_lld_serve_rx_interrupt.lto_priv.29+0x7a>
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800035c:	2200      	movs	r2, #0
 800035e:	60a2      	str	r2, [r4, #8]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8000360:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 8000362:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000364:	f000 ff34 	bl	80011d0 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000368:	f001 f94a 	bl	8001600 <_dbg_check_unlock_from_isr>
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 800036c:	4807      	ldr	r0, [pc, #28]	; (800038c <spi_lld_serve_rx_interrupt.lto_priv.29+0xac>)
 800036e:	f000 fe2f 	bl	8000fd0 <chTMStopMeasurementX>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000372:	2300      	movs	r3, #0
 8000374:	f383 8811 	msr	BASEPRI, r3
 8000378:	bd38      	pop	{r3, r4, r5, pc}
 800037a:	2302      	movs	r3, #2
 800037c:	7023      	strb	r3, [r4, #0]
 800037e:	e7da      	b.n	8000336 <spi_lld_serve_rx_interrupt.lto_priv.29+0x56>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
 8000382:	4b05      	ldr	r3, [pc, #20]	; (8000398 <spi_lld_serve_rx_interrupt.lto_priv.29+0xb8>)
 8000384:	4a05      	ldr	r2, [pc, #20]	; (800039c <spi_lld_serve_rx_interrupt.lto_priv.29+0xbc>)
 8000386:	62da      	str	r2, [r3, #44]	; 0x2c
 8000388:	e7fe      	b.n	8000388 <spi_lld_serve_rx_interrupt.lto_priv.29+0xa8>
 800038a:	bf00      	nop
 800038c:	20000dc0 	.word	0x20000dc0
 8000390:	200008f8 	.word	0x200008f8
 8000394:	08002050 	.word	0x08002050
 8000398:	200008f8 	.word	0x200008f8
 800039c:	08002090 	.word	0x08002090

080003a0 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector158) {
 80003a0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80003a2:	f000 fde5 	bl	8000f70 <_stats_increase_irq>
 80003a6:	f000 ff53 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80003aa:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <Vector158+0x30>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 80003ac:	4809      	ldr	r0, [pc, #36]	; (80003d4 <Vector158+0x34>)
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80003ae:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 80003b0:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 80003b2:	0d89      	lsrs	r1, r1, #22
 80003b4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22;
 80003b8:	058c      	lsls	r4, r1, #22
 80003ba:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 80003bc:	b10a      	cbz	r2, 80003c2 <Vector158+0x22>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 80003be:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80003c0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80003c2:	f000 ff2d 	bl	8001220 <_dbg_check_leave_isr>
}
 80003c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80003ca:	f000 bda1 	b.w	8000f10 <_port_irq_epilogue>
 80003ce:	bf00      	nop
 80003d0:	40026400 	.word	0x40026400
 80003d4:	20000f04 	.word	0x20000f04
	...

080003e0 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector154) {
 80003e0:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80003e2:	f000 fdc5 	bl	8000f70 <_stats_increase_irq>
 80003e6:	f000 ff33 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <Vector154+0x30>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 80003ec:	4809      	ldr	r0, [pc, #36]	; (8000414 <Vector154+0x34>)
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 80003ee:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 80003f0:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 80003f2:	0c09      	lsrs	r1, r1, #16
 80003f4:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16;
 80003f8:	040c      	lsls	r4, r1, #16
 80003fa:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 80003fc:	b10a      	cbz	r2, 8000402 <Vector154+0x22>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 80003fe:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8000400:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000402:	f000 ff0d 	bl	8001220 <_dbg_check_leave_isr>
}
 8000406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800040a:	f000 bd81 	b.w	8000f10 <_port_irq_epilogue>
 800040e:	bf00      	nop
 8000410:	40026400 	.word	0x40026400
 8000414:	20000f04 	.word	0x20000f04
	...

08000420 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000424:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 8000428:	f000 fda2 	bl	8000f70 <_stats_increase_irq>
 800042c:	f000 ff10 	bl	8001250 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000430:	6933      	ldr	r3, [r6, #16]
 8000432:	079b      	lsls	r3, r3, #30
 8000434:	d405      	bmi.n	8000442 <VectorB0+0x22>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000436:	f000 fef3 	bl	8001220 <_dbg_check_leave_isr>
}
 800043a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 800043e:	f000 bd67 	b.w	8000f10 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8000442:	2700      	movs	r7, #0
 8000444:	6137      	str	r7, [r6, #16]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000446:	2320      	movs	r3, #32
 8000448:	f383 8811 	msr	BASEPRI, r3
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 800044c:	4d31      	ldr	r5, [pc, #196]	; (8000514 <VectorB0+0xf4>)
/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 800044e:	f505 6099 	add.w	r0, r5, #1224	; 0x4c8
 8000452:	f000 fded 	bl	8001030 <chTMStartMeasurementX>
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000456:	f001 f8eb 	bl	8001630 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 800045a:	f000 fea9 	bl	80011b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 800045e:	f000 fea7 	bl	80011b0 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8000462:	69ec      	ldr	r4, [r5, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000464:	6a72      	ldr	r2, [r6, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000466:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000468:	68a3      	ldr	r3, [r4, #8]
 800046a:	1a50      	subs	r0, r2, r1
 800046c:	4298      	cmp	r0, r3
 800046e:	bf38      	it	cc
 8000470:	f105 061c 	addcc.w	r6, r5, #28
 8000474:	d328      	bcc.n	80004c8 <VectorB0+0xa8>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 8000476:	46b8      	mov	r8, r7
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000478:	4637      	mov	r7, r6
 800047a:	f105 061c 	add.w	r6, r5, #28
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800047e:	6822      	ldr	r2, [r4, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 8000480:	f8d4 900c 	ldr.w	r9, [r4, #12]
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000484:	440b      	add	r3, r1
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 8000486:	42b2      	cmp	r2, r6
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 8000488:	62ab      	str	r3, [r5, #40]	; 0x28

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800048a:	6056      	str	r6, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 800048c:	61ea      	str	r2, [r5, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 800048e:	f8c4 800c 	str.w	r8, [r4, #12]
 8000492:	bf08      	it	eq
 8000494:	f8c7 800c 	streq.w	r8, [r7, #12]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000498:	f001 f8b2 	bl	8001600 <_dbg_check_unlock_from_isr>
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 800049c:	481e      	ldr	r0, [pc, #120]	; (8000518 <VectorB0+0xf8>)
 800049e:	f000 fd97 	bl	8000fd0 <chTMStopMeasurementX>
 80004a2:	f388 8811 	msr	BASEPRI, r8
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 80004a6:	6920      	ldr	r0, [r4, #16]
 80004a8:	47c8      	blx	r9
 80004aa:	2320      	movs	r3, #32
 80004ac:	f383 8811 	msr	BASEPRI, r3
/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 80004b0:	4819      	ldr	r0, [pc, #100]	; (8000518 <VectorB0+0xf8>)
 80004b2:	f000 fdbd 	bl	8001030 <chTMStartMeasurementX>
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80004b6:	f001 f8bb 	bl	8001630 <_dbg_check_lock_from_isr>
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 80004ba:	69ec      	ldr	r4, [r5, #28]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80004bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80004be:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80004c0:	68a3      	ldr	r3, [r4, #8]
 80004c2:	1a50      	subs	r0, r2, r1
 80004c4:	4283      	cmp	r3, r0
 80004c6:	d9da      	bls.n	800047e <VectorB0+0x5e>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80004c8:	42b4      	cmp	r4, r6
 80004ca:	d015      	beq.n	80004f8 <VectorB0+0xd8>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 80004cc:	440b      	add	r3, r1
 80004ce:	1a9b      	subs	r3, r3, r2
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	bf98      	it	ls
 80004d4:	2302      	movls	r3, #2
  }
  port_timer_set_alarm(now + delta);
 80004d6:	189c      	adds	r4, r3, r2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80004d8:	4620      	mov	r0, r4
 80004da:	f000 fd09 	bl	8000ef0 <stSetAlarm>
 80004de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

  chDbgAssert((chVTGetSystemTimeX() - ch.vtlist.vt_lasttime) <=
 80004e2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80004e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e6:	480d      	ldr	r0, [pc, #52]	; (800051c <VectorB0+0xfc>)
 80004e8:	1a63      	subs	r3, r4, r1
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d903      	bls.n	80004f8 <VectorB0+0xd8>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <VectorB0+0x100>)
 80004f4:	62c3      	str	r3, [r0, #44]	; 0x2c
 80004f6:	e7fe      	b.n	80004f6 <VectorB0+0xd6>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80004f8:	f001 f882 	bl	8001600 <_dbg_check_unlock_from_isr>
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <VectorB0+0xf8>)
 80004fe:	f000 fd67 	bl	8000fd0 <chTMStopMeasurementX>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000502:	2300      	movs	r3, #0
 8000504:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000508:	f000 fe8a 	bl	8001220 <_dbg_check_leave_isr>
}
 800050c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000510:	f000 bcfe 	b.w	8000f10 <_port_irq_epilogue>
 8000514:	200008f8 	.word	0x200008f8
 8000518:	20000dc0 	.word	0x20000dc0
 800051c:	200008f8 	.word	0x200008f8
 8000520:	080020c0 	.word	0x080020c0
	...

08000530 <__early_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000530:	492c      	ldr	r1, [pc, #176]	; (80005e4 <__early_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000532:	4b2d      	ldr	r3, [pc, #180]	; (80005e8 <__early_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8000534:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8000538:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800053c:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800053e:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000540:	680b      	ldr	r3, [r1, #0]
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000548:	680a      	ldr	r2, [r1, #0]
 800054a:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <__early_init+0xb4>)
 800054c:	0790      	lsls	r0, r2, #30
 800054e:	d5fb      	bpl.n	8000548 <__early_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000550:	689a      	ldr	r2, [r3, #8]
 8000552:	f022 0203 	bic.w	r2, r2, #3
 8000556:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8000558:	689a      	ldr	r2, [r3, #8]
 800055a:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800055c:	4619      	mov	r1, r3
 800055e:	688b      	ldr	r3, [r1, #8]
 8000560:	4a20      	ldr	r2, [pc, #128]	; (80005e4 <__early_init+0xb4>)
 8000562:	f013 030c 	ands.w	r3, r3, #12
 8000566:	d1fa      	bne.n	800055e <__early_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 800056e:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000570:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8000572:	6813      	ldr	r3, [r2, #0]
 8000574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000578:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800057a:	6811      	ldr	r1, [r2, #0]
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <__early_init+0xb4>)
 800057e:	0389      	lsls	r1, r1, #14
 8000580:	d5fb      	bpl.n	800057a <__early_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000582:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000584:	f042 0201 	orr.w	r2, r2, #1
 8000588:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800058a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800058c:	4915      	ldr	r1, [pc, #84]	; (80005e4 <__early_init+0xb4>)
 800058e:	0790      	lsls	r0, r2, #30
 8000590:	d5fb      	bpl.n	800058a <__early_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <__early_init+0xbc>)
 8000594:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8000596:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8000598:	4a13      	ldr	r2, [pc, #76]	; (80005e8 <__early_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800059a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800059e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 80005a0:	6853      	ldr	r3, [r2, #4]
 80005a2:	0459      	lsls	r1, r3, #17
 80005a4:	d5fc      	bpl.n	80005a0 <__early_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80005a6:	490f      	ldr	r1, [pc, #60]	; (80005e4 <__early_init+0xb4>)
 80005a8:	680a      	ldr	r2, [r1, #0]
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <__early_init+0xb4>)
 80005ac:	0192      	lsls	r2, r2, #6
 80005ae:	d5fb      	bpl.n	80005a8 <__early_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80005b0:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <__early_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 80005b2:	4910      	ldr	r1, [pc, #64]	; (80005f4 <__early_init+0xc4>)
 80005b4:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 80005b6:	f240 7105 	movw	r1, #1797	; 0x705
 80005ba:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80005bc:	689a      	ldr	r2, [r3, #8]
 80005be:	f042 0202 	orr.w	r2, r2, #2
 80005c2:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80005c4:	461a      	mov	r2, r3
 80005c6:	6893      	ldr	r3, [r2, #8]
 80005c8:	4906      	ldr	r1, [pc, #24]	; (80005e4 <__early_init+0xb4>)
 80005ca:	f003 030c 	and.w	r3, r3, #12
 80005ce:	2b08      	cmp	r3, #8
 80005d0:	d1f9      	bne.n	80005c6 <__early_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 80005d2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80005d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d8:	644b      	str	r3, [r1, #68]	; 0x44
 80005da:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80005dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e0:	664b      	str	r3, [r1, #100]	; 0x64
 80005e2:	4770      	bx	lr
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000
 80005ec:	0740540c 	.word	0x0740540c
 80005f0:	40023c00 	.word	0x40023c00
 80005f4:	38889400 	.word	0x38889400
	...

08000600 <dmaStreamRelease>:
 *
 * @special
 */
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {

  osalDbgCheck(dmastp != NULL);
 8000600:	2800      	cmp	r0, #0
 8000602:	d036      	beq.n	8000672 <dmaStreamRelease+0x72>
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {
 8000604:	b4f0      	push	{r4, r5, r6, r7}

  osalDbgCheck(dmastp != NULL);

  /* Check if the streams is not taken.*/
  osalDbgAssert((dma_streams_mask & (1 << dmastp->selfindex)) != 0,
 8000606:	4d1d      	ldr	r5, [pc, #116]	; (800067c <dmaStreamRelease+0x7c>)
 8000608:	7a43      	ldrb	r3, [r0, #9]
 800060a:	682a      	ldr	r2, [r5, #0]
 800060c:	2101      	movs	r1, #1
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	4213      	tst	r3, r2
 8000614:	d028      	beq.n	8000668 <dmaStreamRelease+0x68>
                "not allocated");

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);
 8000616:	7a83      	ldrb	r3, [r0, #10]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 8000618:	4e19      	ldr	r6, [pc, #100]	; (8000680 <dmaStreamRelease+0x80>)
 800061a:	095c      	lsrs	r4, r3, #5
 800061c:	3420      	adds	r4, #32
 800061e:	f003 071f 	and.w	r7, r3, #31
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8000622:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000626:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 800062a:	fa01 f707 	lsl.w	r7, r1, r7
 800062e:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8000632:	2400      	movs	r4, #0
 8000634:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300

  /* Marks the stream as not allocated.*/
  dma_streams_mask &= ~(1 << dmastp->selfindex);
 8000638:	7a43      	ldrb	r3, [r0, #9]
 800063a:	fa01 f303 	lsl.w	r3, r1, r3
 800063e:	ea22 0303 	bic.w	r3, r2, r3

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0)
 8000642:	f013 0fff 	tst.w	r3, #255	; 0xff

  /* Disables the associated IRQ vector.*/
  nvicDisableVector(dmastp->vector);

  /* Marks the stream as not allocated.*/
  dma_streams_mask &= ~(1 << dmastp->selfindex);
 8000646:	602b      	str	r3, [r5, #0]

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) == 0)
 8000648:	d104      	bne.n	8000654 <dmaStreamRelease+0x54>
    rccDisableDMA1(FALSE);
 800064a:	490e      	ldr	r1, [pc, #56]	; (8000684 <dmaStreamRelease+0x84>)
 800064c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800064e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000652:	630a      	str	r2, [r1, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) == 0)
 8000654:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 8000658:	d104      	bne.n	8000664 <dmaStreamRelease+0x64>
    rccDisableDMA2(FALSE);
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <dmaStreamRelease+0x84>)
 800065c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800065e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000662:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000664:	bcf0      	pop	{r4, r5, r6, r7}
 8000666:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <dmaStreamRelease+0x88>)
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <dmaStreamRelease+0x8c>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000670:	e7fe      	b.n	8000670 <dmaStreamRelease+0x70>
 8000672:	b672      	cpsid	i
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <dmaStreamRelease+0x88>)
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <dmaStreamRelease+0x8c>)
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
 800067a:	e7fe      	b.n	800067a <dmaStreamRelease+0x7a>
 800067c:	20000f88 	.word	0x20000f88
 8000680:	e000e100 	.word	0xe000e100
 8000684:	40023800 	.word	0x40023800
 8000688:	200008f8 	.word	0x200008f8
 800068c:	08002060 	.word	0x08002060

08000690 <main>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8000690:	4bc9      	ldr	r3, [pc, #804]	; (80009b8 <main+0x328>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000692:	4cca      	ldr	r4, [pc, #808]	; (80009bc <main+0x32c>)
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8000694:	691a      	ldr	r2, [r3, #16]
 8000696:	f04f 31ff 	mov.w	r1, #4294967295
 800069a:	2200      	movs	r2, #0


/*
 * Application entry point.
 */
int main(void) {
 800069c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80006a0:	6119      	str	r1, [r3, #16]
 80006a2:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 80006a4:	6958      	ldr	r0, [r3, #20]
 80006a6:	6159      	str	r1, [r3, #20]
 80006a8:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 80006aa:	6a18      	ldr	r0, [r3, #32]
 80006ac:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 80006b0:	6218      	str	r0, [r3, #32]
 80006b2:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 80006b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80006b6:	6259      	str	r1, [r3, #36]	; 0x24
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 80006ba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80006bc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80006c0:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80006c2:	6821      	ldr	r1, [r4, #0]
 80006c4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80006c8:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 80006ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80006cc:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80006d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80006d4:	b087      	sub	sp, #28
 80006d6:	d003      	beq.n	80006e0 <main+0x50>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80006d8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80006dc:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 80006de:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 80006e0:	48b6      	ldr	r0, [pc, #728]	; (80009bc <main+0x32c>)
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 80006e2:	4cb7      	ldr	r4, [pc, #732]	; (80009c0 <main+0x330>)
 80006e4:	6842      	ldr	r2, [r0, #4]
 80006e6:	4eb7      	ldr	r6, [pc, #732]	; (80009c4 <main+0x334>)
 80006e8:	4db7      	ldr	r5, [pc, #732]	; (80009c8 <main+0x338>)
 80006ea:	2100      	movs	r1, #0
 80006ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006f0:	6042      	str	r2, [r0, #4]
 80006f2:	460b      	mov	r3, r1
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80006f4:	460a      	mov	r2, r1
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 80006f6:	6021      	str	r1, [r4, #0]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 80006f8:	58f0      	ldr	r0, [r6, r3]
 80006fa:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 80006fc:	f845 1032 	str.w	r1, [r5, r2, lsl #3]
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8000700:	3201      	adds	r2, #1
 8000702:	2a10      	cmp	r2, #16
 8000704:	f103 030c 	add.w	r3, r3, #12
    _stm32_dma_streams[i].stream->CR = 0;
 8000708:	f04f 0400 	mov.w	r4, #0
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800070c:	d1f4      	bne.n	80006f8 <main+0x68>
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800070e:	f8df b2f4 	ldr.w	fp, [pc, #756]	; 8000a04 <main+0x374>
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 8000712:	49ae      	ldr	r1, [pc, #696]	; (80009cc <main+0x33c>)
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8000714:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 80009b8 <main+0x328>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000718:	4ead      	ldr	r6, [pc, #692]	; (80009d0 <main+0x340>)
 800071a:	48ae      	ldr	r0, [pc, #696]	; (80009d4 <main+0x344>)
 800071c:	4bae      	ldr	r3, [pc, #696]	; (80009d8 <main+0x348>)
 800071e:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 8000a08 <main+0x378>
 8000722:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 8000a0c <main+0x37c>
 8000726:	f8df c2e8 	ldr.w	ip, [pc, #744]	; 8000a10 <main+0x380>
 800072a:	f8df e2e8 	ldr.w	lr, [pc, #744]	; 8000a14 <main+0x384>
 800072e:	4fab      	ldr	r7, [pc, #684]	; (80009dc <main+0x34c>)
  dma_streams_mask = 0;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 8000730:	f04f 35ff 	mov.w	r5, #4294967295
 8000734:	f8cb 5008 	str.w	r5, [fp, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 8000738:	f8cb 500c 	str.w	r5, [fp, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 800073c:	608d      	str	r5, [r1, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 800073e:	60cd      	str	r5, [r1, #12]
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8000740:	f8d8 b030 	ldr.w	fp, [r8, #48]	; 0x30
 8000744:	ea6f 2b5b 	mvn.w	fp, fp, lsr #9
 8000748:	ea6f 2b4b 	mvn.w	fp, fp, lsl #9
 800074c:	f8c8 b030 	str.w	fp, [r8, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8000750:	f8d8 b050 	ldr.w	fp, [r8, #80]	; 0x50
 8000754:	ea6f 2b5b 	mvn.w	fp, fp, lsr #9
 8000758:	ea6f 2b4b 	mvn.w	fp, fp, lsl #9
 800075c:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000760:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 8000a18 <main+0x388>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000764:	6074      	str	r4, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000766:	60b5      	str	r5, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8000768:	f8c6 b00c 	str.w	fp, [r6, #12]
  gpiop->ODR     = config->odr;
 800076c:	f64f 6bff 	movw	fp, #65279	; 0xfeff
 8000770:	f8c6 b014 	str.w	fp, [r6, #20]
  gpiop->AFRL    = config->afrl;
 8000774:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 8000a1c <main+0x38c>
 8000778:	f8c6 b020 	str.w	fp, [r6, #32]
  gpiop->AFRH    = config->afrh;
 800077c:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8000a20 <main+0x390>
 8000780:	f8c6 b024 	str.w	fp, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000784:	f10b 4b2b 	add.w	fp, fp, #2868903936	; 0xab000000
 8000788:	f5ab 0bd2 	sub.w	fp, fp, #6881280	; 0x690000
 800078c:	f1ab 0bd8 	sub.w	fp, fp, #216	; 0xd8
 8000790:	f8c6 b000 	str.w	fp, [r6]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000794:	f44f 7640 	mov.w	r6, #768	; 0x300
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000798:	f8df b288 	ldr.w	fp, [pc, #648]	; 8000a24 <main+0x394>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800079c:	6046      	str	r6, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800079e:	6085      	str	r5, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80007a0:	f64f 76fe 	movw	r6, #65534	; 0xfffe

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80007a4:	f8c0 b00c 	str.w	fp, [r0, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80007a8:	f44f 0ba0 	mov.w	fp, #5242880	; 0x500000
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80007ac:	6146      	str	r6, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80007ae:	f8c0 b020 	str.w	fp, [r0, #32]
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80007b2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8000a28 <main+0x398>
  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 80007b6:	4e8a      	ldr	r6, [pc, #552]	; (80009e0 <main+0x350>)
 80007b8:	6246      	str	r6, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80007ba:	f8c0 b000 	str.w	fp, [r0]

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80007be:	f1ab 5bcb 	sub.w	fp, fp, #425721856	; 0x19600000
 80007c2:	f5ab 2b6c 	sub.w	fp, fp, #966656	; 0xec000

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80007c6:	2601      	movs	r6, #1
  gpiop->ODR     = config->odr;
 80007c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
  gpiop->AFRL    = config->afrl;
 80007cc:	f2ab 4bd1 	subw	fp, fp, #1233	; 0x4d1
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80007d0:	605c      	str	r4, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80007d2:	609d      	str	r5, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80007d4:	60de      	str	r6, [r3, #12]
  gpiop->ODR     = config->odr;
 80007d6:	6158      	str	r0, [r3, #20]
  gpiop->AFRL    = config->afrl;
 80007d8:	f8c3 b020 	str.w	fp, [r3, #32]
  gpiop->AFRH    = config->afrh;
 80007dc:	f8df b24c 	ldr.w	fp, [pc, #588]	; 8000a2c <main+0x39c>
 80007e0:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80007e4:	f8df b248 	ldr.w	fp, [pc, #584]	; 8000a30 <main+0x3a0>
 80007e8:	f8c3 b000 	str.w	fp, [r3]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80007ec:	f8df b244 	ldr.w	fp, [pc, #580]	; 8000a34 <main+0x3a4>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80007f0:	f8ca 4004 	str.w	r4, [sl, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80007f4:	f8ca 5008 	str.w	r5, [sl, #8]
  gpiop->PUPDR   = config->pupdr;
 80007f8:	f8ca b00c 	str.w	fp, [sl, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80007fc:	f44f 6b40 	mov.w	fp, #3072	; 0xc00
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000800:	f8ca 0014 	str.w	r0, [sl, #20]
  gpiop->AFRL    = config->afrl;
 8000804:	f8ca b020 	str.w	fp, [sl, #32]
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000808:	f04f 0b20 	mov.w	fp, #32
  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 800080c:	f8ca 4024 	str.w	r4, [sl, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000810:	f8ca b000 	str.w	fp, [sl]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000814:	f8df a220 	ldr.w	sl, [pc, #544]	; 8000a38 <main+0x3a8>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000818:	f8c9 4004 	str.w	r4, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800081c:	f8c9 5008 	str.w	r5, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
 8000820:	f8c9 a00c 	str.w	sl, [r9, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000824:	f44f 5a88 	mov.w	sl, #4352	; 0x1100
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000828:	f8c9 0014 	str.w	r0, [r9, #20]
  gpiop->AFRL    = config->afrl;
 800082c:	f8c9 4020 	str.w	r4, [r9, #32]
  gpiop->AFRH    = config->afrh;
 8000830:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000834:	f8c9 a000 	str.w	sl, [r9]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000838:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8000a3c <main+0x3ac>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800083c:	f8cc 4004 	str.w	r4, [ip, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000840:	f8cc 5008 	str.w	r5, [ip, #8]
  gpiop->PUPDR   = config->pupdr;
 8000844:	f8cc 900c 	str.w	r9, [ip, #12]
 8000848:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 8000a40 <main+0x3b0>
  gpiop->ODR     = config->odr;
 800084c:	f8cc 0014 	str.w	r0, [ip, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000850:	f5a1 4188 	sub.w	r1, r1, #17408	; 0x4400
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000854:	f8cc 4020 	str.w	r4, [ip, #32]
  gpiop->AFRH    = config->afrh;
 8000858:	f8cc 4024 	str.w	r4, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800085c:	f8cc 4000 	str.w	r4, [ip]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000860:	f8ce 4004 	str.w	r4, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 8000864:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8000a44 <main+0x3b4>
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8000868:	f8ce 5008 	str.w	r5, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 800086c:	f8ce 900c 	str.w	r9, [lr, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000870:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8000a48 <main+0x3b8>
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8000874:	f8ce 0014 	str.w	r0, [lr, #20]
  gpiop->AFRL    = config->afrl;
 8000878:	f8ce 4020 	str.w	r4, [lr, #32]
  gpiop->AFRH    = config->afrh;
 800087c:	f8ce c024 	str.w	ip, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000880:	f8ce 9000 	str.w	r9, [lr]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000884:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8000a4c <main+0x3bc>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000888:	607c      	str	r4, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 800088a:	f04f 3e55 	mov.w	lr, #1431655765	; 0x55555555
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 800088e:	60bd      	str	r5, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8000890:	f8c7 c00c 	str.w	ip, [r7, #12]
  gpiop->ODR     = config->odr;
 8000894:	6178      	str	r0, [r7, #20]
  gpiop->AFRL    = config->afrl;
 8000896:	623c      	str	r4, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8000898:	627c      	str	r4, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800089a:	603c      	str	r4, [r7, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800089c:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800089e:	608d      	str	r5, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80008a0:	f8c1 e00c 	str.w	lr, [r1, #12]
  gpiop->ODR     = config->odr;
 80008a4:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80008a6:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 80008a8:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80008aa:	600c      	str	r4, [r1, #0]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80008ac:	f8d8 7040 	ldr.w	r7, [r8, #64]	; 0x40
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80008b0:	4b4c      	ldr	r3, [pc, #304]	; (80009e4 <main+0x354>)
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 80008b2:	494d      	ldr	r1, [pc, #308]	; (80009e8 <main+0x358>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80008b4:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8000a50 <main+0x3c0>
 80008b8:	701e      	strb	r6, [r3, #0]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80008ba:	4337      	orrs	r7, r6
  spip->config = NULL;
 80008bc:	605c      	str	r4, [r3, #4]
 80008be:	800d      	strh	r5, [r1, #0]
 80008c0:	f8c8 7040 	str.w	r7, [r8, #64]	; 0x40

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80008c4:	f8d9 8008 	ldr.w	r8, [r9, #8]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80008c8:	f8df e188 	ldr.w	lr, [pc, #392]	; 8000a54 <main+0x3c4>
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80008cc:	609c      	str	r4, [r3, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80008ce:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80008d2:	ea48 0806 	orr.w	r8, r8, r6
 80008d6:	f8c9 8008 	str.w	r8, [r9, #8]
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 80008da:	4944      	ldr	r1, [pc, #272]	; (80009ec <main+0x35c>)

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 80008dc:	f8df c178 	ldr.w	ip, [pc, #376]	; 8000a58 <main+0x3c8>
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80008e0:	4843      	ldr	r0, [pc, #268]	; (80009f0 <main+0x360>)

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 80008e2:	f8df a178 	ldr.w	sl, [pc, #376]	; 8000a5c <main+0x3cc>

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80008e6:	f242 08cf 	movw	r8, #8399	; 0x20cf
 80008ea:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
 80008ee:	f04f 0980 	mov.w	r9, #128	; 0x80
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80008f2:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80008f6:	62fd      	str	r5, [r7, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 80008f8:	61bc      	str	r4, [r7, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80008fa:	637c      	str	r4, [r7, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 80008fc:	60fc      	str	r4, [r7, #12]
  STM32_ST_TIM->CR2    = 0;
 80008fe:	607c      	str	r4, [r7, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8000900:	617e      	str	r6, [r7, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8000902:	603e      	str	r6, [r7, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000904:	f88e 931c 	strb.w	r9, [lr, #796]	; 0x31c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000908:	f8ce 8180 	str.w	r8, [lr, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800090c:	f8ce 8000 	str.w	r8, [lr]
 8000910:	608c      	str	r4, [r1, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000912:	f8d1 800c 	ldr.w	r8, [r1, #12]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8000916:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8000a60 <main+0x3d0>

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 800091a:	f8c3 a020 	str.w	sl, [r3, #32]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800091e:	f64f 07ff 	movw	r7, #63743	; 0xf8ff
 8000922:	ea08 0707 	and.w	r7, r8, r7
  reg_value  =  (reg_value                                 |
 8000926:	4338      	orrs	r0, r7
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8000928:	f10c 0724 	add.w	r7, ip, #36	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800092c:	f103 0a0c 	add.w	sl, r3, #12
 8000930:	629f      	str	r7, [r3, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8000932:	4f30      	ldr	r7, [pc, #192]	; (80009f4 <main+0x364>)
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8000934:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8000938:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800093c:	631f      	str	r7, [r3, #48]	; 0x30
 800093e:	f8c3 a00c 	str.w	sl, [r3, #12]
  tqp->p_prev = (thread_t *)tqp;
 8000942:	f8c3 a010 	str.w	sl, [r3, #16]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000946:	615c      	str	r4, [r3, #20]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->m_cnt = (cnt_t)0;
 8000948:	61dc      	str	r4, [r3, #28]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800094a:	60c8      	str	r0, [r1, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800094c:	f8de 3cfc 	ldr.w	r3, [lr, #3324]	; 0xcfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000950:	4829      	ldr	r0, [pc, #164]	; (80009f8 <main+0x368>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000952:	4f2a      	ldr	r7, [pc, #168]	; (80009fc <main+0x36c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000954:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8000a64 <main+0x3d4>

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800095c:	f8ce 3cfc 	str.w	r3, [lr, #3324]	; 0xcfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000960:	6803      	ldr	r3, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000962:	607f      	str	r7, [r7, #4]
 8000964:	4333      	orrs	r3, r6
 8000966:	6003      	str	r3, [r0, #0]

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000968:	f04f 0800 	mov.w	r8, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800096c:	77ca      	strb	r2, [r1, #31]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	f881 b022 	strb.w	fp, [r1, #34]	; 0x22
 8000976:	f04f 0900 	mov.w	r9, #0
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800097a:	4668      	mov	r0, sp
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800097c:	603f      	str	r7, [r7, #0]
 800097e:	61fb      	str	r3, [r7, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000980:	623b      	str	r3, [r7, #32]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000982:	9500      	str	r5, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
 8000984:	9401      	str	r4, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8000986:	9402      	str	r4, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8000988:	9403      	str	r4, [sp, #12]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800098a:	60bc      	str	r4, [r7, #8]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 800098c:	613f      	str	r7, [r7, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800098e:	617f      	str	r7, [r7, #20]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000990:	627d      	str	r5, [r7, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8000992:	62bc      	str	r4, [r7, #40]	; 0x28
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8000994:	f8c7 44a0 	str.w	r4, [r7, #1184]	; 0x4a0

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000998:	e9cd 8904 	strd	r8, r9, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800099c:	f000 fb48 	bl	8001030 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 80009a0:	4668      	mov	r0, sp
 80009a2:	f000 fb15 	bl	8000fd0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 80009a6:	9a02      	ldr	r2, [sp, #8]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <main+0x370>)
 80009aa:	f8c7 24a0 	str.w	r2, [r7, #1184]	; 0x4a0

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80009ae:	f507 6b98 	add.w	fp, r7, #1216	; 0x4c0
 80009b2:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 80009b6:	e057      	b.n	8000a68 <main+0x3d8>
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40007000 	.word	0x40007000
 80009c0:	20000f88 	.word	0x20000f88
 80009c4:	080020f0 	.word	0x080020f0
 80009c8:	20000f04 	.word	0x20000f04
 80009cc:	40026400 	.word	0x40026400
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40021c00 	.word	0x40021c00
 80009e0:	cc0c0544 	.word	0xcc0c0544
 80009e4:	20000ed0 	.word	0x20000ed0
 80009e8:	200008c4 	.word	0x200008c4
 80009ec:	e000ed00 	.word	0xe000ed00
 80009f0:	05fa0300 	.word	0x05fa0300
 80009f4:	06010046 	.word	0x06010046
 80009f8:	e0001000 	.word	0xe0001000
 80009fc:	200008f8 	.word	0x200008f8
 8000a00:	200008d0 	.word	0x200008d0
 8000a04:	40026000 	.word	0x40026000
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40021400 	.word	0x40021400
 8000a14:	40021800 	.word	0x40021800
 8000a18:	20080100 	.word	0x20080100
 8000a1c:	b5500bb0 	.word	0xb5500bb0
 8000a20:	000aaa00 	.word	0x000aaa00
 8000a24:	08404000 	.word	0x08404000
 8000a28:	a22a1a81 	.word	0xa22a1a81
 8000a2c:	000ccccc 	.word	0x000ccccc
 8000a30:	06aaaaa8 	.word	0x06aaaaa8
 8000a34:	55555545 	.word	0x55555545
 8000a38:	55554045 	.word	0x55554045
 8000a3c:	55155555 	.word	0x55155555
 8000a40:	00044555 	.word	0x00044555
 8000a44:	0bb0b000 	.word	0x0bb0b000
 8000a48:	69910000 	.word	0x69910000
 8000a4c:	55555550 	.word	0x55555550
 8000a50:	e0042000 	.word	0xe0042000
 8000a54:	e000e100 	.word	0xe000e100
 8000a58:	08002150 	.word	0x08002150
 8000a5c:	40013000 	.word	0x40013000
 8000a60:	06010016 	.word	0x06010016
 8000a64:	200008c0 	.word	0x200008c0
 8000a68:	4840      	ldr	r0, [pc, #256]	; (8000b6c <main+0x4dc>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000a6a:	4941      	ldr	r1, [pc, #260]	; (8000b70 <main+0x4e0>)
 8000a6c:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8000b7c <main+0x4ec>
 8000a70:	f8df e10c 	ldr.w	lr, [pc, #268]	; 8000b80 <main+0x4f0>
 8000a74:	f8c3 e000 	str.w	lr, [r3]
 8000a78:	e9cb 8900 	strd	r8, r9, [fp]
 8000a7c:	e9c2 8900 	strd	r8, r9, [r2]
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 8000a80:	f107 0b40 	add.w	fp, r7, #64	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000a84:	2202      	movs	r2, #2
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000a86:	f020 0007 	bic.w	r0, r0, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000a8a:	f021 0107 	bic.w	r1, r1, #7
 8000a8e:	f8c7 b03c 	str.w	fp, [r7, #60]	; 0x3c
 8000a92:	f887 2460 	strb.w	r2, [r7, #1120]	; 0x460
 8000a96:	f103 0b10 	add.w	fp, r3, #16
 * @brief   Trace circular buffer subsystem initialization.
 * @note    Internal use only.
 */
void _dbg_trace_init(void) {

  ch.dbg.trace_buffer.tb_size = CH_DBG_TRACE_BUFFER_SIZE;
 8000a9a:	2240      	movs	r2, #64	; 0x40
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000a9c:	f8ca 0000 	str.w	r0, [sl]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8000aa0:	f8cc 1000 	str.w	r1, [ip]
  default_heap.h_free.h.u.next = NULL;
 8000aa4:	609c      	str	r4, [r3, #8]
  default_heap.h_free.h.size = 0;
 8000aa6:	60dc      	str	r4, [r3, #12]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8000aa8:	619c      	str	r4, [r3, #24]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->m_cnt = (cnt_t)0;
 8000aaa:	621c      	str	r4, [r3, #32]
 8000aac:	f8c3 b010 	str.w	fp, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8000ab0:	f8c3 b014 	str.w	fp, [r3, #20]
 8000ab4:	63ba      	str	r2, [r7, #56]	; 0x38
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000ab6:	f8c7 2448 	str.w	r2, [r7, #1096]	; 0x448
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000aba:	f8c7 2480 	str.w	r2, [r7, #1152]	; 0x480
 *
 * @init
 */
void _stats_init(void) {

  ch.kernel_stats.n_irq = (ucnt_t)0;
 8000abe:	f8c7 44a8 	str.w	r4, [r7, #1192]	; 0x4a8
  ch.kernel_stats.n_ctxswc = (ucnt_t)0;
 8000ac2:	f8c7 44ac 	str.w	r4, [r7, #1196]	; 0x4ac
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000ac6:	f8c7 54b0 	str.w	r5, [r7, #1200]	; 0x4b0
  tmp->worst      = (rtcnt_t)0;
 8000aca:	f8c7 44b4 	str.w	r4, [r7, #1204]	; 0x4b4
  tmp->last       = (rtcnt_t)0;
 8000ace:	f8c7 44b8 	str.w	r4, [r7, #1208]	; 0x4b8
  tmp->n          = (ucnt_t)0;
 8000ad2:	f8c7 44bc 	str.w	r4, [r7, #1212]	; 0x4bc
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000ad6:	f8c7 54c8 	str.w	r5, [r7, #1224]	; 0x4c8
  tmp->worst      = (rtcnt_t)0;
 8000ada:	f8c7 44cc 	str.w	r4, [r7, #1228]	; 0x4cc
  tmp->last       = (rtcnt_t)0;
 8000ade:	f8c7 44d0 	str.w	r4, [r7, #1232]	; 0x4d0
  tmp->n          = (ucnt_t)0;
 8000ae2:	f8c7 44d4 	str.w	r4, [r7, #1236]	; 0x4d4
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000ae6:	f887 4461 	strb.w	r4, [r7, #1121]	; 0x461
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000aea:	f8c7 447c 	str.w	r4, [r7, #1148]	; 0x47c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000aee:	f8c7 4478 	str.w	r4, [r7, #1144]	; 0x478
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000af2:	f887 6462 	strb.w	r6, [r7, #1122]	; 0x462
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000af6:	f8c7 4458 	str.w	r4, [r7, #1112]	; 0x458
  REG_INSERT(tp);
 8000afa:	f8c7 7450 	str.w	r7, [r7, #1104]	; 0x450
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8000b04:	f507 6a88 	add.w	sl, r7, #1088	; 0x440
 8000b08:	f8c3 a010 	str.w	sl, [r3, #16]
  tmp->cumulative = (rttime_t)0;
 8000b0c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000b10:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000b14:	f507 6e8d 	add.w	lr, r7, #1128	; 0x468
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 8000b18:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8000b1c:	e9c2 8900 	strd	r8, r9, [r2]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000b20:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
  tqp->p_prev = (thread_t *)tqp;
 8000b24:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
  chTMStartMeasurementX(&tp->p_stats);
 8000b28:	f507 6091 	add.w	r0, r7, #1160	; 0x488
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000b2c:	f8c7 5488 	str.w	r5, [r7, #1160]	; 0x488
  tmp->worst      = (rtcnt_t)0;
 8000b30:	f8c7 448c 	str.w	r4, [r7, #1164]	; 0x48c
  tmp->last       = (rtcnt_t)0;
 8000b34:	f8c7 4490 	str.w	r4, [r7, #1168]	; 0x490
  tmp->n          = (ucnt_t)0;
 8000b38:	f8c7 4494 	str.w	r4, [r7, #1172]	; 0x494
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000b3c:	f8c7 e468 	str.w	lr, [r7, #1128]	; 0x468
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 8000b40:	f8c7 145c 	str.w	r1, [r7, #1116]	; 0x45c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000b44:	f8c7 a014 	str.w	sl, [r7, #20]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
  chTMStartMeasurementX(&tp->p_stats);
 8000b48:	f000 fa72 	bl	8001030 <chTMStartMeasurementX>
 *
 * @notapi
 */
void _dbg_check_enable(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

  currp->p_state = CH_STATE_CURRENT;
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 8000b4e:	4a09      	ldr	r2, [pc, #36]	; (8000b74 <main+0x4e4>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000b50:	f8c7 a018 	str.w	sl, [r7, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000b54:	f887 6460 	strb.w	r6, [r7, #1120]	; 0x460
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  /* This is a special case because the main thread thread_t structure is not
     adjacent to its stack area.*/
  currp->p_stklimit = &__main_thread_stack_base__;
 8000b58:	f8c7 245c 	str.w	r2, [r7, #1116]	; 0x45c
 8000b5c:	b90b      	cbnz	r3, 8000b62 <main+0x4d2>
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	b183      	cbz	r3, 8000b84 <main+0x4f4>
 8000b62:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <main+0x4e8>)
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b68:	e7fe      	b.n	8000b68 <main+0x4d8>
 8000b6a:	bf00      	nop
 8000b6c:	20000f93 	.word	0x20000f93
 8000b70:	20020000 	.word	0x20020000
 8000b74:	20000400 	.word	0x20000400
 8000b78:	0800209c 	.word	0x0800209c
 8000b7c:	200008c8 	.word	0x200008c8
 8000b80:	08001721 	.word	0x08001721

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000b84:	f383 8811 	msr	BASEPRI, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000b88:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	4ab9      	ldr	r2, [pc, #740]	; (8000e74 <main+0x7e4>)
 8000b8e:	619a      	str	r2, [r3, #24]
 8000b90:	f507 699c 	add.w	r9, r7, #1248	; 0x4e0
 8000b94:	464b      	mov	r3, r9
 8000b96:	f507 68a8 	add.w	r8, r7, #1344	; 0x540
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
    *startp++ = v;
 8000b9a:	22ff      	movs	r2, #255	; 0xff
 8000b9c:	f803 2b01 	strb.w	r2, [r3], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8000ba0:	4543      	cmp	r3, r8
 8000ba2:	d3fb      	bcc.n	8000b9c <main+0x50c>
 8000ba4:	4bb4      	ldr	r3, [pc, #720]	; (8000e78 <main+0x7e8>)
    *startp++ = v;
 8000ba6:	2155      	movs	r1, #85	; 0x55
 8000ba8:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8000bac:	f803 1b01 	strb.w	r1, [r3], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	4db2      	ldr	r5, [pc, #712]	; (8000e7c <main+0x7ec>)
 8000bb4:	d3fa      	bcc.n	8000bac <main+0x51c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000bb6:	2320      	movs	r3, #32
 8000bb8:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8000bbc:	f000 fa40 	bl	8001040 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8000bc0:	f000 fd9e 	bl	8001700 <_dbg_check_lock>
                       tprio_t prio, tfunc_t pf, void *arg) {
  /* The thread structure is laid out in the lower part of the thread
     workspace.*/
  thread_t *tp = wsp;

  chDbgCheckClassI();
 8000bc4:	f000 faf4 	bl	80011b0 <chDbgCheckClassI>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000bc8:	697b      	ldr	r3, [r7, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000bca:	48ad      	ldr	r0, [pc, #692]	; (8000e80 <main+0x7f0>)
 8000bcc:	49ad      	ldr	r1, [pc, #692]	; (8000e84 <main+0x7f4>)
 8000bce:	f8c7 05b4 	str.w	r0, [r7, #1460]	; 0x5b4
 8000bd2:	2400      	movs	r4, #0
 8000bd4:	f1a5 0e24 	sub.w	lr, r5, #36	; 0x24
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000bd8:	2601      	movs	r6, #1
  tp->p_state = CH_STATE_WTSTART;
 8000bda:	2202      	movs	r2, #2
 8000bdc:	f1a5 0cd0 	sub.w	ip, r5, #208	; 0xd0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000be0:	f8c7 e4ec 	str.w	lr, [r7, #1260]	; 0x4ec
 8000be4:	f8c7 15d4 	str.w	r1, [r7, #1492]	; 0x5d4
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8000be8:	f887 2500 	strb.w	r2, [r7, #1280]	; 0x500
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000bec:	f1a5 01cc 	sub.w	r1, r5, #204	; 0xcc
  tmp->cumulative = (rttime_t)0;
 8000bf0:	2200      	movs	r2, #0
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000bf2:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000bf6:	f8c7 45b8 	str.w	r4, [r7, #1464]	; 0x5b8
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000bfa:	f887 4501 	strb.w	r4, [r7, #1281]	; 0x501
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000bfe:	f8c7 451c 	str.w	r4, [r7, #1308]	; 0x51c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000c02:	f8c7 4518 	str.w	r4, [r7, #1304]	; 0x518
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000c06:	f8c7 44f8 	str.w	r4, [r7, #1272]	; 0x4f8
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000c0a:	f04f 3eff 	mov.w	lr, #4294967295
  REG_INSERT(tp);
 8000c0e:	f8c7 74f0 	str.w	r7, [r7, #1264]	; 0x4f0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000c12:	f8c7 64e8 	str.w	r6, [r7, #1256]	; 0x4e8
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000c16:	f8c7 6520 	str.w	r6, [r7, #1312]	; 0x520
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000c1a:	f887 6502 	strb.w	r6, [r7, #1282]	; 0x502
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000c1e:	f8c3 9010 	str.w	r9, [r3, #16]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e945 2328 	strd	r2, r3, [r5, #-160]	; 0xa0
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
  chTMStartMeasurementX(&tp->p_stats);
 8000c28:	f1a5 00b0 	sub.w	r0, r5, #176	; 0xb0
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8000c2c:	f8c7 452c 	str.w	r4, [r7, #1324]	; 0x52c
  tmp->last       = (rtcnt_t)0;
 8000c30:	f8c7 4530 	str.w	r4, [r7, #1328]	; 0x530
  tmp->n          = (ucnt_t)0;
 8000c34:	f8c7 4534 	str.w	r4, [r7, #1332]	; 0x534
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000c38:	f8c7 c508 	str.w	ip, [r7, #1288]	; 0x508
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8000c3c:	f8c7 e528 	str.w	lr, [r7, #1320]	; 0x528
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000c40:	f8c7 150c 	str.w	r1, [r7, #1292]	; 0x50c
  tqp->p_prev = (thread_t *)tqp;
 8000c44:	f8c7 1510 	str.w	r1, [r7, #1296]	; 0x510
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
#endif
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
 8000c48:	f8c7 84fc 	str.w	r8, [r7, #1276]	; 0x4fc
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000c4c:	f8c7 9014 	str.w	r9, [r7, #20]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  tp->p_stklimit = (stkalign_t *)(tp + 1);
#endif
#if CH_DBG_STATISTICS == TRUE
  chTMObjectInit(&tp->p_stats);
  chTMStartMeasurementX(&tp->p_stats);
 8000c50:	f000 f9ee 	bl	8001030 <chTMStartMeasurementX>
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {

  chDbgCheckClassS();
 8000c54:	f000 fa64 	bl	8001120 <chDbgCheckClassS>

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000c58:	69b8      	ldr	r0, [r7, #24]
 8000c5a:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 8000c5e:	6882      	ldr	r2, [r0, #8]

  chDbgCheckClassS();

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8000c60:	f8c7 4504 	str.w	r4, [r7, #1284]	; 0x504

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000c64:	4293      	cmp	r3, r2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8000c66:	f5a5 64bb 	sub.w	r4, r5, #1496	; 0x5d8
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000c6a:	f1a5 05f8 	sub.w	r5, r5, #248	; 0xf8
 8000c6e:	f240 80f9 	bls.w	8000e64 <main+0x7d4>
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 8000c72:	f000 faad 	bl	80011d0 <chSchReadyI>
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8000c76:	f884 6500 	strb.w	r6, [r4, #1280]	; 0x500
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
 8000c7a:	4680      	mov	r8, r0
    setcurrp(ntp);
 8000c7c:	61a5      	str	r5, [r4, #24]
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8000c7e:	f000 f9e7 	bl	8001050 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000c82:	f8d4 34ac 	ldr.w	r3, [r4, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000c86:	f108 0048 	add.w	r0, r8, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000c8a:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000c8c:	f504 61a5 	add.w	r1, r4, #1320	; 0x528
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8000c90:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8000c94:	f000 f97c 	bl	8000f90 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000c98:	f3ef 8309 	mrs	r3, PSP
 8000c9c:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8000ca0:	3b24      	subs	r3, #36	; 0x24
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	f200 80da 	bhi.w	8000e5c <main+0x7cc>
 8000ca8:	4628      	mov	r0, r5
 8000caa:	4641      	mov	r1, r8
 8000cac:	f7ff fae8 	bl	8000280 <_port_switch>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8000cb0:	f000 fd16 	bl	80016e0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8000cb4:	f000 f9b4 	bl	8001020 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	4b73      	ldr	r3, [pc, #460]	; (8000e88 <main+0x7f8>)
 8000cbc:	42ba      	cmp	r2, r7
 8000cbe:	d005      	beq.n	8000ccc <main+0x63c>
 8000cc0:	6999      	ldr	r1, [r3, #24]
 8000cc2:	6892      	ldr	r2, [r2, #8]
 8000cc4:	6889      	ldr	r1, [r1, #8]
 8000cc6:	4291      	cmp	r1, r2
 8000cc8:	f0c0 80d0 	bcc.w	8000e6c <main+0x7dc>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f383 8811 	msr	BASEPRI, r3
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8000cd2:	4b6e      	ldr	r3, [pc, #440]	; (8000e8c <main+0x7fc>)
 8000cd4:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
  chSysInit();

  /*
   * Setup of ADF4159/ADF4355/ADA8282 register values
   */
  chThdSleepMilliseconds(1000);
 8000cd8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cdc:	f000 fd88 	bl	80017f0 <chThdSleep>
    /*
     * Program ADF4159 with power-on register values, i.e. load registers from 7-0, load registers 6/5/4 twice
     */

    //Select multiplexed line for ADF4159
    palClearPad(GPIOG, GPIOG_SPI_NSS_S0);
 8000ce0:	4b6b      	ldr	r3, [pc, #428]	; (8000e90 <main+0x800>)
 8000ce2:	4c6c      	ldr	r4, [pc, #432]	; (8000e94 <main+0x804>)
 8000ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    palClearPad(GPIOG, GPIOG_SPI_NSS_S1);
 8000ce8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    /*
     * Program ADF4159 with power-on register values, i.e. load registers from 7-0, load registers 6/5/4 twice
     */

    //Select multiplexed line for ADF4159
    palClearPad(GPIOG, GPIOG_SPI_NSS_S0);
 8000cec:	8359      	strh	r1, [r3, #26]
    palClearPad(GPIOG, GPIOG_SPI_NSS_S1);
 8000cee:	835a      	strh	r2, [r3, #26]
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8000cf0:	f000 ff4e 	bl	8001b90 <chMtxLock.constprop.17>

    spiAcquireBus(&SPID1);
    spiStart(&SPID1, &hs_spicfg);
 8000cf4:	f001 f874 	bl	8001de0 <spiStart.constprop.10>
 8000cf8:	f104 052c 	add.w	r5, r4, #44	; 0x2c

    // Configure ADF4159 registers
    for(i = 0; i < 11; i++){
        spiSelect(&SPID1);
 8000cfc:	f001 f938 	bl	8001f70 <spiSelect.constprop.6>
        spiSend(&SPID1,4,ADF4159_power_on_register_values_buf[i]);
 8000d00:	2004      	movs	r0, #4
 8000d02:	4621      	mov	r1, r4
 8000d04:	4404      	add	r4, r0
 8000d06:	f001 f803 	bl	8001d10 <spiSend.constprop.2>
        spiUnselect(&SPID1);
 8000d0a:	f001 f969 	bl	8001fe0 <spiUnselect.constprop.4>

    spiAcquireBus(&SPID1);
    spiStart(&SPID1, &hs_spicfg);

    // Configure ADF4159 registers
    for(i = 0; i < 11; i++){
 8000d0e:	42ac      	cmp	r4, r5
 8000d10:	d1f4      	bne.n	8000cfc <main+0x66c>
        spiSend(&SPID1,4,ADF4159_power_on_register_values_buf[i]);
        spiUnselect(&SPID1);
    }

    //chThdSleepMilliseconds(200);
    spiStop(&SPID1);
 8000d12:	f001 f8e5 	bl	8001ee0 <spiStop.constprop.8>
 8000d16:	4c60      	ldr	r4, [pc, #384]	; (8000e98 <main+0x808>)
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8000d18:	f000 feb2 	bl	8001a80 <chMtxUnlock.constprop.16>
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8000d1c:	f000 ff38 	bl	8001b90 <chMtxLock.constprop.17>
    /*
     * Program ADF4159 with desired register values
     */

    spiAcquireBus(&SPID1);
    spiStart(&SPID1, &hs_spicfg);
 8000d20:	f001 f85e 	bl	8001de0 <spiStart.constprop.10>
 8000d24:	f104 0520 	add.w	r5, r4, #32

    // Configure ADF4159 registers
    for(i = 0; i < 8; i++){
        spiSelect(&SPID1);
 8000d28:	f001 f922 	bl	8001f70 <spiSelect.constprop.6>
        spiSend(&SPID1,4,ADF4159_register_values_buf[i]);
 8000d2c:	2004      	movs	r0, #4
 8000d2e:	4621      	mov	r1, r4
 8000d30:	4404      	add	r4, r0
 8000d32:	f000 ffed 	bl	8001d10 <spiSend.constprop.2>
        spiUnselect(&SPID1);
 8000d36:	f001 f953 	bl	8001fe0 <spiUnselect.constprop.4>

    spiAcquireBus(&SPID1);
    spiStart(&SPID1, &hs_spicfg);

    // Configure ADF4159 registers
    for(i = 0; i < 8; i++){
 8000d3a:	42ac      	cmp	r4, r5
 8000d3c:	d1f4      	bne.n	8000d28 <main+0x698>
        spiSend(&SPID1,4,ADF4159_register_values_buf[i]);
        spiUnselect(&SPID1);
    }

    //chThdSleepMilliseconds(200);
    spiStop(&SPID1);
 8000d3e:	f001 f8cf 	bl	8001ee0 <spiStop.constprop.8>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8000d42:	f000 fe9d 	bl	8001a80 <chMtxUnlock.constprop.16>
  ADF4159_init();
  chThdSleepMilliseconds(1000);
 8000d46:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d4a:	f000 fd51 	bl	80017f0 <chThdSleep>
    /*
     * Program ADF4355 with power-on register values, i.e. load registers from 12-1, note that registers 4/2/1 use fPFD/2 value
     */

    //Select multiplexed line for ADF4355
    palClearPad(GPIOG, GPIOG_SPI_NSS_S0);
 8000d4e:	4b50      	ldr	r3, [pc, #320]	; (8000e90 <main+0x800>)
 8000d50:	4c52      	ldr	r4, [pc, #328]	; (8000e9c <main+0x80c>)
 8000d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    palSetPad(GPIOG, GPIOG_SPI_NSS_S1);
 8000d56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    /*
     * Program ADF4355 with power-on register values, i.e. load registers from 12-1, note that registers 4/2/1 use fPFD/2 value
     */

    //Select multiplexed line for ADF4355
    palClearPad(GPIOG, GPIOG_SPI_NSS_S0);
 8000d5a:	8359      	strh	r1, [r3, #26]
    palSetPad(GPIOG, GPIOG_SPI_NSS_S1);
 8000d5c:	831a      	strh	r2, [r3, #24]
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8000d5e:	f000 ff17 	bl	8001b90 <chMtxLock.constprop.17>

    spiAcquireBus(&SPID1);
    spiStart(&SPID1, &hs_spicfg);
 8000d62:	f001 f83d 	bl	8001de0 <spiStart.constprop.10>
 8000d66:	f104 0530 	add.w	r5, r4, #48	; 0x30

    // Configure ADF4355 registers
    for(i = 0; i < 12; i++){
        spiSelect(&SPID1);
 8000d6a:	f001 f901 	bl	8001f70 <spiSelect.constprop.6>
        spiSend(&SPID1,4,ADF4355_power_on_register_values_buf1[i]);
 8000d6e:	2004      	movs	r0, #4
 8000d70:	4621      	mov	r1, r4
 8000d72:	4404      	add	r4, r0
 8000d74:	f000 ffcc 	bl	8001d10 <spiSend.constprop.2>
        spiUnselect(&SPID1);
 8000d78:	f001 f932 	bl	8001fe0 <spiUnselect.constprop.4>

    spiAcquireBus(&SPID1);
    spiStart(&SPID1, &hs_spicfg);

    // Configure ADF4355 registers
    for(i = 0; i < 12; i++){
 8000d7c:	42ac      	cmp	r4, r5
 8000d7e:	d1f4      	bne.n	8000d6a <main+0x6da>
        spiSend(&SPID1,4,ADF4355_power_on_register_values_buf1[i]);
        spiUnselect(&SPID1);
    }

    //chThdSleepMilliseconds(200);
    spiStop(&SPID1);
 8000d80:	f001 f8ae 	bl	8001ee0 <spiStop.constprop.8>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8000d84:	f000 fe7c 	bl	8001a80 <chMtxUnlock.constprop.16>
    spiReleaseBus(&SPID1);

    chThdSleepMilliseconds(1); // Have to wait > 16 ADC_CLK cycles, which with ADC_CLK = 100 KHz is 161 uS, however with fPFD being divided by 2 this may be 50 KHz, hence meaning > 320 uS for 16 ADC_CLK cycles - wait for 1 mS to ensure compliance
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f000 fd31 	bl	80017f0 <chThdSleep>
 8000d8e:	4c44      	ldr	r4, [pc, #272]	; (8000ea0 <main+0x810>)
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8000d90:	f000 fefe 	bl	8001b90 <chMtxLock.constprop.17>
    /*
     * Program ADF4355 with power-on register values, i.e. load registers 0, 4, 2, 1, 0, note that registers 4/2/1/0 use desired fPFD value upon 2nd load
     */

    spiAcquireBus(&SPID1);
    spiStart(&SPID1, &hs_spicfg);
 8000d94:	f001 f824 	bl	8001de0 <spiStart.constprop.10>
 8000d98:	f104 0514 	add.w	r5, r4, #20

    // Configure ADF4355 registers
    for(i = 0; i < 5; i++){
        spiSelect(&SPID1);
 8000d9c:	f001 f8e8 	bl	8001f70 <spiSelect.constprop.6>
        spiSend(&SPID1,4,ADF4355_power_on_register_values_buf2[i]);
 8000da0:	2004      	movs	r0, #4
 8000da2:	4621      	mov	r1, r4
 8000da4:	4404      	add	r4, r0
 8000da6:	f000 ffb3 	bl	8001d10 <spiSend.constprop.2>
        spiUnselect(&SPID1);
 8000daa:	f001 f919 	bl	8001fe0 <spiUnselect.constprop.4>

    spiAcquireBus(&SPID1);
    spiStart(&SPID1, &hs_spicfg);

    // Configure ADF4355 registers
    for(i = 0; i < 5; i++){
 8000dae:	42ac      	cmp	r4, r5
 8000db0:	d1f4      	bne.n	8000d9c <main+0x70c>
        spiSend(&SPID1,4,ADF4355_power_on_register_values_buf2[i]);
        spiUnselect(&SPID1);
    }

    //chThdSleepMilliseconds(200);
    spiStop(&SPID1);
 8000db2:	f001 f895 	bl	8001ee0 <spiStop.constprop.8>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8000db6:	f000 fe63 	bl	8001a80 <chMtxUnlock.constprop.16>
  ADF4355_init();
  chThdSleepMilliseconds(1000);
 8000dba:	f242 7010 	movw	r0, #10000	; 0x2710
 8000dbe:	f000 fd17 	bl	80017f0 <chThdSleep>
 8000dc2:	4c38      	ldr	r4, [pc, #224]	; (8000ea4 <main+0x814>)
    /*
     * Program ADA8282 U404/U405 with power-on register values
     */

    //Select multiplexed line for ADA8282 / U404
    palSetPad(GPIOG, GPIOG_SPI_NSS_S0);
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <main+0x800>)
 8000dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    palClearPad(GPIOG, GPIOG_SPI_NSS_S1);
 8000dca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    /*
     * Program ADA8282 U404/U405 with power-on register values
     */

    //Select multiplexed line for ADA8282 / U404
    palSetPad(GPIOG, GPIOG_SPI_NSS_S0);
 8000dce:	8319      	strh	r1, [r3, #24]
 8000dd0:	f104 0515 	add.w	r5, r4, #21
    palClearPad(GPIOG, GPIOG_SPI_NSS_S1);
 8000dd4:	835a      	strh	r2, [r3, #26]
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8000dd6:	f000 fedb 	bl	8001b90 <chMtxLock.constprop.17>

    // Configure ADA8282 / U404 registers
    for(i = 0; i < 7; i++){
      spiAcquireBus(&SPID1);
      spiStart(&SPID1, &hs_spicfg);
 8000dda:	f001 f801 	bl	8001de0 <spiStart.constprop.10>
      spiSelect(&SPID1);
 8000dde:	f001 f8c7 	bl	8001f70 <spiSelect.constprop.6>
      //spiSend(&SPID1,3,ADA8282_U404_power_on_register_values[i]);
      spiSend(&SPID1,3,ADA8282_U404_power_on_register_values[i]);
 8000de2:	2003      	movs	r0, #3
 8000de4:	4621      	mov	r1, r4
 8000de6:	4404      	add	r4, r0
 8000de8:	f000 ff92 	bl	8001d10 <spiSend.constprop.2>
      spiUnselect(&SPID1);
 8000dec:	f001 f8f8 	bl	8001fe0 <spiUnselect.constprop.4>
      //chThdSleepMilliseconds(200);
      spiStop(&SPID1);
 8000df0:	f001 f876 	bl	8001ee0 <spiStop.constprop.8>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8000df4:	f000 fe44 	bl	8001a80 <chMtxUnlock.constprop.16>
    //Select multiplexed line for ADA8282 / U404
    palSetPad(GPIOG, GPIOG_SPI_NSS_S0);
    palClearPad(GPIOG, GPIOG_SPI_NSS_S1);

    // Configure ADA8282 / U404 registers
    for(i = 0; i < 7; i++){
 8000df8:	42ac      	cmp	r4, r5
 8000dfa:	d1ec      	bne.n	8000dd6 <main+0x746>
      spiStop(&SPID1);
      spiReleaseBus(&SPID1);
    }

    //Select multiplexed line for ADA8282 / U405
        palSetPad(GPIOG, GPIOG_SPI_NSS_S0);
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <main+0x800>)
 8000dfe:	4c2a      	ldr	r4, [pc, #168]	; (8000ea8 <main+0x818>)
 8000e00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
        palSetPad(GPIOG, GPIOG_SPI_NSS_S1);
 8000e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
      spiStop(&SPID1);
      spiReleaseBus(&SPID1);
    }

    //Select multiplexed line for ADA8282 / U405
        palSetPad(GPIOG, GPIOG_SPI_NSS_S0);
 8000e08:	8319      	strh	r1, [r3, #24]
 8000e0a:	f104 0515 	add.w	r5, r4, #21
        palSetPad(GPIOG, GPIOG_SPI_NSS_S1);
 8000e0e:	831a      	strh	r2, [r3, #24]
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8000e10:	f000 febe 	bl	8001b90 <chMtxLock.constprop.17>

        // Configure ADA8282 / U405 registers
        for(i = 0; i < 7; i++){
          spiAcquireBus(&SPID1);
          spiStart(&SPID1, &hs_spicfg);
 8000e14:	f000 ffe4 	bl	8001de0 <spiStart.constprop.10>
          spiSelect(&SPID1);
 8000e18:	f001 f8aa 	bl	8001f70 <spiSelect.constprop.6>
          spiSend(&SPID1,3,ADA8282_U405_power_on_register_values[i]);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	4621      	mov	r1, r4
 8000e20:	4404      	add	r4, r0
 8000e22:	f000 ff75 	bl	8001d10 <spiSend.constprop.2>
          spiUnselect(&SPID1);
 8000e26:	f001 f8db 	bl	8001fe0 <spiUnselect.constprop.4>
          //chThdSleepMilliseconds(200);
          spiStop(&SPID1);
 8000e2a:	f001 f859 	bl	8001ee0 <spiStop.constprop.8>
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8000e2e:	f000 fe27 	bl	8001a80 <chMtxUnlock.constprop.16>
    //Select multiplexed line for ADA8282 / U405
        palSetPad(GPIOG, GPIOG_SPI_NSS_S0);
        palSetPad(GPIOG, GPIOG_SPI_NSS_S1);

        // Configure ADA8282 / U405 registers
        for(i = 0; i < 7; i++){
 8000e32:	42ac      	cmp	r4, r5
 8000e34:	d1ec      	bne.n	8000e10 <main+0x780>
  ADA8282_init();
  chThdSleepMilliseconds(1000);
 8000e36:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e3a:	f000 fcd9 	bl	80017f0 <chThdSleep>

//    AD9648_write_func();
//    chThdSleepMilliseconds(50);
//    AD9648_read_func();

    palSetPad(GPIOC, GPIOC_LED_SPI);
 8000e3e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8000e42:	4c1a      	ldr	r4, [pc, #104]	; (8000eac <main+0x81c>)
 8000e44:	462e      	mov	r6, r5
 8000e46:	8326      	strh	r6, [r4, #24]
    chThdSleepMilliseconds(500);
 8000e48:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e4c:	f000 fcd0 	bl	80017f0 <chThdSleep>
    palClearPad(GPIOC, GPIOC_LED_SPI);
 8000e50:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(500);
 8000e52:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e56:	f000 fccb 	bl	80017f0 <chThdSleep>
 8000e5a:	e7f4      	b.n	8000e46 <main+0x7b6>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <main+0x820>)
 8000e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e62:	e7fe      	b.n	8000e62 <main+0x7d2>
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
 8000e64:	4628      	mov	r0, r5
 8000e66:	f000 f9b3 	bl	80011d0 <chSchReadyI>
 8000e6a:	e721      	b.n	8000cb0 <main+0x620>
 8000e6c:	b672      	cpsid	i
 8000e6e:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <main+0x824>)
 8000e70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e72:	e7fe      	b.n	8000e72 <main+0x7e2>
 8000e74:	080020d0 	.word	0x080020d0
 8000e78:	20000e38 	.word	0x20000e38
 8000e7c:	20000ed0 	.word	0x20000ed0
 8000e80:	08000ee1 	.word	0x08000ee1
 8000e84:	08000291 	.word	0x08000291
 8000e88:	200008f8 	.word	0x200008f8
 8000e8c:	080020b4 	.word	0x080020b4
 8000e90:	40021800 	.word	0x40021800
 8000e94:	20000818 	.word	0x20000818
 8000e98:	200008a0 	.word	0x200008a0
 8000e9c:	20000844 	.word	0x20000844
 8000ea0:	20000874 	.word	0x20000874
 8000ea4:	20000800 	.word	0x20000800
 8000ea8:	20000888 	.word	0x20000888
 8000eac:	40020800 	.word	0x40020800
 8000eb0:	080020a4 	.word	0x080020a4
 8000eb4:	08002080 	.word	0x08002080
	...

08000ec0 <SVC_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000ec0:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8000ec4:	3320      	adds	r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000ec6:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f383 8811 	msr	BASEPRI, r3
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
	...

08000ee0 <_idle_thread.lto_priv.32>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000ee0:	e7fe      	b.n	8000ee0 <_idle_thread.lto_priv.32>
 8000ee2:	bf00      	nop
	...

08000ef0 <stSetAlarm>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000ef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef4:	68da      	ldr	r2, [r3, #12]
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000ef6:	0792      	lsls	r2, r2, #30
 8000ef8:	d501      	bpl.n	8000efe <stSetAlarm+0xe>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000efa:	6358      	str	r0, [r3, #52]	; 0x34
 8000efc:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efe:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000f00:	4b01      	ldr	r3, [pc, #4]	; (8000f08 <stSetAlarm+0x18>)
 8000f02:	4a02      	ldr	r2, [pc, #8]	; (8000f0c <stSetAlarm+0x1c>)
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f06:	e7fe      	b.n	8000f06 <stSetAlarm+0x16>
 8000f08:	200008f8 	.word	0x200008f8
 8000f0c:	08002240 	.word	0x08002240

08000f10 <_port_irq_epilogue>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000f10:	2320      	movs	r3, #32
 8000f12:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <_port_irq_epilogue+0x44>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8000f1e:	d102      	bne.n	8000f26 <_port_irq_epilogue+0x16>
 8000f20:	f383 8811 	msr	BASEPRI, r3
 8000f24:	4770      	bx	lr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000f26:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000f2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f2e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8000f32:	f1a3 0220 	sub.w	r2, r3, #32

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000f36:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8000f3a:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <_port_irq_epilogue+0x48>)
 8000f3c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 8000f3e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000f40:	6889      	ldr	r1, [r1, #8]
 8000f42:	6892      	ldr	r2, [r2, #8]
 8000f44:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000f46:	bf8c      	ite	hi
 8000f48:	4a04      	ldrhi	r2, [pc, #16]	; (8000f5c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000f4a:	4a05      	ldrls	r2, [pc, #20]	; (8000f60 <_port_irq_epilogue+0x50>)
 8000f4c:	f843 2c08 	str.w	r2, [r3, #-8]
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	200008f8 	.word	0x200008f8
 8000f5c:	080002a9 	.word	0x080002a9
 8000f60:	080002bc 	.word	0x080002bc
	...

08000f70 <_stats_increase_irq>:
/**
 * @brief   Increases the IRQ counter.
 */
void _stats_increase_irq(void) {

  ch.kernel_stats.n_irq++;
 8000f70:	4a03      	ldr	r2, [pc, #12]	; (8000f80 <_stats_increase_irq+0x10>)
 8000f72:	f8d2 34a8 	ldr.w	r3, [r2, #1192]	; 0x4a8
 8000f76:	3301      	adds	r3, #1
 8000f78:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200008f8 	.word	0x200008f8
	...

08000f90 <chTMChainMeasurementToX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <chTMChainMeasurementToX+0x3c>)

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000f92:	6842      	ldr	r2, [r0, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 *
 *
 * @xclass
 */
NOINLINE void chTMChainMeasurementToX(time_measurement_t *tmp1,
                                      time_measurement_t *tmp2) {
 8000f96:	b470      	push	{r4, r5, r6}

  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();
 8000f98:	608b      	str	r3, [r1, #8]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000f9a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000f9e:	6886      	ldr	r6, [r0, #8]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000fa0:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000fa2:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000fa4:	18e4      	adds	r4, r4, r3
 8000fa6:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000faa:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000fac:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000fae:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000fb0:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000fb2:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000fb6:	d805      	bhi.n	8000fc4 <chTMChainMeasurementToX+0x34>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8000fb8:	6802      	ldr	r2, [r0, #0]
 8000fba:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8000fbc:	bf38      	it	cc
 8000fbe:	6003      	strcc	r3, [r0, #0]
  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8000fc0:	bc70      	pop	{r4, r5, r6}
 8000fc2:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 8000fc4:	6043      	str	r3, [r0, #4]
  /* Starts new measurement.*/
  tmp2->last = chSysGetRealtimeCounterX();

  /* Stops previous measurement using the same time stamp.*/
  tm_stop(tmp1, tmp2->last, (rtcnt_t)0);
}
 8000fc6:	bc70      	pop	{r4, r5, r6}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e0001000 	.word	0xe0001000

08000fd0 <chTMStopMeasurementX>:
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000fd2:	4910      	ldr	r1, [pc, #64]	; (8001014 <chTMStopMeasurementX+0x44>)
 8000fd4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000fd6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000fd8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000fda:	f8d1 74a0 	ldr.w	r7, [r1, #1184]	; 0x4a0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000fde:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000fe0:	6841      	ldr	r1, [r0, #4]
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8000fe2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 8000fea:	18e4      	adds	r4, r4, r3
 8000fec:	f145 0500 	adc.w	r5, r5, #0

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000ff0:	3601      	adds	r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000ff2:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8000ff4:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000ff6:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8000ff8:	e9c0 4504 	strd	r4, r5, [r0, #16]
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
 8000ffc:	d805      	bhi.n	800100a <chTMStopMeasurementX+0x3a>
    tmp->worst = tmp->last;
  }
  else if (tmp->last < tmp->best) {
 8000ffe:	6802      	ldr	r2, [r0, #0]
 8001000:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8001002:	bf38      	it	cc
 8001004:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 8001006:	bcf0      	pop	{r4, r5, r6, r7}
 8001008:	4770      	bx	lr
  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800100a:	6043      	str	r3, [r0, #4]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800100c:	bcf0      	pop	{r4, r5, r6, r7}
 800100e:	4770      	bx	lr
 8001010:	e0001000 	.word	0xe0001000
 8001014:	200008f8 	.word	0x200008f8
	...

08001020 <_stats_stop_measure_crit_thd>:
/**
 * @brief   Stops the measurement of a thread critical zone.
 */
void _stats_stop_measure_crit_thd(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_thd);
 8001020:	4801      	ldr	r0, [pc, #4]	; (8001028 <_stats_stop_measure_crit_thd+0x8>)
 8001022:	f7ff bfd5 	b.w	8000fd0 <chTMStopMeasurementX>
 8001026:	bf00      	nop
 8001028:	20000da8 	.word	0x20000da8
 800102c:	00000000 	.word	0x00000000

08001030 <chTMStartMeasurementX>:
 8001030:	4b01      	ldr	r3, [pc, #4]	; (8001038 <chTMStartMeasurementX+0x8>)
 8001032:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8001034:	6083      	str	r3, [r0, #8]
 8001036:	4770      	bx	lr
 8001038:	e0001000 	.word	0xe0001000
 800103c:	00000000 	.word	0x00000000

08001040 <_stats_start_measure_crit_thd>:
/**
 * @brief   Starts the measurement of a thread critical zone.
 */
void _stats_start_measure_crit_thd(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_thd);
 8001040:	4801      	ldr	r0, [pc, #4]	; (8001048 <_stats_start_measure_crit_thd+0x8>)
 8001042:	f7ff bff5 	b.w	8001030 <chTMStartMeasurementX>
 8001046:	bf00      	nop
 8001048:	20000da8 	.word	0x20000da8
 800104c:	00000000 	.word	0x00000000

08001050 <_dbg_trace>:
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 8001050:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <_dbg_trace+0x34>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8001052:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001056:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {
 8001058:	b410      	push	{r4}
 800105a:	6a4c      	ldr	r4, [r1, #36]	; 0x24

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
 800105c:	6991      	ldr	r1, [r2, #24]
 800105e:	6059      	str	r1, [r3, #4]
 *
 * @notapi
 */
void _dbg_trace(thread_t *otp) {

  ch.dbg.trace_buffer.tb_ptr->se_time   = chVTGetSystemTimeX();
 8001060:	601c      	str	r4, [r3, #0]
  ch.dbg.trace_buffer.tb_ptr->se_tp     = currp;
  ch.dbg.trace_buffer.tb_ptr->se_wtobjp = otp->p_u.wtobjp;
 8001062:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001064:	6099      	str	r1, [r3, #8]
  ch.dbg.trace_buffer.tb_ptr->se_state  = (uint8_t)otp->p_state;
 8001066:	f890 1020 	ldrb.w	r1, [r0, #32]
 800106a:	7319      	strb	r1, [r3, #12]
  if (++ch.dbg.trace_buffer.tb_ptr >=
 800106c:	3310      	adds	r3, #16
 800106e:	f502 6188 	add.w	r1, r2, #1088	; 0x440
 8001072:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.tb_buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.tb_ptr = &ch.dbg.trace_buffer.tb_buffer[0];
 8001074:	bf28      	it	cs
 8001076:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 800107a:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 800107c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	200008f8 	.word	0x200008f8
	...

08001090 <chSchDoRescheduleAhead>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 8001090:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp, *cp;

  otp = currp;
 8001092:	4d1b      	ldr	r5, [pc, #108]	; (8001100 <chSchDoRescheduleAhead+0x70>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001094:	682a      	ldr	r2, [r5, #0]
 8001096:	69ac      	ldr	r4, [r5, #24]

  tqp->p_next = tp->p_next;
 8001098:	6813      	ldr	r3, [r2, #0]
 800109a:	68a1      	ldr	r1, [r4, #8]
 800109c:	602b      	str	r3, [r5, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800109e:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 80010a0:	2000      	movs	r0, #0
  tqp->p_next->p_prev = (thread_t *)tqp;
 80010a2:	605d      	str	r5, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80010a4:	f882 6020 	strb.w	r6, [r2, #32]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80010a8:	61aa      	str	r2, [r5, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 80010aa:	f884 0020 	strb.w	r0, [r4, #32]
 80010ae:	e000      	b.n	80010b2 <chSchDoRescheduleAhead+0x22>
 80010b0:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	428a      	cmp	r2, r1
 80010b6:	d8fb      	bhi.n	80010b0 <chSchDoRescheduleAhead+0x20>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80010bc:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80010be:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 80010c0:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80010c2:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
 80010c4:	f7ff ffc4 	bl	8001050 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 80010c8:	f8d5 34ac 	ldr.w	r3, [r5, #1196]	; 0x4ac
 80010cc:	69a9      	ldr	r1, [r5, #24]
 80010ce:	4e0c      	ldr	r6, [pc, #48]	; (8001100 <chSchDoRescheduleAhead+0x70>)
 80010d0:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 80010d2:	3148      	adds	r1, #72	; 0x48
 80010d4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 80010d8:	f8c5 34ac 	str.w	r3, [r5, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 80010dc:	f7ff ff58 	bl	8000f90 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80010e0:	f3ef 8309 	mrs	r3, PSP
 80010e4:	69e2      	ldr	r2, [r4, #28]
 80010e6:	3b24      	subs	r3, #36	; 0x24
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d805      	bhi.n	80010f8 <chSchDoRescheduleAhead+0x68>
 80010ec:	69b0      	ldr	r0, [r6, #24]
 80010ee:	4621      	mov	r1, r4
}
 80010f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80010f4:	f7ff b8c4 	b.w	8000280 <_port_switch>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f8:	b672      	cpsid	i
 80010fa:	4b02      	ldr	r3, [pc, #8]	; (8001104 <chSchDoRescheduleAhead+0x74>)
 80010fc:	62f3      	str	r3, [r6, #44]	; 0x2c
 80010fe:	e7fe      	b.n	80010fe <chSchDoRescheduleAhead+0x6e>
 8001100:	200008f8 	.word	0x200008f8
 8001104:	080020a4 	.word	0x080020a4
	...

08001110 <chSchDoReschedule>:
    chSchDoRescheduleAhead();
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
 8001110:	f7ff bfbe 	b.w	8001090 <chSchDoRescheduleAhead>
	...

08001120 <chDbgCheckClassS>:
 *
 * @api
 */
void chDbgCheckClassS(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <chDbgCheckClassS+0x18>)
 8001122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001124:	b91a      	cbnz	r2, 800112e <chDbgCheckClassS+0xe>
 8001126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001128:	2a00      	cmp	r2, #0
 800112a:	dd00      	ble.n	800112e <chDbgCheckClassS+0xe>
 800112c:	4770      	bx	lr
 800112e:	b672      	cpsid	i
 8001130:	4a02      	ldr	r2, [pc, #8]	; (800113c <chDbgCheckClassS+0x1c>)
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
 8001134:	e7fe      	b.n	8001134 <chDbgCheckClassS+0x14>
 8001136:	bf00      	nop
 8001138:	200008f8 	.word	0x200008f8
 800113c:	080021d0 	.word	0x080021d0

08001140 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001140:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001142:	4c16      	ldr	r4, [pc, #88]	; (800119c <chSchGoSleepS+0x5c>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001144:	4606      	mov	r6, r0
  thread_t *otp;

  chDbgCheckClassS();
 8001146:	f7ff ffeb 	bl	8001120 <chDbgCheckClassS>
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 800114a:	6823      	ldr	r3, [r4, #0]

  otp = currp;
 800114c:	69a5      	ldr	r5, [r4, #24]

  tqp->p_next = tp->p_next;
 800114e:	681a      	ldr	r2, [r3, #0]
  otp->p_state = newstate;
 8001150:	f885 6020 	strb.w	r6, [r5, #32]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001154:	2101      	movs	r1, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001156:	6054      	str	r4, [r2, #4]
  chSysSwitch(currp, otp);
 8001158:	4628      	mov	r0, r5
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800115a:	f883 1020 	strb.w	r1, [r3, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800115e:	6022      	str	r2, [r4, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001160:	61a3      	str	r3, [r4, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8001162:	f7ff ff75 	bl	8001050 <_dbg_trace>
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8001166:	f8d4 34ac 	ldr.w	r3, [r4, #1196]	; 0x4ac
 800116a:	69a1      	ldr	r1, [r4, #24]
 800116c:	3301      	adds	r3, #1
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 800116e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8001172:	3148      	adds	r1, #72	; 0x48
 * @param[in] ntp       the thread to be switched in
 * @param[in] otp       the thread to be switched out
 */
void _stats_ctxswc(thread_t *ntp, thread_t *otp) {

  ch.kernel_stats.n_ctxswc++;
 8001174:	f8c4 34ac 	str.w	r3, [r4, #1196]	; 0x4ac
  chTMChainMeasurementToX(&otp->p_stats, &ntp->p_stats);
 8001178:	f7ff ff0a 	bl	8000f90 <chTMChainMeasurementToX>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800117c:	f3ef 8309 	mrs	r3, PSP
 8001180:	69ea      	ldr	r2, [r5, #28]
 8001182:	3b24      	subs	r3, #36	; 0x24
 8001184:	429a      	cmp	r2, r3
 8001186:	d805      	bhi.n	8001194 <chSchGoSleepS+0x54>
 8001188:	69a0      	ldr	r0, [r4, #24]
 800118a:	4629      	mov	r1, r5
}
 800118c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 8001190:	f7ff b876 	b.w	8000280 <_port_switch>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
 8001196:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <chSchGoSleepS+0x60>)
 8001198:	62e3      	str	r3, [r4, #44]	; 0x2c
 800119a:	e7fe      	b.n	800119a <chSchGoSleepS+0x5a>
 800119c:	200008f8 	.word	0x200008f8
 80011a0:	080020a4 	.word	0x080020a4
	...

080011b0 <chDbgCheckClassI>:
 *
 * @api
 */
void chDbgCheckClassI(void) {

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <chDbgCheckClassI+0x18>)
 80011b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b4:	2a00      	cmp	r2, #0
 80011b6:	db03      	blt.n	80011c0 <chDbgCheckClassI+0x10>
 80011b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	dd00      	ble.n	80011c0 <chDbgCheckClassI+0x10>
 80011be:	4770      	bx	lr
 80011c0:	b672      	cpsid	i
 80011c2:	4a02      	ldr	r2, [pc, #8]	; (80011cc <chDbgCheckClassI+0x1c>)
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80011c6:	e7fe      	b.n	80011c6 <chDbgCheckClassI+0x16>
 80011c8:	200008f8 	.word	0x200008f8
 80011cc:	080021d8 	.word	0x080021d8

080011d0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 80011d0:	b510      	push	{r4, lr}
 80011d2:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 80011d4:	f7ff ffec 	bl	80011b0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 80011d8:	b1cc      	cbz	r4, 800120e <chSchReadyI+0x3e>
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
 80011da:	f894 3020 	ldrb.w	r3, [r4, #32]
 80011de:	b18b      	cbz	r3, 8001204 <chSchReadyI+0x34>
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d00f      	beq.n	8001204 <chSchReadyI+0x34>
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80011e4:	2200      	movs	r2, #0
 80011e6:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <chSchReadyI+0x48>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80011ea:	f884 2020 	strb.w	r2, [r4, #32]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80011ee:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	428a      	cmp	r2, r1
 80011f4:	d2fb      	bcs.n	80011ee <chSchReadyI+0x1e>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80011fa:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 80011fc:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80011fe:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001200:	605c      	str	r4, [r3, #4]

  return tp;
}
 8001202:	bd10      	pop	{r4, pc}
 8001204:	b672      	cpsid	i
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <chSchReadyI+0x48>)
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <chSchReadyI+0x4c>)
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
 800120c:	e7fe      	b.n	800120c <chSchReadyI+0x3c>
 800120e:	b672      	cpsid	i
 8001210:	4b01      	ldr	r3, [pc, #4]	; (8001218 <chSchReadyI+0x48>)
 8001212:	4a02      	ldr	r2, [pc, #8]	; (800121c <chSchReadyI+0x4c>)
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
 8001216:	e7fe      	b.n	8001216 <chSchReadyI+0x46>
 8001218:	200008f8 	.word	0x200008f8
 800121c:	08002220 	.word	0x08002220

08001220 <_dbg_check_leave_isr>:

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001220:	2320      	movs	r3, #32
 8001222:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void _dbg_check_leave_isr(void) {

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_dbg_check_leave_isr+0x24>)
 8001228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800122a:	2a00      	cmp	r2, #0
 800122c:	dd01      	ble.n	8001232 <_dbg_check_leave_isr+0x12>
 800122e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001230:	b119      	cbz	r1, 800123a <_dbg_check_leave_isr+0x1a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001232:	b672      	cpsid	i
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <_dbg_check_leave_isr+0x28>)
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
 8001238:	e7fe      	b.n	8001238 <_dbg_check_leave_isr+0x18>
    chSysHalt("SV#9");
  }
  ch.dbg.isr_cnt--;
 800123a:	3a01      	subs	r2, #1
 800123c:	631a      	str	r2, [r3, #48]	; 0x30

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800123e:	f381 8811 	msr	BASEPRI, r1
 8001242:	4770      	bx	lr
 8001244:	200008f8 	.word	0x200008f8
 8001248:	080021e0 	.word	0x080021e0
 800124c:	00000000 	.word	0x00000000

08001250 <_dbg_check_enter_isr>:
 8001250:	2320      	movs	r3, #32
 8001252:	f383 8811 	msr	BASEPRI, r3
 * @notapi
 */
void _dbg_check_enter_isr(void) {

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <_dbg_check_enter_isr+0x24>)
 8001258:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800125a:	2a00      	cmp	r2, #0
 800125c:	db01      	blt.n	8001262 <_dbg_check_enter_isr+0x12>
 800125e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001260:	b119      	cbz	r1, 800126a <_dbg_check_enter_isr+0x1a>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001262:	b672      	cpsid	i
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <_dbg_check_enter_isr+0x28>)
 8001266:	62da      	str	r2, [r3, #44]	; 0x2c
 8001268:	e7fe      	b.n	8001268 <_dbg_check_enter_isr+0x18>
    chSysHalt("SV#8");
  }
  ch.dbg.isr_cnt++;
 800126a:	3201      	adds	r2, #1
 800126c:	631a      	str	r2, [r3, #48]	; 0x30

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800126e:	f381 8811 	msr	BASEPRI, r1
 8001272:	4770      	bx	lr
 8001274:	200008f8 	.word	0x200008f8
 8001278:	080021e8 	.word	0x080021e8
 800127c:	00000000 	.word	0x00000000

08001280 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector150) {
 8001280:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001282:	f7ff fe75 	bl	8000f70 <_stats_increase_irq>
 8001286:	f7ff ffe3 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <Vector150+0x30>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <Vector150+0x34>)
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800128e:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 8001290:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001292:	0989      	lsrs	r1, r1, #6
 8001294:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6;
 8001298:	018c      	lsls	r4, r1, #6
 800129a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 800129c:	b10a      	cbz	r2, 80012a2 <Vector150+0x22>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800129e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 80012a0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80012a2:	f7ff ffbd 	bl	8001220 <_dbg_check_leave_isr>
}
 80012a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80012aa:	f7ff be31 	b.w	8000f10 <_port_irq_epilogue>
 80012ae:	bf00      	nop
 80012b0:	40026400 	.word	0x40026400
 80012b4:	20000f04 	.word	0x20000f04
	...

080012c0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 80012c0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80012c2:	f7ff fe55 	bl	8000f70 <_stats_increase_irq>
 80012c6:	f7ff ffc3 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <Vector130+0x2c>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <Vector130+0x30>)
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 80012ce:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 80012d0:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(Vector130) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 80012d2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 80012d6:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 80012d8:	b10a      	cbz	r2, 80012de <Vector130+0x1e>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 80012da:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80012dc:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80012de:	f7ff ff9f 	bl	8001220 <_dbg_check_leave_isr>
}
 80012e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80012e6:	f7ff be13 	b.w	8000f10 <_port_irq_epilogue>
 80012ea:	bf00      	nop
 80012ec:	40026400 	.word	0x40026400
 80012f0:	20000f04 	.word	0x20000f04
	...

08001300 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector12C) {
 8001300:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001302:	f7ff fe35 	bl	8000f70 <_stats_increase_irq>
 8001306:	f7ff ffa3 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <Vector12C+0x30>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800130c:	4809      	ldr	r0, [pc, #36]	; (8001334 <Vector12C+0x34>)
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800130e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 8001310:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001312:	0d89      	lsrs	r1, r1, #22
 8001314:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22;
 8001318:	058c      	lsls	r4, r1, #22
 800131a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 800131c:	b10a      	cbz	r2, 8001322 <Vector12C+0x22>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 800131e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8001320:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001322:	f7ff ff7d 	bl	8001220 <_dbg_check_leave_isr>
}
 8001326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800132a:	f7ff bdf1 	b.w	8000f10 <_port_irq_epilogue>
 800132e:	bf00      	nop
 8001330:	40026400 	.word	0x40026400
 8001334:	20000f04 	.word	0x20000f04
	...

08001340 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector128) {
 8001340:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001342:	f7ff fe15 	bl	8000f70 <_stats_increase_irq>
 8001346:	f7ff ff83 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <Vector128+0x30>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <Vector128+0x34>)
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800134e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 8001350:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001352:	0c09      	lsrs	r1, r1, #16
 8001354:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16;
 8001358:	040c      	lsls	r4, r1, #16
 800135a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800135c:	b10a      	cbz	r2, 8001362 <Vector128+0x22>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800135e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8001360:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001362:	f7ff ff5d 	bl	8001220 <_dbg_check_leave_isr>
}
 8001366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800136a:	f7ff bdd1 	b.w	8000f10 <_port_irq_epilogue>
 800136e:	bf00      	nop
 8001370:	40026400 	.word	0x40026400
 8001374:	20000f04 	.word	0x20000f04
	...

08001380 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector124) {
 8001380:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001382:	f7ff fdf5 	bl	8000f70 <_stats_increase_irq>
 8001386:	f7ff ff63 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <Vector124+0x30>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <Vector124+0x34>)
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800138e:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 8001390:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001392:	0989      	lsrs	r1, r1, #6
 8001394:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6;
 8001398:	018c      	lsls	r4, r1, #6
 800139a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800139c:	b10a      	cbz	r2, 80013a2 <Vector124+0x22>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800139e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013a0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80013a2:	f7ff ff3d 	bl	8001220 <_dbg_check_leave_isr>
}
 80013a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80013aa:	f7ff bdb1 	b.w	8000f10 <_port_irq_epilogue>
 80013ae:	bf00      	nop
 80013b0:	40026400 	.word	0x40026400
 80013b4:	20000f04 	.word	0x20000f04
	...

080013c0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 80013c0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80013c2:	f7ff fdd5 	bl	8000f70 <_stats_increase_irq>
 80013c6:	f7ff ff43 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <Vector120+0x2c>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <Vector120+0x30>)
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 80013ce:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 80013d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(Vector120) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 80013d2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 80013d6:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 80013d8:	b10a      	cbz	r2, 80013de <Vector120+0x1e>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 80013da:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80013dc:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80013de:	f7ff ff1f 	bl	8001220 <_dbg_check_leave_isr>
}
 80013e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80013e6:	f7ff bd93 	b.w	8000f10 <_port_irq_epilogue>
 80013ea:	bf00      	nop
 80013ec:	40026400 	.word	0x40026400
 80013f0:	20000f04 	.word	0x20000f04
	...

08001400 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorFC) {
 8001400:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001402:	f7ff fdb5 	bl	8000f70 <_stats_increase_irq>
 8001406:	f7ff ff23 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <VectorFC+0x30>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800140c:	4809      	ldr	r0, [pc, #36]	; (8001434 <VectorFC+0x34>)
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800140e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 8001410:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 8001412:	0d89      	lsrs	r1, r1, #22
 8001414:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22;
 8001418:	058c      	lsls	r4, r1, #22
 800141a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 800141c:	b10a      	cbz	r2, 8001422 <VectorFC+0x22>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800141e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8001420:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001422:	f7ff fefd 	bl	8001220 <_dbg_check_leave_isr>
}
 8001426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800142a:	f7ff bd71 	b.w	8000f10 <_port_irq_epilogue>
 800142e:	bf00      	nop
 8001430:	40026000 	.word	0x40026000
 8001434:	20000f04 	.word	0x20000f04
	...

08001440 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector84) {
 8001440:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001442:	f7ff fd95 	bl	8000f70 <_stats_increase_irq>
 8001446:	f7ff ff03 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <Vector84+0x30>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800144c:	4809      	ldr	r0, [pc, #36]	; (8001474 <Vector84+0x34>)
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800144e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 8001450:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 8001452:	0c09      	lsrs	r1, r1, #16
 8001454:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16;
 8001458:	040c      	lsls	r4, r1, #16
 800145a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800145c:	b10a      	cbz	r2, 8001462 <Vector84+0x22>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800145e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001460:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001462:	f7ff fedd 	bl	8001220 <_dbg_check_leave_isr>
}
 8001466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800146a:	f7ff bd51 	b.w	8000f10 <_port_irq_epilogue>
 800146e:	bf00      	nop
 8001470:	40026000 	.word	0x40026000
 8001474:	20000f04 	.word	0x20000f04
	...

08001480 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector80) {
 8001480:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001482:	f7ff fd75 	bl	8000f70 <_stats_increase_irq>
 8001486:	f7ff fee3 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <Vector80+0x30>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <Vector80+0x34>)
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800148e:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 8001490:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 8001492:	0989      	lsrs	r1, r1, #6
 8001494:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6;
 8001498:	018c      	lsls	r4, r1, #6
 800149a:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800149c:	b10a      	cbz	r2, 80014a2 <Vector80+0x22>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800149e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80014a0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80014a2:	f7ff febd 	bl	8001220 <_dbg_check_leave_isr>
}
 80014a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80014aa:	f7ff bd31 	b.w	8000f10 <_port_irq_epilogue>
 80014ae:	bf00      	nop
 80014b0:	40026000 	.word	0x40026000
 80014b4:	20000f04 	.word	0x20000f04
	...

080014c0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 80014c0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80014c2:	f7ff fd55 	bl	8000f70 <_stats_increase_irq>
 80014c6:	f7ff fec3 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <Vector7C+0x2c>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 80014cc:	4808      	ldr	r0, [pc, #32]	; (80014f0 <Vector7C+0x30>)
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 80014ce:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 80014d0:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(Vector7C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 80014d2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 80014d6:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 80014d8:	b10a      	cbz	r2, 80014de <Vector7C+0x1e>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 80014da:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80014dc:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80014de:	f7ff fe9f 	bl	8001220 <_dbg_check_leave_isr>
}
 80014e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80014e6:	f7ff bd13 	b.w	8000f10 <_port_irq_epilogue>
 80014ea:	bf00      	nop
 80014ec:	40026000 	.word	0x40026000
 80014f0:	20000f04 	.word	0x20000f04
	...

08001500 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector78) {
 8001500:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001502:	f7ff fd35 	bl	8000f70 <_stats_increase_irq>
 8001506:	f7ff fea3 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <Vector78+0x30>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <Vector78+0x34>)
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800150e:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 8001510:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 8001512:	0d89      	lsrs	r1, r1, #22
 8001514:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22;
 8001518:	058c      	lsls	r4, r1, #22
 800151a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 800151c:	b10a      	cbz	r2, 8001522 <Vector78+0x22>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800151e:	69c0      	ldr	r0, [r0, #28]
 8001520:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001522:	f7ff fe7d 	bl	8001220 <_dbg_check_leave_isr>
}
 8001526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800152a:	f7ff bcf1 	b.w	8000f10 <_port_irq_epilogue>
 800152e:	bf00      	nop
 8001530:	40026000 	.word	0x40026000
 8001534:	20000f04 	.word	0x20000f04
	...

08001540 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector74) {
 8001540:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001542:	f7ff fd15 	bl	8000f70 <_stats_increase_irq>
 8001546:	f7ff fe83 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <Vector74+0x30>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <Vector74+0x34>)
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800154e:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 8001550:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 8001552:	0c09      	lsrs	r1, r1, #16
 8001554:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16;
 8001558:	040c      	lsls	r4, r1, #16
 800155a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800155c:	b10a      	cbz	r2, 8001562 <Vector74+0x22>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800155e:	6940      	ldr	r0, [r0, #20]
 8001560:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8001562:	f7ff fe5d 	bl	8001220 <_dbg_check_leave_isr>
}
 8001566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800156a:	f7ff bcd1 	b.w	8000f10 <_port_irq_epilogue>
 800156e:	bf00      	nop
 8001570:	40026000 	.word	0x40026000
 8001574:	20000f04 	.word	0x20000f04
	...

08001580 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector70) {
 8001580:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 8001582:	f7ff fcf5 	bl	8000f70 <_stats_increase_irq>
 8001586:	f7ff fe63 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <Vector70+0x30>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800158c:	4809      	ldr	r0, [pc, #36]	; (80015b4 <Vector70+0x34>)
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800158e:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 8001590:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 8001592:	0989      	lsrs	r1, r1, #6
 8001594:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6;
 8001598:	018c      	lsls	r4, r1, #6
 800159a:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800159c:	b10a      	cbz	r2, 80015a2 <Vector70+0x22>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800159e:	68c0      	ldr	r0, [r0, #12]
 80015a0:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80015a2:	f7ff fe3d 	bl	8001220 <_dbg_check_leave_isr>
}
 80015a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80015aa:	f7ff bcb1 	b.w	8000f10 <_port_irq_epilogue>
 80015ae:	bf00      	nop
 80015b0:	40026000 	.word	0x40026000
 80015b4:	20000f04 	.word	0x20000f04
	...

080015c0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 80015c0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
 80015c2:	f7ff fcd5 	bl	8000f70 <_stats_increase_irq>
 80015c6:	f7ff fe43 	bl	8001250 <_dbg_check_enter_isr>

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <Vector6C+0x2c>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <Vector6C+0x30>)
OSAL_IRQ_HANDLER(Vector6C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 80015ce:	6819      	ldr	r1, [r3, #0]
 80015d0:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 80015d4:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	b10b      	cbz	r3, 80015de <Vector6C+0x1e>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 80015da:	6850      	ldr	r0, [r2, #4]
 80015dc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 80015de:	f7ff fe1f 	bl	8001220 <_dbg_check_leave_isr>
}
 80015e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 80015e6:	f7ff bc93 	b.w	8000f10 <_port_irq_epilogue>
 80015ea:	bf00      	nop
 80015ec:	40026000 	.word	0x40026000
 80015f0:	20000f04 	.word	0x20000f04
	...

08001600 <_dbg_check_unlock_from_isr>:
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <_dbg_check_unlock_from_isr+0x1c>)
 8001602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001604:	2a00      	cmp	r2, #0
 8001606:	dd05      	ble.n	8001614 <_dbg_check_unlock_from_isr+0x14>
 8001608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800160a:	2a00      	cmp	r2, #0
 800160c:	dd02      	ble.n	8001614 <_dbg_check_unlock_from_isr+0x14>
    chSysHalt("SV#7");
  }
  _dbg_leave_lock();
 800160e:	2200      	movs	r2, #0
 8001610:	635a      	str	r2, [r3, #52]	; 0x34
 8001612:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001614:	b672      	cpsid	i
 8001616:	4a02      	ldr	r2, [pc, #8]	; (8001620 <_dbg_check_unlock_from_isr+0x20>)
 8001618:	62da      	str	r2, [r3, #44]	; 0x2c
 800161a:	e7fe      	b.n	800161a <_dbg_check_unlock_from_isr+0x1a>
 800161c:	200008f8 	.word	0x200008f8
 8001620:	080021f0 	.word	0x080021f0
	...

08001630 <_dbg_check_lock_from_isr>:
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <_dbg_check_lock_from_isr+0x1c>)
 8001632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001634:	2a00      	cmp	r2, #0
 8001636:	dd01      	ble.n	800163c <_dbg_check_lock_from_isr+0xc>
 8001638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163a:	b11a      	cbz	r2, 8001644 <_dbg_check_lock_from_isr+0x14>
 800163c:	b672      	cpsid	i
 800163e:	4a04      	ldr	r2, [pc, #16]	; (8001650 <_dbg_check_lock_from_isr+0x20>)
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
 8001642:	e7fe      	b.n	8001642 <_dbg_check_lock_from_isr+0x12>
    chSysHalt("SV#6");
  }
  _dbg_enter_lock();
 8001644:	2201      	movs	r2, #1
 8001646:	635a      	str	r2, [r3, #52]	; 0x34
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200008f8 	.word	0x200008f8
 8001650:	080021f8 	.word	0x080021f8
	...

08001660 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8001660:	b538      	push	{r3, r4, r5, lr}
 8001662:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001664:	2320      	movs	r3, #32
 8001666:	f383 8811 	msr	BASEPRI, r3
/**
 * @brief   Starts the measurement of an ISR critical zone.
 */
void _stats_start_measure_crit_isr(void) {

  chTMStartMeasurementX(&ch.kernel_stats.m_crit_isr);
 800166a:	4819      	ldr	r0, [pc, #100]	; (80016d0 <wakeup+0x70>)
 800166c:	f7ff fce0 	bl	8001030 <chTMStartMeasurementX>
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8001670:	f7ff ffde 	bl	8001630 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8001674:	f894 3020 	ldrb.w	r3, [r4, #32]
 8001678:	2b07      	cmp	r3, #7
 800167a:	d810      	bhi.n	800169e <wakeup+0x3e>
 800167c:	e8df f003 	tbb	[pc, r3]
 8001680:	1e0f0f15 	.word	0x1e0f0f15
 8001684:	0a0f040a 	.word	0x0a0f040a
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8001688:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 800168a:	f7ff fd91 	bl	80011b0 <chDbgCheckClassI>

  sp->s_cnt++;
 800168e:	68ab      	ldr	r3, [r5, #8]
 8001690:	3301      	adds	r3, #1
 8001692:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001694:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001698:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff fd93 	bl	80011d0 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80016aa:	f7ff ffa9 	bl	8001600 <_dbg_check_unlock_from_isr>
/**
 * @brief   Stops the measurement of an ISR critical zone.
 */
void _stats_stop_measure_crit_isr(void) {

  chTMStopMeasurementX(&ch.kernel_stats.m_crit_isr);
 80016ae:	4808      	ldr	r0, [pc, #32]	; (80016d0 <wakeup+0x70>)
 80016b0:	f7ff fc8e 	bl	8000fd0 <chTMStopMeasurementX>
 80016b4:	2300      	movs	r3, #0
 80016b6:	f383 8811 	msr	BASEPRI, r3
 80016ba:	bd38      	pop	{r3, r4, r5, pc}
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80016bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 80016c8:	4620      	mov	r0, r4
 80016ca:	f7ff fd81 	bl	80011d0 <chSchReadyI>
 80016ce:	e7ec      	b.n	80016aa <wakeup+0x4a>
 80016d0:	20000dc0 	.word	0x20000dc0
	...

080016e0 <_dbg_check_unlock>:
 *
 * @notapi
 */
void _dbg_check_unlock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <_dbg_check_unlock+0x18>)
 80016e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e4:	b922      	cbnz	r2, 80016f0 <_dbg_check_unlock+0x10>
 80016e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016e8:	2900      	cmp	r1, #0
 80016ea:	dd01      	ble.n	80016f0 <_dbg_check_unlock+0x10>
    chSysHalt("SV#5");
  }
  _dbg_leave_lock();
 80016ec:	635a      	str	r2, [r3, #52]	; 0x34
 80016ee:	4770      	bx	lr
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
 80016f2:	4a02      	ldr	r2, [pc, #8]	; (80016fc <_dbg_check_unlock+0x1c>)
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016f6:	e7fe      	b.n	80016f6 <_dbg_check_unlock+0x16>
 80016f8:	200008f8 	.word	0x200008f8
 80016fc:	08002200 	.word	0x08002200

08001700 <_dbg_check_lock>:
 *
 * @notapi
 */
void _dbg_check_lock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <_dbg_check_lock+0x18>)
 8001702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001704:	b90a      	cbnz	r2, 800170a <_dbg_check_lock+0xa>
 8001706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001708:	b11a      	cbz	r2, 8001712 <_dbg_check_lock+0x12>
 800170a:	b672      	cpsid	i
 800170c:	4a03      	ldr	r2, [pc, #12]	; (800171c <_dbg_check_lock+0x1c>)
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001710:	e7fe      	b.n	8001710 <_dbg_check_lock+0x10>
    chSysHalt("SV#4");
  }
  _dbg_enter_lock();
 8001712:	2201      	movs	r2, #1
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
 8001716:	4770      	bx	lr
 8001718:	200008f8 	.word	0x200008f8
 800171c:	08002208 	.word	0x08002208

08001720 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8001720:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001722:	2320      	movs	r3, #32
 8001724:	4604      	mov	r4, r0
 8001726:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 800172a:	f7ff fc89 	bl	8001040 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 800172e:	f7ff ffe7 	bl	8001700 <_dbg_check_lock>
 * @iclass
 */
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();
 8001732:	f7ff fd3d 	bl	80011b0 <chDbgCheckClassI>

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001736:	4812      	ldr	r0, [pc, #72]	; (8001780 <chCoreAlloc+0x60>)
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <chCoreAlloc+0x64>)
 800173a:	6802      	ldr	r2, [r0, #0]
 800173c:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 800173e:	1de3      	adds	r3, r4, #7
 8001740:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001744:	1a89      	subs	r1, r1, r2
 8001746:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 8001748:	bf9d      	ittte	ls
 800174a:	189b      	addls	r3, r3, r2
 800174c:	6003      	strls	r3, [r0, #0]

  return p;
 800174e:	4614      	movls	r4, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8001750:	2400      	movhi	r4, #0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001752:	f7ff ffc5 	bl	80016e0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001756:	f7ff fc63 	bl	8001020 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <chCoreAlloc+0x68>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d004      	beq.n	800176c <chCoreAlloc+0x4c>
 8001762:	6999      	ldr	r1, [r3, #24]
 8001764:	6892      	ldr	r2, [r2, #8]
 8001766:	6889      	ldr	r1, [r1, #8]
 8001768:	4291      	cmp	r1, r2
 800176a:	d304      	bcc.n	8001776 <chCoreAlloc+0x56>
 800176c:	2300      	movs	r3, #0
 800176e:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 8001772:	4620      	mov	r0, r4
 8001774:	bd10      	pop	{r4, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001776:	b672      	cpsid	i
 8001778:	4a04      	ldr	r2, [pc, #16]	; (800178c <chCoreAlloc+0x6c>)
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
 800177c:	e7fe      	b.n	800177c <chCoreAlloc+0x5c>
 800177e:	bf00      	nop
 8001780:	200008c0 	.word	0x200008c0
 8001784:	200008c8 	.word	0x200008c8
 8001788:	200008f8 	.word	0x200008f8
 800178c:	080021c0 	.word	0x080021c0

08001790 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8001790:	b508      	push	{r3, lr}
 8001792:	4606      	mov	r6, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001794:	2320      	movs	r3, #32
 8001796:	f383 8811 	msr	BASEPRI, r3
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 800179a:	4d11      	ldr	r5, [pc, #68]	; (80017e0 <chThdExit+0x50>)
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 800179c:	f7ff fc50 	bl	8001040 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 80017a0:	f7ff ffae 	bl	8001700 <_dbg_check_lock>
 80017a4:	69ac      	ldr	r4, [r5, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80017a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 80017a8:	6266      	str	r6, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80017aa:	f104 0628 	add.w	r6, r4, #40	; 0x28
 80017ae:	42b0      	cmp	r0, r6
 80017b0:	d006      	beq.n	80017c0 <chThdExit+0x30>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 80017b2:	6802      	ldr	r2, [r0, #0]
 80017b4:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 80017b6:	f7ff fd0b 	bl	80011d0 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80017ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80017bc:	42b0      	cmp	r0, r6
 80017be:	d1f8      	bne.n	80017b2 <chThdExit+0x22>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80017c0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80017c4:	079b      	lsls	r3, r3, #30
 80017c6:	d104      	bne.n	80017d2 <chThdExit+0x42>
    REG_REMOVE(tp);
 80017c8:	6963      	ldr	r3, [r4, #20]
 80017ca:	6922      	ldr	r2, [r4, #16]
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	6922      	ldr	r2, [r4, #16]
 80017d0:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80017d2:	200f      	movs	r0, #15
 80017d4:	f7ff fcb4 	bl	8001140 <chSchGoSleepS>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
 80017da:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <chThdExit+0x54>)
 80017dc:	62eb      	str	r3, [r5, #44]	; 0x2c
 80017de:	e7fe      	b.n	80017de <chThdExit+0x4e>
 80017e0:	200008f8 	.word	0x200008f8
 80017e4:	08002230 	.word	0x08002230
	...

080017f0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 80017f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80017f4:	2320      	movs	r3, #32
 80017f6:	b086      	sub	sp, #24
 80017f8:	4607      	mov	r7, r0
 80017fa:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 80017fe:	f7ff fc1f 	bl	8001040 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001802:	f7ff ff7d 	bl	8001700 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);
 8001806:	2f00      	cmp	r7, #0
 8001808:	d05f      	beq.n	80018ca <chThdSleep+0xda>
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {

  chDbgCheckClassS();
 800180a:	f7ff fc89 	bl	8001120 <chDbgCheckClassS>

  if (TIME_INFINITE != time) {
 800180e:	1c7b      	adds	r3, r7, #1
 8001810:	d060      	beq.n	80018d4 <chThdSleep+0xe4>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8001812:	4c52      	ldr	r4, [pc, #328]	; (800195c <chThdSleep+0x16c>)
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001814:	4626      	mov	r6, r4
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  systime_t delta;

  chDbgCheckClassI();
 8001816:	f7ff fccb 	bl	80011b0 <chDbgCheckClassI>
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800181a:	f856 3f1c 	ldr.w	r3, [r6, #28]!
 800181e:	69a2      	ldr	r2, [r4, #24]

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8001820:	484f      	ldr	r0, [pc, #316]	; (8001960 <chThdSleep+0x170>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8001822:	9205      	str	r2, [sp, #20]
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
 8001824:	2f01      	cmp	r7, #1
 8001826:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800182a:	bf08      	it	eq
 800182c:	2702      	moveq	r7, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800182e:	42b3      	cmp	r3, r6
 8001830:	6a4a      	ldr	r2, [r1, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 8001832:	9004      	str	r0, [sp, #16]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8001834:	d07a      	beq.n	800192c <chThdSleep+0x13c>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8001836:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8001838:	6899      	ldr	r1, [r3, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 800183a:	18b8      	adds	r0, r7, r2
 800183c:	1b45      	subs	r5, r0, r5
    if (delta < ch.vtlist.vt_next->vt_delta) {
 800183e:	428d      	cmp	r5, r1
 8001840:	d36f      	bcc.n	8001922 <chThdSleep+0x132>
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001842:	428d      	cmp	r5, r1
 8001844:	d904      	bls.n	8001850 <chThdSleep+0x60>
    delta -= p->vt_delta;
    p = p->vt_next;
 8001846:	681b      	ldr	r3, [r3, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8001848:	1a6d      	subs	r5, r5, r1
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800184a:	6899      	ldr	r1, [r3, #8]
 800184c:	42a9      	cmp	r1, r5
 800184e:	d3fa      	bcc.n	8001846 <chThdSleep+0x56>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	9202      	str	r2, [sp, #8]
  vtp->vt_prev->vt_next = vtp;
 8001854:	f10d 0804 	add.w	r8, sp, #4
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8001858:	9301      	str	r3, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 800185a:	f8c2 8000 	str.w	r8, [r2]
  p->vt_prev = vtp;
 800185e:	f8c3 8004 	str.w	r8, [r3, #4]
  vtp->vt_delta = delta
 8001862:	9503      	str	r5, [sp, #12]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001864:	689a      	ldr	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001866:	f04f 31ff 	mov.w	r1, #4294967295
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800186a:	1b52      	subs	r2, r2, r5
 800186c:	609a      	str	r2, [r3, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800186e:	6261      	str	r1, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8001870:	2008      	movs	r0, #8
 8001872:	f7ff fc65 	bl	8001140 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8001876:	f7ff fc9b 	bl	80011b0 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 800187a:	9b04      	ldr	r3, [sp, #16]
 800187c:	b193      	cbz	r3, 80018a4 <chThdSleep+0xb4>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 800187e:	f7ff fc97 	bl	80011b0 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8001882:	69e3      	ldr	r3, [r4, #28]
 8001884:	4935      	ldr	r1, [pc, #212]	; (800195c <chThdSleep+0x16c>)
 8001886:	4543      	cmp	r3, r8
 8001888:	d02d      	beq.n	80018e6 <chThdSleep+0xf6>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800188a:	9a02      	ldr	r2, [sp, #8]
 800188c:	9b01      	ldr	r3, [sp, #4]
 800188e:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001890:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_func = NULL;
 8001892:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8001894:	42b3      	cmp	r3, r6
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8001896:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 8001898:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800189a:	d003      	beq.n	80018a4 <chThdSleep+0xb4>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	9a03      	ldr	r2, [sp, #12]
 80018a0:	440a      	add	r2, r1
 80018a2:	609a      	str	r2, [r3, #8]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80018a4:	f7ff ff1c 	bl	80016e0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 80018a8:	f7ff fbba 	bl	8001020 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 80018ac:	6822      	ldr	r2, [r4, #0]
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <chThdSleep+0x16c>)
 80018b0:	42a2      	cmp	r2, r4
 80018b2:	d004      	beq.n	80018be <chThdSleep+0xce>
 80018b4:	6999      	ldr	r1, [r3, #24]
 80018b6:	6892      	ldr	r2, [r2, #8]
 80018b8:	6889      	ldr	r1, [r1, #8]
 80018ba:	4291      	cmp	r1, r2
 80018bc:	d30f      	bcc.n	80018de <chThdSleep+0xee>
 80018be:	2300      	movs	r3, #0
 80018c0:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 80018c4:	b006      	add	sp, #24
 80018c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ca:	b672      	cpsid	i
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <chThdSleep+0x16c>)
 80018ce:	4a25      	ldr	r2, [pc, #148]	; (8001964 <chThdSleep+0x174>)
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80018d2:	e7fe      	b.n	80018d2 <chThdSleep+0xe2>
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80018d4:	2008      	movs	r0, #8
 80018d6:	f7ff fc33 	bl	8001140 <chSchGoSleepS>
 80018da:	4c20      	ldr	r4, [pc, #128]	; (800195c <chThdSleep+0x16c>)
 80018dc:	e7e2      	b.n	80018a4 <chThdSleep+0xb4>
 80018de:	b672      	cpsid	i
 80018e0:	4a21      	ldr	r2, [pc, #132]	; (8001968 <chThdSleep+0x178>)
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80018e4:	e7fe      	b.n	80018e4 <chThdSleep+0xf4>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 80018e6:	9a01      	ldr	r2, [sp, #4]
 80018e8:	61ca      	str	r2, [r1, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
  vtp->vt_func = NULL;
 80018ea:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80018ec:	42b2      	cmp	r2, r6
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80018ee:	6056      	str	r6, [r2, #4]
  vtp->vt_func = NULL;
 80018f0:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80018f2:	d012      	beq.n	800191a <chThdSleep+0x12a>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80018f4:	9803      	ldr	r0, [sp, #12]
 80018f6:	6893      	ldr	r3, [r2, #8]
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80018f8:	6a89      	ldr	r1, [r1, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80018fa:	4403      	add	r3, r0
 80018fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001900:	6093      	str	r3, [r2, #8]
 8001902:	6a40      	ldr	r0, [r0, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 8001904:	1a42      	subs	r2, r0, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 8001906:	4293      	cmp	r3, r2
 8001908:	d9cc      	bls.n	80018a4 <chThdSleep+0xb4>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 800190a:	1a9b      	subs	r3, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 800190c:	2b01      	cmp	r3, #1
 800190e:	bf98      	it	ls
 8001910:	2302      	movls	r3, #2
 8001912:	4418      	add	r0, r3
 8001914:	f7ff faec 	bl	8000ef0 <stSetAlarm>
 8001918:	e7c4      	b.n	80018a4 <chThdSleep+0xb4>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 800191a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800191e:	60d3      	str	r3, [r2, #12]
 8001920:	e7c0      	b.n	80018a4 <chThdSleep+0xb4>
 8001922:	f7ff fae5 	bl	8000ef0 <stSetAlarm>
 8001926:	69e3      	ldr	r3, [r4, #28]
 8001928:	6899      	ldr	r1, [r3, #8]
 800192a:	e78a      	b.n	8001842 <chThdSleep+0x52>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 800192c:	62a2      	str	r2, [r4, #40]	; 0x28
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;
 800192e:	9703      	str	r7, [sp, #12]
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8001930:	68c8      	ldr	r0, [r1, #12]
      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 8001932:	9301      	str	r3, [sp, #4]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8001934:	f10d 0804 	add.w	r8, sp, #4
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8001938:	f010 0002 	ands.w	r0, r0, #2
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800193c:	9302      	str	r3, [sp, #8]
      vtp->vt_delta = delay;

      /* Being the first element in the list the alarm timer is started.*/
      port_timer_start_alarm(ch.vtlist.vt_lasttime + delay);
 800193e:	443a      	add	r2, r7
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 8001940:	f8c4 801c 	str.w	r8, [r4, #28]
      ch.vtlist.vt_prev = vtp;
 8001944:	f8c4 8020 	str.w	r8, [r4, #32]
 8001948:	d104      	bne.n	8001954 <chThdSleep+0x164>
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800194a:	2302      	movs	r3, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 800194c:	634a      	str	r2, [r1, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800194e:	6108      	str	r0, [r1, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8001950:	60cb      	str	r3, [r1, #12]
 8001952:	e78d      	b.n	8001870 <chThdSleep+0x80>
 8001954:	b672      	cpsid	i
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <chThdSleep+0x17c>)
 8001958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800195a:	e7fe      	b.n	800195a <chThdSleep+0x16a>
 800195c:	200008f8 	.word	0x200008f8
 8001960:	08001661 	.word	0x08001661
 8001964:	080021b0 	.word	0x080021b0
 8001968:	08002080 	.word	0x08002080
 800196c:	08002210 	.word	0x08002210

08001970 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8001970:	e7fe      	b.n	8001970 <BusFault_Handler>
 8001972:	bf00      	nop
	...

08001980 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8001980:	e7fe      	b.n	8001980 <__default_exit>
 8001982:	bf00      	nop
	...

08001990 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
	...

080019a0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
	...

080019b0 <dmaStreamAllocate.constprop.12>:
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {

  osalDbgCheck(dmastp != NULL);
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d053      	beq.n	8001a5c <dmaStreamAllocate.constprop.12+0xac>
 * @retval FALSE        no error, stream taken.
 * @retval TRUE         error, stream already taken.
 *
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
 80019b4:	b5f0      	push	{r4, r5, r6, r7, lr}
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 80019b6:	4e2c      	ldr	r6, [pc, #176]	; (8001a68 <dmaStreamAllocate.constprop.12+0xb8>)
 80019b8:	7a45      	ldrb	r5, [r0, #9]
 80019ba:	6832      	ldr	r2, [r6, #0]
 80019bc:	2301      	movs	r3, #1
 80019be:	fa03 f705 	lsl.w	r7, r3, r5
 80019c2:	4217      	tst	r7, r2
 80019c4:	d146      	bne.n	8001a54 <dmaStreamAllocate.constprop.12+0xa4>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80019c6:	4c29      	ldr	r4, [pc, #164]	; (8001a6c <dmaStreamAllocate.constprop.12+0xbc>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80019c8:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8001a7c <dmaStreamAllocate.constprop.12+0xcc>
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80019cc:	f844 1035 	str.w	r1, [r4, r5, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 80019d0:	ea47 0302 	orr.w	r3, r7, r2
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80019d4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 80019d8:	f013 0fff 	tst.w	r3, #255	; 0xff
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 80019dc:	6033      	str	r3, [r6, #0]
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80019de:	f8c4 e004 	str.w	lr, [r4, #4]
  dma_streams_mask |= (1 << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 80019e2:	d004      	beq.n	80019ee <dmaStreamAllocate.constprop.12+0x3e>
    rccEnableDMA1(FALSE);
 80019e4:	4c22      	ldr	r4, [pc, #136]	; (8001a70 <dmaStreamAllocate.constprop.12+0xc0>)
 80019e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019e8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80019ec:	6322      	str	r2, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 80019ee:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
 80019f2:	d129      	bne.n	8001a48 <dmaStreamAllocate.constprop.12+0x98>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80019f4:	6802      	ldr	r2, [r0, #0]
 80019f6:	6813      	ldr	r3, [r2, #0]
 80019f8:	f023 031f 	bic.w	r3, r3, #31
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	6813      	ldr	r3, [r2, #0]
 8001a00:	f013 0301 	ands.w	r3, r3, #1
 8001a04:	d1fb      	bne.n	80019fe <dmaStreamAllocate.constprop.12+0x4e>
 8001a06:	7a05      	ldrb	r5, [r0, #8]
 8001a08:	6846      	ldr	r6, [r0, #4]
 8001a0a:	243d      	movs	r4, #61	; 0x3d
 8001a0c:	40ac      	lsls	r4, r5
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001a0e:	2521      	movs	r5, #33	; 0x21
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8001a10:	6034      	str	r4, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 8001a12:	6013      	str	r3, [r2, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8001a14:	6155      	str	r5, [r2, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 8001a16:	b1f9      	cbz	r1, 8001a58 <dmaStreamAllocate.constprop.12+0xa8>
    nvicEnableVector(dmastp->vector, priority);
 8001a18:	7a81      	ldrb	r1, [r0, #10]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001a1a:	094a      	lsrs	r2, r1, #5
 8001a1c:	0092      	lsls	r2, r2, #2

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001a1e:	f101 4460 	add.w	r4, r1, #3758096384	; 0xe0000000
 8001a22:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8001a26:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8001a2a:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f001 011f 	and.w	r1, r1, #31
 8001a34:	fa00 f101 	lsl.w	r1, r0, r1

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001a38:	25a0      	movs	r5, #160	; 0xa0
 8001a3a:	f884 5300 	strb.w	r5, [r4, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001a3e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001a42:	6011      	str	r1, [r2, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	bdf0      	pop	{r4, r5, r6, r7, pc}

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
    rccEnableDMA1(FALSE);
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
    rccEnableDMA2(FALSE);
 8001a48:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <dmaStreamAllocate.constprop.12+0xc0>)
 8001a4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001a4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	e7cf      	b.n	80019f4 <dmaStreamAllocate.constprop.12+0x44>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
    return TRUE;
 8001a54:	4618      	mov	r0, r3
 8001a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  dmaStreamDisable(dmastp);
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 8001a58:	4608      	mov	r0, r1
    nvicEnableVector(dmastp->vector, priority);

  return FALSE;
}
 8001a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5c:	b672      	cpsid	i
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <dmaStreamAllocate.constprop.12+0xc4>)
 8001a60:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <dmaStreamAllocate.constprop.12+0xc8>)
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a64:	e7fe      	b.n	8001a64 <dmaStreamAllocate.constprop.12+0xb4>
 8001a66:	bf00      	nop
 8001a68:	20000f88 	.word	0x20000f88
 8001a6c:	20000f04 	.word	0x20000f04
 8001a70:	40023800 	.word	0x40023800
 8001a74:	200008f8 	.word	0x200008f8
 8001a78:	08002280 	.word	0x08002280
 8001a7c:	20000ed0 	.word	0x20000ed0

08001a80 <chMtxUnlock.constprop.16>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  thread_t *ctp = currp;
 8001a84:	4d3d      	ldr	r5, [pc, #244]	; (8001b7c <chMtxUnlock.constprop.16+0xfc>)

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001a86:	2320      	movs	r3, #32
 8001a88:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8001a8c:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8001a90:	f7ff fad6 	bl	8001040 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001a94:	f7ff fe34 	bl	8001700 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->p_mtxlist != NULL, "owned mutexes list empty");
 8001a98:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8001a9c:	b133      	cbz	r3, 8001aac <chMtxUnlock.constprop.16+0x2c>
  chDbgAssert(ctp->p_mtxlist->m_owner == ctp, "ownership failure");
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4591      	cmp	r9, r2
 8001aa2:	d007      	beq.n	8001ab4 <chMtxUnlock.constprop.16+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <chMtxUnlock.constprop.16+0x100>)
 8001aa8:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001aaa:	e7fe      	b.n	8001aaa <chMtxUnlock.constprop.16+0x2a>
 8001aac:	b672      	cpsid	i
 8001aae:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <chMtxUnlock.constprop.16+0x100>)
 8001ab0:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001ab2:	e7fe      	b.n	8001ab2 <chMtxUnlock.constprop.16+0x32>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  chDbgAssert(mp->m_cnt >= (cnt_t)1, "counter is not positive");
 8001ab4:	4c33      	ldr	r4, [pc, #204]	; (8001b84 <chMtxUnlock.constprop.16+0x104>)
 8001ab6:	69e7      	ldr	r7, [r4, #28]
 8001ab8:	2f00      	cmp	r7, #0
 8001aba:	dd5a      	ble.n	8001b72 <chMtxUnlock.constprop.16+0xf2>

  if (--mp->m_cnt == (cnt_t)0) {
 8001abc:	3f01      	subs	r7, #1
 8001abe:	61e7      	str	r7, [r4, #28]
 8001ac0:	2f00      	cmp	r7, #0
 8001ac2:	d13e      	bne.n	8001b42 <chMtxUnlock.constprop.16+0xc2>
#endif

    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");
 8001ac4:	f104 0a0c 	add.w	sl, r4, #12
 8001ac8:	4553      	cmp	r3, sl
 8001aca:	d003      	beq.n	8001ad4 <chMtxUnlock.constprop.16+0x54>
 8001acc:	b672      	cpsid	i
 8001ace:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <chMtxUnlock.constprop.16+0x100>)
 8001ad0:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001ad2:	e7fe      	b.n	8001ad2 <chMtxUnlock.constprop.16+0x52>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 8001ad4:	69a6      	ldr	r6, [r4, #24]
 8001ad6:	f8c9 603c 	str.w	r6, [r9, #60]	; 0x3c
 * @deprecated
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 8001ada:	f7ff fb21 	bl	8001120 <chDbgCheckClassS>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001ade:	f8d4 800c 	ldr.w	r8, [r4, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001ae2:	45d0      	cmp	r8, sl
 8001ae4:	d043      	beq.n	8001b6e <chMtxUnlock.constprop.16+0xee>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001ae6:	f8d9 7040 	ldr.w	r7, [r9, #64]	; 0x40
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001aea:	b15e      	cbz	r6, 8001b04 <chMtxUnlock.constprop.16+0x84>
 8001aec:	f7ff fb18 	bl	8001120 <chDbgCheckClassS>
 8001af0:	6833      	ldr	r3, [r6, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8001af2:	429e      	cmp	r6, r3
 8001af4:	d003      	beq.n	8001afe <chMtxUnlock.constprop.16+0x7e>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	429f      	cmp	r7, r3
 8001afa:	bf38      	it	cc
 8001afc:	461f      	movcc	r7, r3
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8001afe:	68f6      	ldr	r6, [r6, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001b00:	2e00      	cmp	r6, #0
 8001b02:	d1f3      	bne.n	8001aec <chMtxUnlock.constprop.16+0x6c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001b04:	f8d8 3000 	ldr.w	r3, [r8]
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001b08:	f8c9 7008 	str.w	r7, [r9, #8]

      /* Awakens the highest priority thread waiting for the unlocked mutex and
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	61e2      	str	r2, [r4, #28]
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001b10:	f8d8 203c 	ldr.w	r2, [r8, #60]	; 0x3c
 8001b14:	60e3      	str	r3, [r4, #12]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001b16:	4640      	mov	r0, r8
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001b18:	f8c3 a004 	str.w	sl, [r3, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001b1c:	61a2      	str	r2, [r4, #24]
      tp->p_mtxlist = mp;
 8001b1e:	f8c8 a03c 	str.w	sl, [r8, #60]	; 0x3c
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 8001b22:	f8c4 8014 	str.w	r8, [r4, #20]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001b26:	f7ff fb53 	bl	80011d0 <chSchReadyI>
 *
 * @sclass
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();
 8001b2a:	f7ff faf9 	bl	8001120 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8001b2e:	f7ff fb3f 	bl	80011b0 <chDbgCheckClassI>

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 8001b32:	69aa      	ldr	r2, [r5, #24]
 8001b34:	682b      	ldr	r3, [r5, #0]

  if (chSchIsRescRequiredI()) {
 8001b36:	6892      	ldr	r2, [r2, #8]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d201      	bcs.n	8001b42 <chMtxUnlock.constprop.16+0xc2>
    chSchDoRescheduleAhead();
 8001b3e:	f7ff faa7 	bl	8001090 <chSchDoRescheduleAhead>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001b42:	f7ff fdcd 	bl	80016e0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001b46:	f7ff fa6b 	bl	8001020 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001b4a:	682a      	ldr	r2, [r5, #0]
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <chMtxUnlock.constprop.16+0xfc>)
 8001b4e:	42aa      	cmp	r2, r5
 8001b50:	d004      	beq.n	8001b5c <chMtxUnlock.constprop.16+0xdc>
 8001b52:	6999      	ldr	r1, [r3, #24]
 8001b54:	6892      	ldr	r2, [r2, #8]
 8001b56:	6889      	ldr	r1, [r1, #8]
 8001b58:	4291      	cmp	r1, r2
 8001b5a:	d304      	bcc.n	8001b66 <chMtxUnlock.constprop.16+0xe6>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f383 8811 	msr	BASEPRI, r3
 8001b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b66:	b672      	cpsid	i
 8001b68:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <chMtxUnlock.constprop.16+0x108>)
 8001b6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b6c:	e7fe      	b.n	8001b6c <chMtxUnlock.constprop.16+0xec>
      chSchRescheduleS();
    }
    else {
      mp->m_owner = NULL;
 8001b6e:	6167      	str	r7, [r4, #20]
 8001b70:	e7e7      	b.n	8001b42 <chMtxUnlock.constprop.16+0xc2>
 8001b72:	b672      	cpsid	i
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <chMtxUnlock.constprop.16+0x100>)
 8001b76:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001b78:	e7fe      	b.n	8001b78 <chMtxUnlock.constprop.16+0xf8>
 8001b7a:	bf00      	nop
 8001b7c:	200008f8 	.word	0x200008f8
 8001b80:	080022a0 	.word	0x080022a0
 8001b84:	20000ed0 	.word	0x20000ed0
 8001b88:	080022b0 	.word	0x080022b0
 8001b8c:	00000000 	.word	0x00000000

08001b90 <chMtxLock.constprop.17>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001b92:	2320      	movs	r3, #32
 8001b94:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001b98:	4d55      	ldr	r5, [pc, #340]	; (8001cf0 <chMtxLock.constprop.17+0x160>)
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001b9a:	4e56      	ldr	r6, [pc, #344]	; (8001cf4 <chMtxLock.constprop.17+0x164>)
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8001b9c:	f7ff fa50 	bl	8001040 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001ba0:	f7ff fdae 	bl	8001700 <_dbg_check_lock>

  chDbgCheckClassS();
 8001ba4:	f7ff fabc 	bl	8001120 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001ba8:	6968      	ldr	r0, [r5, #20]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001baa:	69b4      	ldr	r4, [r6, #24]

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE

    chDbgAssert(mp->m_cnt >= (cnt_t)1, "counter is not positive");
 8001bac:	69eb      	ldr	r3, [r5, #28]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d04c      	beq.n	8001c4c <chMtxLock.constprop.17+0xbc>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE

    chDbgAssert(mp->m_cnt >= (cnt_t)1, "counter is not positive");
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f340 8097 	ble.w	8001ce6 <chMtxLock.constprop.17+0x156>

    /* If the mutex is already owned by this thread, the counter is increased
       and there is no need of more actions.*/
    if (mp->m_owner == ctp) {
 8001bb8:	4284      	cmp	r4, r0
 8001bba:	f000 8091 	beq.w	8001ce0 <chMtxLock.constprop.17+0x150>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8001bbe:	68a2      	ldr	r2, [r4, #8]
 8001bc0:	6883      	ldr	r3, [r0, #8]
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d211      	bcs.n	8001bea <chMtxLock.constprop.17+0x5a>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001bc6:	f890 3020 	ldrb.w	r3, [r0, #32]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8001bca:	6082      	str	r2, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001bcc:	2b06      	cmp	r3, #6
 8001bce:	d06d      	beq.n	8001cac <chMtxLock.constprop.17+0x11c>
 8001bd0:	2b07      	cmp	r3, #7
 8001bd2:	d027      	beq.n	8001c24 <chMtxLock.constprop.17+0x94>
 8001bd4:	b94b      	cbnz	r3, 8001bea <chMtxLock.constprop.17+0x5a>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001bd6:	e890 000c 	ldmia.w	r0, {r2, r3}
          break;
#endif
        case CH_STATE_READY:
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
 8001bda:	2101      	movs	r1, #1
 8001bdc:	f880 1020 	strb.w	r1, [r0, #32]
 8001be0:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001be2:	6802      	ldr	r2, [r0, #0]
 8001be4:	6053      	str	r3, [r2, #4]
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8001be6:	f7ff faf3 	bl	80011d0 <chSchReadyI>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001bea:	4a43      	ldr	r2, [pc, #268]	; (8001cf8 <chMtxLock.constprop.17+0x168>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	e003      	b.n	8001bf8 <chMtxLock.constprop.17+0x68>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001bf0:	6898      	ldr	r0, [r3, #8]
 8001bf2:	68a1      	ldr	r1, [r4, #8]
 8001bf4:	4288      	cmp	r0, r1
 8001bf6:	d302      	bcc.n	8001bfe <chMtxLock.constprop.17+0x6e>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001bf8:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d1f8      	bne.n	8001bf0 <chMtxLock.constprop.17+0x60>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001bfe:	6859      	ldr	r1, [r3, #4]
 8001c00:	6061      	str	r1, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001c02:	6023      	str	r3, [r4, #0]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8001c04:	2006      	movs	r0, #6
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001c06:	600c      	str	r4, [r1, #0]
  cp->p_prev = tp;
 8001c08:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8001c0a:	6262      	str	r2, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8001c0c:	f7ff fa98 	bl	8001140 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->m_owner == ctp, "not owner");
 8001c10:	6969      	ldr	r1, [r5, #20]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <chMtxLock.constprop.17+0x160>)
      chSchGoSleepS(CH_STATE_WTMTX);

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->m_owner == ctp, "not owner");
 8001c14:	428c      	cmp	r4, r1
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 8001c16:	f103 020c 	add.w	r2, r3, #12
      chSchGoSleepS(CH_STATE_WTMTX);

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->m_owner == ctp, "not owner");
 8001c1a:	d039      	beq.n	8001c90 <chMtxLock.constprop.17+0x100>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c1c:	b672      	cpsid	i
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <chMtxLock.constprop.17+0x16c>)
 8001c20:	62f3      	str	r3, [r6, #44]	; 0x2c
 8001c22:	e7fe      	b.n	8001c22 <chMtxLock.constprop.17+0x92>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001c24:	e890 000a 	ldmia.w	r0, {r1, r3}
 8001c28:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001c2a:	6807      	ldr	r7, [r0, #0]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8001c2c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001c2e:	607b      	str	r3, [r7, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001c30:	460b      	mov	r3, r1
 8001c32:	e002      	b.n	8001c3a <chMtxLock.constprop.17+0xaa>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001c34:	689f      	ldr	r7, [r3, #8]
 8001c36:	4297      	cmp	r7, r2
 8001c38:	d302      	bcc.n	8001c40 <chMtxLock.constprop.17+0xb0>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001c3a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001c3c:	4299      	cmp	r1, r3
 8001c3e:	d1f9      	bne.n	8001c34 <chMtxLock.constprop.17+0xa4>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	6042      	str	r2, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001c44:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001c46:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8001c48:	6058      	str	r0, [r3, #4]
 8001c4a:	e7ce      	b.n	8001bea <chMtxLock.constprop.17+0x5a>
    }
#endif
  }
  else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");
 8001c4c:	b9c3      	cbnz	r3, 8001c80 <chMtxLock.constprop.17+0xf0>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8001c4e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 8001c50:	616c      	str	r4, [r5, #20]
  }
  else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
 8001c52:	2101      	movs	r1, #1
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 8001c54:	f105 030c 	add.w	r3, r5, #12
  }
  else {
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
 8001c58:	61e9      	str	r1, [r5, #28]
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8001c5a:	61aa      	str	r2, [r5, #24]
    ctp->p_mtxlist = mp;
 8001c5c:	63e3      	str	r3, [r4, #60]	; 0x3c
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001c5e:	f7ff fd3f 	bl	80016e0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001c62:	f7ff f9dd 	bl	8001020 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001c66:	6832      	ldr	r2, [r6, #0]
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <chMtxLock.constprop.17+0x164>)
 8001c6a:	42b2      	cmp	r2, r6
 8001c6c:	d004      	beq.n	8001c78 <chMtxLock.constprop.17+0xe8>
 8001c6e:	6999      	ldr	r1, [r3, #24]
 8001c70:	6892      	ldr	r2, [r2, #8]
 8001c72:	6889      	ldr	r1, [r1, #8]
 8001c74:	4291      	cmp	r1, r2
 8001c76:	d307      	bcc.n	8001c88 <chMtxLock.constprop.17+0xf8>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f383 8811 	msr	BASEPRI, r3
 8001c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
 8001c82:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <chMtxLock.constprop.17+0x16c>)
 8001c84:	62f3      	str	r3, [r6, #44]	; 0x2c
 8001c86:	e7fe      	b.n	8001c86 <chMtxLock.constprop.17+0xf6>
 8001c88:	b672      	cpsid	i
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <chMtxLock.constprop.17+0x170>)
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c8e:	e7fe      	b.n	8001c8e <chMtxLock.constprop.17+0xfe>
      chSchGoSleepS(CH_STATE_WTMTX);

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->m_owner == ctp, "not owner");
      chDbgAssert(ctp->p_mtxlist == mp, "not owned");
 8001c90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c92:	4291      	cmp	r1, r2
 8001c94:	d003      	beq.n	8001c9e <chMtxLock.constprop.17+0x10e>
 8001c96:	b672      	cpsid	i
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <chMtxLock.constprop.17+0x16c>)
 8001c9a:	62f3      	str	r3, [r6, #44]	; 0x2c
 8001c9c:	e7fe      	b.n	8001c9c <chMtxLock.constprop.17+0x10c>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      chDbgAssert(mp->m_cnt == (cnt_t)1, "counter is not one");
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d0dc      	beq.n	8001c5e <chMtxLock.constprop.17+0xce>
 8001ca4:	b672      	cpsid	i
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <chMtxLock.constprop.17+0x16c>)
 8001ca8:	62f3      	str	r3, [r6, #44]	; 0x2c
 8001caa:	e7fe      	b.n	8001caa <chMtxLock.constprop.17+0x11a>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8001cac:	e890 000a 	ldmia.w	r0, {r1, r3}
 8001cb0:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 8001cb2:	6807      	ldr	r7, [r0, #0]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 8001cb4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001cb6:	607b      	str	r3, [r7, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001cb8:	460b      	mov	r3, r1
 8001cba:	e002      	b.n	8001cc2 <chMtxLock.constprop.17+0x132>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001cbc:	689f      	ldr	r7, [r3, #8]
 8001cbe:	4297      	cmp	r7, r2
 8001cc0:	d302      	bcc.n	8001cc8 <chMtxLock.constprop.17+0x138>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001cc2:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001cc4:	4299      	cmp	r1, r3
 8001cc6:	d1f9      	bne.n	8001cbc <chMtxLock.constprop.17+0x12c>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	6042      	str	r2, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001ccc:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001cce:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8001cd0:	6058      	str	r0, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 8001cd2:	6888      	ldr	r0, [r1, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 8001cd4:	68a2      	ldr	r2, [r4, #8]
 8001cd6:	6883      	ldr	r3, [r0, #8]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f63f af74 	bhi.w	8001bc6 <chMtxLock.constprop.17+0x36>
 8001cde:	e784      	b.n	8001bea <chMtxLock.constprop.17+0x5a>
    chDbgAssert(mp->m_cnt >= (cnt_t)1, "counter is not positive");

    /* If the mutex is already owned by this thread, the counter is increased
       and there is no need of more actions.*/
    if (mp->m_owner == ctp) {
      mp->m_cnt++;
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	61eb      	str	r3, [r5, #28]
 8001ce4:	e7bb      	b.n	8001c5e <chMtxLock.constprop.17+0xce>
 8001ce6:	b672      	cpsid	i
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <chMtxLock.constprop.17+0x16c>)
 8001cea:	62f3      	str	r3, [r6, #44]	; 0x2c
 8001cec:	e7fe      	b.n	8001cec <chMtxLock.constprop.17+0x15c>
 8001cee:	bf00      	nop
 8001cf0:	20000ed0 	.word	0x20000ed0
 8001cf4:	200008f8 	.word	0x200008f8
 8001cf8:	20000edc 	.word	0x20000edc
 8001cfc:	080022f0 	.word	0x080022f0
 8001d00:	080022b0 	.word	0x080022b0
	...

08001d10 <spiSend.constprop.2>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8001d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 8001d12:	b190      	cbz	r0, 8001d3a <spiSend.constprop.2+0x2a>
 8001d14:	b189      	cbz	r1, 8001d3a <spiSend.constprop.2+0x2a>
 8001d16:	4604      	mov	r4, r0
 8001d18:	460e      	mov	r6, r1

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8001d20:	f7ff f98e 	bl	8001040 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001d24:	f7ff fcec 	bl	8001700 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <spiSend.constprop.2+0xb8>)
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	2a02      	cmp	r2, #2
 8001d2e:	d009      	beq.n	8001d44 <spiSend.constprop.2+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <spiSend.constprop.2+0xbc>)
 8001d34:	4a26      	ldr	r2, [pc, #152]	; (8001dd0 <spiSend.constprop.2+0xc0>)
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d38:	e7fe      	b.n	8001d38 <spiSend.constprop.2+0x28>
 8001d3a:	b672      	cpsid	i
 8001d3c:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <spiSend.constprop.2+0xbc>)
 8001d3e:	4a24      	ldr	r2, [pc, #144]	; (8001dd0 <spiSend.constprop.2+0xc0>)
 8001d40:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d42:	e7fe      	b.n	8001d42 <spiSend.constprop.2+0x32>
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	b122      	cbz	r2, 8001d54 <spiSend.constprop.2+0x44>
 8001d4a:	b672      	cpsid	i
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <spiSend.constprop.2+0xbc>)
 8001d4e:	4a20      	ldr	r2, [pc, #128]	; (8001dd0 <spiSend.constprop.2+0xc0>)
 8001d50:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d52:	e7fe      	b.n	8001d52 <spiSend.constprop.2+0x42>
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8001d54:	6a59      	ldr	r1, [r3, #36]	; 0x24
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8001d56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8001d58:	6809      	ldr	r1, [r1, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8001d5a:	6b1d      	ldr	r5, [r3, #48]	; 0x30

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8001d5c:	6812      	ldr	r2, [r2, #0]
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8001d5e:	481d      	ldr	r0, [pc, #116]	; (8001dd4 <spiSend.constprop.2+0xc4>)
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8001d60:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8001d62:	60c8      	str	r0, [r1, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8001d64:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
  spiStartSendI(spip, n, txbuf);
 8001d68:	2003      	movs	r0, #3
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8001d6a:	604c      	str	r4, [r1, #4]
 8001d6c:	7018      	strb	r0, [r3, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8001d6e:	600f      	str	r7, [r1, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8001d70:	60d6      	str	r6, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8001d72:	6054      	str	r4, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8001d74:	6015      	str	r5, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 8001d76:	680d      	ldr	r5, [r1, #0]
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 8001d78:	4c14      	ldr	r4, [pc, #80]	; (8001dcc <spiSend.constprop.2+0xbc>)
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 8001d7a:	689f      	ldr	r7, [r3, #8]
 8001d7c:	69a6      	ldr	r6, [r4, #24]
 8001d7e:	f045 0501 	orr.w	r5, r5, #1
 8001d82:	600d      	str	r5, [r1, #0]
  dmaStreamEnable(spip->dmatx);
 8001d84:	6811      	ldr	r1, [r2, #0]
 8001d86:	f041 0101 	orr.w	r1, r1, #1
 8001d8a:	6011      	str	r1, [r2, #0]
 8001d8c:	b11f      	cbz	r7, 8001d96 <spiSend.constprop.2+0x86>
 8001d8e:	b672      	cpsid	i
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <spiSend.constprop.2+0xc8>)
 8001d92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d94:	e7fe      	b.n	8001d94 <spiSend.constprop.2+0x84>

  *trp = tp;
 8001d96:	f843 6f08 	str.w	r6, [r3, #8]!
  tp->p_u.wttrp = trp;
 8001d9a:	6273      	str	r3, [r6, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 8001d9c:	f7ff f9d0 	bl	8001140 <chSchGoSleepS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001da0:	f7ff fc9e 	bl	80016e0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001da4:	f7ff f93c 	bl	8001020 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	42a3      	cmp	r3, r4
 8001dac:	d004      	beq.n	8001db8 <spiSend.constprop.2+0xa8>
 8001dae:	69a2      	ldr	r2, [r4, #24]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	6892      	ldr	r2, [r2, #8]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d303      	bcc.n	8001dc0 <spiSend.constprop.2+0xb0>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001db8:	2300      	movs	r3, #0
 8001dba:	f383 8811 	msr	BASEPRI, r3
 8001dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc0:	b672      	cpsid	i
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <spiSend.constprop.2+0xcc>)
 8001dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001dc6:	e7fe      	b.n	8001dc6 <spiSend.constprop.2+0xb6>
 8001dc8:	20000ed0 	.word	0x20000ed0
 8001dcc:	200008f8 	.word	0x200008f8
 8001dd0:	08002250 	.word	0x08002250
 8001dd4:	20000f84 	.word	0x20000f84
 8001dd8:	08002270 	.word	0x08002270
 8001ddc:	080022c0 	.word	0x080022c0

08001de0 <spiStart.constprop.10>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8001de0:	b570      	push	{r4, r5, r6, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001de2:	2320      	movs	r3, #32
 8001de4:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 8001de8:	4c33      	ldr	r4, [pc, #204]	; (8001eb8 <spiStart.constprop.10+0xd8>)
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8001dea:	f7ff f929 	bl	8001040 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001dee:	f7ff fc87 	bl	8001700 <_dbg_check_lock>
 8001df2:	7822      	ldrb	r2, [r4, #0]
 8001df4:	1e53      	subs	r3, r2, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d904      	bls.n	8001e04 <spiStart.constprop.10+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfa:	b672      	cpsid	i
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <spiStart.constprop.10+0xdc>)
 8001dfe:	4a30      	ldr	r2, [pc, #192]	; (8001ec0 <spiStart.constprop.10+0xe0>)
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e02:	e7fe      	b.n	8001e02 <spiStart.constprop.10+0x22>
                "invalid state");
  spip->config = config;
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <spiStart.constprop.10+0xe4>)
 8001e06:	6063      	str	r3, [r4, #4]
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8001e08:	2a01      	cmp	r2, #1
 8001e0a:	d02e      	beq.n	8001e6a <spiStart.constprop.10+0x8a>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8001e0c:	8959      	ldrh	r1, [r3, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001e0e:	6b23      	ldr	r3, [r4, #48]	; 0x30

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001e10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8001e12:	0508      	lsls	r0, r1, #20
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001e14:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8001e18:	bf48      	it	mi
 8001e1a:	f443 5320 	orrmi.w	r3, r3, #10240	; 0x2800

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8001e1e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001e22:	6323      	str	r3, [r4, #48]	; 0x30
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8001e24:	bf48      	it	mi
 8001e26:	f442 5220 	orrmi.w	r2, r2, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8001e2a:	6a23      	ldr	r3, [r4, #32]
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8001e2c:	62e2      	str	r2, [r4, #44]	; 0x2c
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8001e2e:	f441 7141 	orr.w	r1, r1, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8001e32:	2000      	movs	r0, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8001e34:	2207      	movs	r2, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8001e36:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8001e38:	6019      	str	r1, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8001e3a:	605a      	str	r2, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e42:	601a      	str	r2, [r3, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 8001e44:	2302      	movs	r3, #2
 8001e46:	7023      	strb	r3, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001e48:	f7ff fc4a 	bl	80016e0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001e4c:	f7ff f8e8 	bl	8001020 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <spiStart.constprop.10+0xdc>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d021      	beq.n	8001e9c <spiStart.constprop.10+0xbc>
 8001e58:	6999      	ldr	r1, [r3, #24]
 8001e5a:	6892      	ldr	r2, [r2, #8]
 8001e5c:	6889      	ldr	r1, [r1, #8]
 8001e5e:	4291      	cmp	r1, r2
 8001e60:	d21c      	bcs.n	8001e9c <spiStart.constprop.10+0xbc>
 8001e62:	b672      	cpsid	i
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <spiStart.constprop.10+0xe8>)
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e68:	e7fe      	b.n	8001e68 <spiStart.constprop.10+0x88>
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8001e6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e6c:	4917      	ldr	r1, [pc, #92]	; (8001ecc <spiStart.constprop.10+0xec>)
 8001e6e:	f7ff fd9f 	bl	80019b0 <dmaStreamAllocate.constprop.12>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8001e72:	b9e0      	cbnz	r0, 8001eae <spiStart.constprop.10+0xce>
      b = dmaStreamAllocate(spip->dmatx,
 8001e74:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e76:	4916      	ldr	r1, [pc, #88]	; (8001ed0 <spiStart.constprop.10+0xf0>)
 8001e78:	f7ff fd9a 	bl	80019b0 <dmaStreamAllocate.constprop.12>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8001e7c:	b990      	cbnz	r0, 8001ea4 <spiStart.constprop.10+0xc4>
      rccEnableSPI1(FALSE);
 8001e7e:	4815      	ldr	r0, [pc, #84]	; (8001ed4 <spiStart.constprop.10+0xf4>)
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001e80:	6a65      	ldr	r5, [r4, #36]	; 0x24
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8001e82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8001e84:	6c41      	ldr	r1, [r0, #68]	; 0x44
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001e86:	6a22      	ldr	r2, [r4, #32]
 8001e88:	682e      	ldr	r6, [r5, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8001e8a:	681d      	ldr	r5, [r3, #0]
 8001e8c:	6863      	ldr	r3, [r4, #4]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001e8e:	320c      	adds	r2, #12
      b = dmaStreamAllocate(spip->dmatx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8001e90:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001e94:	6441      	str	r1, [r0, #68]	; 0x44
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8001e96:	60b2      	str	r2, [r6, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8001e98:	60aa      	str	r2, [r5, #8]
 8001e9a:	e7b7      	b.n	8001e0c <spiStart.constprop.10+0x2c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	bd70      	pop	{r4, r5, r6, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <spiStart.constprop.10+0xdc>)
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <spiStart.constprop.10+0xf8>)
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eac:	e7fe      	b.n	8001eac <spiStart.constprop.10+0xcc>
 8001eae:	b672      	cpsid	i
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <spiStart.constprop.10+0xdc>)
 8001eb2:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <spiStart.constprop.10+0xf8>)
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eb6:	e7fe      	b.n	8001eb6 <spiStart.constprop.10+0xd6>
 8001eb8:	20000ed0 	.word	0x20000ed0
 8001ebc:	200008f8 	.word	0x200008f8
 8001ec0:	08002310 	.word	0x08002310
 8001ec4:	08002320 	.word	0x08002320
 8001ec8:	080022c0 	.word	0x080022c0
 8001ecc:	080002e1 	.word	0x080002e1
 8001ed0:	080002c1 	.word	0x080002c1
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	080022d0 	.word	0x080022d0
 8001edc:	00000000 	.word	0x00000000

08001ee0 <spiStop.constprop.8>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiStop(SPIDriver *spip) {
 8001ee0:	b510      	push	{r4, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 8001ee8:	4c1b      	ldr	r4, [pc, #108]	; (8001f58 <spiStop.constprop.8+0x78>)
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8001eea:	f7ff f8a9 	bl	8001040 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001eee:	f7ff fc07 	bl	8001700 <_dbg_check_lock>
 8001ef2:	7823      	ldrb	r3, [r4, #0]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	2a01      	cmp	r2, #1
 8001ef8:	d904      	bls.n	8001f04 <spiStop.constprop.8+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001efa:	b672      	cpsid	i
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <spiStop.constprop.8+0x7c>)
 8001efe:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <spiStop.constprop.8+0x80>)
 8001f00:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f02:	e7fe      	b.n	8001f02 <spiStop.constprop.8+0x22>
 * @notapi
 */
void spi_lld_stop(SPIDriver *spip) {

  /* If in ready state then disables the SPI clock.*/
  if (spip->state == SPI_READY) {
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d012      	beq.n	8001f2e <spiStop.constprop.8+0x4e>
                "invalid state");
  spi_lld_stop(spip);
  spip->state = SPI_STOP;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	7023      	strb	r3, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001f0c:	f7ff fbe8 	bl	80016e0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001f10:	f7ff f886 	bl	8001020 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <spiStop.constprop.8+0x7c>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d004      	beq.n	8001f26 <spiStop.constprop.8+0x46>
 8001f1c:	6999      	ldr	r1, [r3, #24]
 8001f1e:	6892      	ldr	r2, [r2, #8]
 8001f20:	6889      	ldr	r1, [r1, #8]
 8001f22:	4291      	cmp	r1, r2
 8001f24:	d313      	bcc.n	8001f4e <spiStop.constprop.8+0x6e>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001f26:	2300      	movs	r3, #0
 8001f28:	f383 8811 	msr	BASEPRI, r3
 8001f2c:	bd10      	pop	{r4, pc}

    /* SPI disable.*/
    spip->spi->CR1 = 0;
 8001f2e:	6a23      	ldr	r3, [r4, #32]
    spip->spi->CR2 = 0;
    dmaStreamRelease(spip->dmarx);
 8001f30:	6a60      	ldr	r0, [r4, #36]	; 0x24

  /* If in ready state then disables the SPI clock.*/
  if (spip->state == SPI_READY) {

    /* SPI disable.*/
    spip->spi->CR1 = 0;
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
    spip->spi->CR2 = 0;
 8001f36:	605a      	str	r2, [r3, #4]
    dmaStreamRelease(spip->dmarx);
 8001f38:	f7fe fb62 	bl	8000600 <dmaStreamRelease>
    dmaStreamRelease(spip->dmatx);
 8001f3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001f3e:	f7fe fb5f 	bl	8000600 <dmaStreamRelease>

#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip)
      rccDisableSPI1(FALSE);
 8001f42:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <spiStop.constprop.8+0x84>)
 8001f44:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4c:	e7dc      	b.n	8001f08 <spiStop.constprop.8+0x28>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4e:	b672      	cpsid	i
 8001f50:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <spiStop.constprop.8+0x88>)
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f54:	e7fe      	b.n	8001f54 <spiStop.constprop.8+0x74>
 8001f56:	bf00      	nop
 8001f58:	20000ed0 	.word	0x20000ed0
 8001f5c:	200008f8 	.word	0x200008f8
 8001f60:	08002300 	.word	0x08002300
 8001f64:	40023800 	.word	0x40023800
 8001f68:	080022c0 	.word	0x080022c0
 8001f6c:	00000000 	.word	0x00000000

08001f70 <spiSelect.constprop.6>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 8001f70:	b508      	push	{r3, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001f72:	2320      	movs	r3, #32
 8001f74:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8001f78:	f7ff f862 	bl	8001040 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001f7c:	f7ff fbc0 	bl	8001700 <_dbg_check_lock>

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <spiSelect.constprop.6+0x5c>)
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	2a02      	cmp	r2, #2
 8001f86:	d004      	beq.n	8001f92 <spiSelect.constprop.6+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <spiSelect.constprop.6+0x60>)
 8001f8c:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <spiSelect.constprop.6+0x64>)
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f90:	e7fe      	b.n	8001f90 <spiSelect.constprop.6+0x20>
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	8919      	ldrh	r1, [r3, #8]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	2301      	movs	r3, #1
 8001f9a:	408b      	lsls	r3, r1
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	8353      	strh	r3, [r2, #26]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001fa0:	f7ff fb9e 	bl	80016e0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8001fa4:	f7ff f83c 	bl	8001020 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <spiSelect.constprop.6+0x60>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d004      	beq.n	8001fba <spiSelect.constprop.6+0x4a>
 8001fb0:	6999      	ldr	r1, [r3, #24]
 8001fb2:	6892      	ldr	r2, [r2, #8]
 8001fb4:	6889      	ldr	r1, [r1, #8]
 8001fb6:	4291      	cmp	r1, r2
 8001fb8:	d303      	bcc.n	8001fc2 <spiSelect.constprop.6+0x52>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f383 8811 	msr	BASEPRI, r3
 8001fc0:	bd08      	pop	{r3, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc2:	b672      	cpsid	i
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <spiSelect.constprop.6+0x68>)
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fc8:	e7fe      	b.n	8001fc8 <spiSelect.constprop.6+0x58>
 8001fca:	bf00      	nop
 8001fcc:	20000ed0 	.word	0x20000ed0
 8001fd0:	200008f8 	.word	0x200008f8
 8001fd4:	080022e0 	.word	0x080022e0
 8001fd8:	080022c0 	.word	0x080022c0
 8001fdc:	00000000 	.word	0x00000000

08001fe0 <spiUnselect.constprop.4>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 8001fe0:	b508      	push	{r3, lr}

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 * @special
 */
static inline void chSysLock(void)  {

  port_lock();
  _stats_start_measure_crit_thd();
 8001fe8:	f7ff f82a 	bl	8001040 <_stats_start_measure_crit_thd>
  _dbg_check_lock();
 8001fec:	f7ff fb88 	bl	8001700 <_dbg_check_lock>

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <spiUnselect.constprop.4+0x5c>)
 8001ff2:	781a      	ldrb	r2, [r3, #0]
 8001ff4:	2a02      	cmp	r2, #2
 8001ff6:	d004      	beq.n	8002002 <spiUnselect.constprop.4+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff8:	b672      	cpsid	i
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <spiUnselect.constprop.4+0x60>)
 8001ffc:	4a11      	ldr	r2, [pc, #68]	; (8002044 <spiUnselect.constprop.4+0x64>)
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002000:	e7fe      	b.n	8002000 <spiUnselect.constprop.4+0x20>
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	8919      	ldrh	r1, [r3, #8]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	2301      	movs	r3, #1
 800200a:	408b      	lsls	r3, r1
 800200c:	b29b      	uxth	r3, r3
 800200e:	8313      	strh	r3, [r2, #24]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002010:	f7ff fb66 	bl	80016e0 <_dbg_check_unlock>
  _stats_stop_measure_crit_thd();
 8002014:	f7ff f804 	bl	8001020 <_stats_stop_measure_crit_thd>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <spiUnselect.constprop.4+0x60>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d004      	beq.n	800202a <spiUnselect.constprop.4+0x4a>
 8002020:	6999      	ldr	r1, [r3, #24]
 8002022:	6892      	ldr	r2, [r2, #8]
 8002024:	6889      	ldr	r1, [r1, #8]
 8002026:	4291      	cmp	r1, r2
 8002028:	d303      	bcc.n	8002032 <spiUnselect.constprop.4+0x52>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800202a:	2300      	movs	r3, #0
 800202c:	f383 8811 	msr	BASEPRI, r3
 8002030:	bd08      	pop	{r3, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002032:	b672      	cpsid	i
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <spiUnselect.constprop.4+0x68>)
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
 8002038:	e7fe      	b.n	8002038 <spiUnselect.constprop.4+0x58>
 800203a:	bf00      	nop
 800203c:	20000ed0 	.word	0x20000ed0
 8002040:	200008f8 	.word	0x200008f8
 8002044:	08002260 	.word	0x08002260
 8002048:	080022c0 	.word	0x080022c0
 800204c:	00000000 	.word	0x00000000

08002050 <__func__.6656>:
 8002050:	68546863 73655264 49656d75 00000000     chThdResumeI....

08002060 <__func__.7108>:
 8002060:	53616d64 61657274 6c65526d 65736165     dmaStreamRelease
	...

08002080 <__func__.5877.lto_priv.37>:
 8002080:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....
 8002090:	20414d44 6c696166 00657275 33235653     DMA failure.SV#3
 80020a0:	00000000 63617473 766f206b 6c667265     ....stack overfl
 80020b0:	0000776f 656c6469 00000000 00000000     ow..idle........

080020c0 <__func__.5963>:
 80020c0:	54566863 69546f44 00496b63 00000000     chVTDoTickI.....

080020d0 <ch_debug>:
 80020d0:	6e69616d 18031600 08600404 1814100c     main......`.....
 80020e0:	2221201c 00000000 00000000 00000000     . !"............

080020f0 <_stm32_dma_streams>:
 80020f0:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8002100:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8002110:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8002120:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8002130:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8002140:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8002150:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8002160:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8002170:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8002180:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8002190:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 80021a0:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

080021b0 <__func__.6048>:
 80021b0:	68546863 656c5364 00537065 00000000     chThdSleepS.....

080021c0 <__func__.5877.lto_priv.38>:
 80021c0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....
 80021d0:	31235653 00000031 31235653 00000030     SV#11...SV#10...
 80021e0:	39235653 00000000 38235653 00000000     SV#9....SV#8....
 80021f0:	37235653 00000000 36235653 00000000     SV#7....SV#6....
 8002200:	35235653 00000000 34235653 00000000     SV#5....SV#4....

08002210 <__func__.7023>:
 8002210:	74537473 41747261 6d72616c 00000000     stStartAlarm....

08002220 <__func__.6578>:
 8002220:	63536863 61655268 00497964 00000000     chSchReadyI.....

08002230 <__func__.6634>:
 8002230:	68546863 69784564 00005374 00000000     chThdExitS......

08002240 <__func__.7030>:
 8002240:	65537473 616c4174 00006d72 00000000     stSetAlarm......

08002250 <__func__.7081>:
 8002250:	53697073 00646e65 00000000 00000000     spiSend.........

08002260 <__func__.7039>:
 8002260:	55697073 6c65736e 00746365 00000000     spiUnselect.....

08002270 <__func__.6644>:
 8002270:	68546863 73755364 646e6570 00000053     chThdSuspendS...

08002280 <__func__.7101>:
 8002280:	53616d64 61657274 6c6c416d 7461636f     dmaStreamAllocat
 8002290:	00000065 00000000 00000000 00000000     e...............

080022a0 <__func__.6604>:
 80022a0:	744d6863 6c6e5578 006b636f 00000000     chMtxUnlock.....

080022b0 <__func__.5877.lto_priv.27>:
 80022b0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

080022c0 <__func__.5877.lto_priv.28>:
 80022c0:	79536863 6c6e5573 006b636f 00000000     chSysUnlock.....

080022d0 <__func__.7041>:
 80022d0:	5f697073 5f646c6c 72617473 00000074     spi_lld_start...

080022e0 <__func__.7035>:
 80022e0:	53697073 63656c65 00000074 00000000     spiSelect.......

080022f0 <__func__.6581>:
 80022f0:	744d6863 636f4c78 0000536b 00000000     chMtxLockS......

08002300 <__func__.7031>:
 8002300:	53697073 00706f74 00000000 00000000     spiStop.........

08002310 <__func__.7027>:
 8002310:	53697073 74726174 00000000 00000000     spiStart........

08002320 <hs_spicfg.lto_priv.31>:
 8002320:	00000000 40020000 00330004              .......@..3.
